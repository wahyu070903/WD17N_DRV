
WD17N_DRV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005840  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08005950  08005950  00006950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059d4  080059d4  00007068  2**0
                  CONTENTS
  4 .ARM          00000000  080059d4  080059d4  00007068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080059d4  080059d4  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059d4  080059d4  000069d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080059d8  080059d8  000069d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080059dc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012d4  20000068  08005a44  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000133c  08005a44  0000733c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012fec  00000000  00000000  00007091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f99  00000000  00000000  0001a07d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  0001d018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dc2  00000000  00000000  0001e1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000193eb  00000000  00000000  0001ef9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000148d1  00000000  00000000  00038385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092c83  00000000  00000000  0004cc56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000df8d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dc0  00000000  00000000  000df91c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000e46dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08005938 	.word	0x08005938

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08005938 	.word	0x08005938

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_fmul>:
 800098c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000990:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000994:	bf1e      	ittt	ne
 8000996:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800099a:	ea92 0f0c 	teqne	r2, ip
 800099e:	ea93 0f0c 	teqne	r3, ip
 80009a2:	d06f      	beq.n	8000a84 <__aeabi_fmul+0xf8>
 80009a4:	441a      	add	r2, r3
 80009a6:	ea80 0c01 	eor.w	ip, r0, r1
 80009aa:	0240      	lsls	r0, r0, #9
 80009ac:	bf18      	it	ne
 80009ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009b2:	d01e      	beq.n	80009f2 <__aeabi_fmul+0x66>
 80009b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80009b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80009bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80009c0:	fba0 3101 	umull	r3, r1, r0, r1
 80009c4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80009c8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80009cc:	bf3e      	ittt	cc
 80009ce:	0049      	lslcc	r1, r1, #1
 80009d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80009d4:	005b      	lslcc	r3, r3, #1
 80009d6:	ea40 0001 	orr.w	r0, r0, r1
 80009da:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80009de:	2afd      	cmp	r2, #253	@ 0xfd
 80009e0:	d81d      	bhi.n	8000a1e <__aeabi_fmul+0x92>
 80009e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80009e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009ea:	bf08      	it	eq
 80009ec:	f020 0001 	biceq.w	r0, r0, #1
 80009f0:	4770      	bx	lr
 80009f2:	f090 0f00 	teq	r0, #0
 80009f6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80009fa:	bf08      	it	eq
 80009fc:	0249      	lsleq	r1, r1, #9
 80009fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a02:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a06:	3a7f      	subs	r2, #127	@ 0x7f
 8000a08:	bfc2      	ittt	gt
 8000a0a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000a0e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a12:	4770      	bxgt	lr
 8000a14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a18:	f04f 0300 	mov.w	r3, #0
 8000a1c:	3a01      	subs	r2, #1
 8000a1e:	dc5d      	bgt.n	8000adc <__aeabi_fmul+0x150>
 8000a20:	f112 0f19 	cmn.w	r2, #25
 8000a24:	bfdc      	itt	le
 8000a26:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000a2a:	4770      	bxle	lr
 8000a2c:	f1c2 0200 	rsb	r2, r2, #0
 8000a30:	0041      	lsls	r1, r0, #1
 8000a32:	fa21 f102 	lsr.w	r1, r1, r2
 8000a36:	f1c2 0220 	rsb	r2, r2, #32
 8000a3a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a3e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a42:	f140 0000 	adc.w	r0, r0, #0
 8000a46:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a4a:	bf08      	it	eq
 8000a4c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a50:	4770      	bx	lr
 8000a52:	f092 0f00 	teq	r2, #0
 8000a56:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000a5a:	bf02      	ittt	eq
 8000a5c:	0040      	lsleq	r0, r0, #1
 8000a5e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000a62:	3a01      	subeq	r2, #1
 8000a64:	d0f9      	beq.n	8000a5a <__aeabi_fmul+0xce>
 8000a66:	ea40 000c 	orr.w	r0, r0, ip
 8000a6a:	f093 0f00 	teq	r3, #0
 8000a6e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a72:	bf02      	ittt	eq
 8000a74:	0049      	lsleq	r1, r1, #1
 8000a76:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000a7a:	3b01      	subeq	r3, #1
 8000a7c:	d0f9      	beq.n	8000a72 <__aeabi_fmul+0xe6>
 8000a7e:	ea41 010c 	orr.w	r1, r1, ip
 8000a82:	e78f      	b.n	80009a4 <__aeabi_fmul+0x18>
 8000a84:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a88:	ea92 0f0c 	teq	r2, ip
 8000a8c:	bf18      	it	ne
 8000a8e:	ea93 0f0c 	teqne	r3, ip
 8000a92:	d00a      	beq.n	8000aaa <__aeabi_fmul+0x11e>
 8000a94:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000a98:	bf18      	it	ne
 8000a9a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000a9e:	d1d8      	bne.n	8000a52 <__aeabi_fmul+0xc6>
 8000aa0:	ea80 0001 	eor.w	r0, r0, r1
 8000aa4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000aa8:	4770      	bx	lr
 8000aaa:	f090 0f00 	teq	r0, #0
 8000aae:	bf17      	itett	ne
 8000ab0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ab4:	4608      	moveq	r0, r1
 8000ab6:	f091 0f00 	teqne	r1, #0
 8000aba:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000abe:	d014      	beq.n	8000aea <__aeabi_fmul+0x15e>
 8000ac0:	ea92 0f0c 	teq	r2, ip
 8000ac4:	d101      	bne.n	8000aca <__aeabi_fmul+0x13e>
 8000ac6:	0242      	lsls	r2, r0, #9
 8000ac8:	d10f      	bne.n	8000aea <__aeabi_fmul+0x15e>
 8000aca:	ea93 0f0c 	teq	r3, ip
 8000ace:	d103      	bne.n	8000ad8 <__aeabi_fmul+0x14c>
 8000ad0:	024b      	lsls	r3, r1, #9
 8000ad2:	bf18      	it	ne
 8000ad4:	4608      	movne	r0, r1
 8000ad6:	d108      	bne.n	8000aea <__aeabi_fmul+0x15e>
 8000ad8:	ea80 0001 	eor.w	r0, r0, r1
 8000adc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000aee:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_fdiv>:
 8000af4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000af8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000afc:	bf1e      	ittt	ne
 8000afe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b02:	ea92 0f0c 	teqne	r2, ip
 8000b06:	ea93 0f0c 	teqne	r3, ip
 8000b0a:	d069      	beq.n	8000be0 <__aeabi_fdiv+0xec>
 8000b0c:	eba2 0203 	sub.w	r2, r2, r3
 8000b10:	ea80 0c01 	eor.w	ip, r0, r1
 8000b14:	0249      	lsls	r1, r1, #9
 8000b16:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b1a:	d037      	beq.n	8000b8c <__aeabi_fdiv+0x98>
 8000b1c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000b20:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b24:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b28:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000b2c:	428b      	cmp	r3, r1
 8000b2e:	bf38      	it	cc
 8000b30:	005b      	lslcc	r3, r3, #1
 8000b32:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000b36:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000b3a:	428b      	cmp	r3, r1
 8000b3c:	bf24      	itt	cs
 8000b3e:	1a5b      	subcs	r3, r3, r1
 8000b40:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b44:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b48:	bf24      	itt	cs
 8000b4a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b4e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b52:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000b56:	bf24      	itt	cs
 8000b58:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000b5c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b60:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000b64:	bf24      	itt	cs
 8000b66:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000b6a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b6e:	011b      	lsls	r3, r3, #4
 8000b70:	bf18      	it	ne
 8000b72:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b76:	d1e0      	bne.n	8000b3a <__aeabi_fdiv+0x46>
 8000b78:	2afd      	cmp	r2, #253	@ 0xfd
 8000b7a:	f63f af50 	bhi.w	8000a1e <__aeabi_fmul+0x92>
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000b90:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b94:	327f      	adds	r2, #127	@ 0x7f
 8000b96:	bfc2      	ittt	gt
 8000b98:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000b9c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ba0:	4770      	bxgt	lr
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba6:	f04f 0300 	mov.w	r3, #0
 8000baa:	3a01      	subs	r2, #1
 8000bac:	e737      	b.n	8000a1e <__aeabi_fmul+0x92>
 8000bae:	f092 0f00 	teq	r2, #0
 8000bb2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000bb6:	bf02      	ittt	eq
 8000bb8:	0040      	lsleq	r0, r0, #1
 8000bba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000bbe:	3a01      	subeq	r2, #1
 8000bc0:	d0f9      	beq.n	8000bb6 <__aeabi_fdiv+0xc2>
 8000bc2:	ea40 000c 	orr.w	r0, r0, ip
 8000bc6:	f093 0f00 	teq	r3, #0
 8000bca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bce:	bf02      	ittt	eq
 8000bd0:	0049      	lsleq	r1, r1, #1
 8000bd2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000bd6:	3b01      	subeq	r3, #1
 8000bd8:	d0f9      	beq.n	8000bce <__aeabi_fdiv+0xda>
 8000bda:	ea41 010c 	orr.w	r1, r1, ip
 8000bde:	e795      	b.n	8000b0c <__aeabi_fdiv+0x18>
 8000be0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000be4:	ea92 0f0c 	teq	r2, ip
 8000be8:	d108      	bne.n	8000bfc <__aeabi_fdiv+0x108>
 8000bea:	0242      	lsls	r2, r0, #9
 8000bec:	f47f af7d 	bne.w	8000aea <__aeabi_fmul+0x15e>
 8000bf0:	ea93 0f0c 	teq	r3, ip
 8000bf4:	f47f af70 	bne.w	8000ad8 <__aeabi_fmul+0x14c>
 8000bf8:	4608      	mov	r0, r1
 8000bfa:	e776      	b.n	8000aea <__aeabi_fmul+0x15e>
 8000bfc:	ea93 0f0c 	teq	r3, ip
 8000c00:	d104      	bne.n	8000c0c <__aeabi_fdiv+0x118>
 8000c02:	024b      	lsls	r3, r1, #9
 8000c04:	f43f af4c 	beq.w	8000aa0 <__aeabi_fmul+0x114>
 8000c08:	4608      	mov	r0, r1
 8000c0a:	e76e      	b.n	8000aea <__aeabi_fmul+0x15e>
 8000c0c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000c10:	bf18      	it	ne
 8000c12:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c16:	d1ca      	bne.n	8000bae <__aeabi_fdiv+0xba>
 8000c18:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000c1c:	f47f af5c 	bne.w	8000ad8 <__aeabi_fmul+0x14c>
 8000c20:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000c24:	f47f af3c 	bne.w	8000aa0 <__aeabi_fmul+0x114>
 8000c28:	e75f      	b.n	8000aea <__aeabi_fmul+0x15e>
 8000c2a:	bf00      	nop

08000c2c <__aeabi_f2uiz>:
 8000c2c:	0042      	lsls	r2, r0, #1
 8000c2e:	d20e      	bcs.n	8000c4e <__aeabi_f2uiz+0x22>
 8000c30:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000c34:	d30b      	bcc.n	8000c4e <__aeabi_f2uiz+0x22>
 8000c36:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000c3a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c3e:	d409      	bmi.n	8000c54 <__aeabi_f2uiz+0x28>
 8000c40:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c44:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c48:	fa23 f002 	lsr.w	r0, r3, r2
 8000c4c:	4770      	bx	lr
 8000c4e:	f04f 0000 	mov.w	r0, #0
 8000c52:	4770      	bx	lr
 8000c54:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000c58:	d101      	bne.n	8000c5e <__aeabi_f2uiz+0x32>
 8000c5a:	0242      	lsls	r2, r0, #9
 8000c5c:	d102      	bne.n	8000c64 <__aeabi_f2uiz+0x38>
 8000c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8000c62:	4770      	bx	lr
 8000c64:	f04f 0000 	mov.w	r0, #0
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <stepperInit>:
volatile uint32_t pulseCount = 0;
volatile uint32_t target_count = 0;
static float microstep_factor = 0;
static uint8_t gen_complete = 1;

void stepperInit(void) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, DRV_ENA, GPIO_PIN_RESET);	// DRV ENABLE = 0 (on)
 8000c70:	2200      	movs	r2, #0
 8000c72:	2120      	movs	r1, #32
 8000c74:	4809      	ldr	r0, [pc, #36]	@ (8000c9c <stepperInit+0x30>)
 8000c76:	f000 ffe9 	bl	8001c4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, DRV_SLEEP, GPIO_PIN_SET);  // DRV SLEEP = 1 (wake up)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	2180      	movs	r1, #128	@ 0x80
 8000c7e:	4807      	ldr	r0, [pc, #28]	@ (8000c9c <stepperInit+0x30>)
 8000c80:	f000 ffe4 	bl	8001c4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, DRV_RSET, GPIO_PIN_SET);  // DRV RST = 1 (reset)
 8000c84:	2201      	movs	r2, #1
 8000c86:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c8a:	4804      	ldr	r0, [pc, #16]	@ (8000c9c <stepperInit+0x30>)
 8000c8c:	f000 ffde 	bl	8001c4c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000c90:	200a      	movs	r0, #10
 8000c92:	f000 fd53 	bl	800173c <HAL_Delay>
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40010800 	.word	0x40010800

08000ca0 <setMicrostep>:
void setMicrostep(uint8_t mod2, uint8_t mod1, uint8_t mod0) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
 8000caa:	460b      	mov	r3, r1
 8000cac:	71bb      	strb	r3, [r7, #6]
 8000cae:	4613      	mov	r3, r2
 8000cb0:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(GPIOA, DRV_MOD2, mod2 ? GPIO_PIN_SET : GPIO_PIN_RESET); // MOD2
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	bf14      	ite	ne
 8000cb8:	2301      	movne	r3, #1
 8000cba:	2300      	moveq	r3, #0
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	2110      	movs	r1, #16
 8000cc2:	4830      	ldr	r0, [pc, #192]	@ (8000d84 <setMicrostep+0xe4>)
 8000cc4:	f000 ffc2 	bl	8001c4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, DRV_MOD1, mod1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // MOD1
 8000cc8:	79bb      	ldrb	r3, [r7, #6]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	bf14      	ite	ne
 8000cce:	2301      	movne	r3, #1
 8000cd0:	2300      	moveq	r3, #0
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	2108      	movs	r1, #8
 8000cd8:	482a      	ldr	r0, [pc, #168]	@ (8000d84 <setMicrostep+0xe4>)
 8000cda:	f000 ffb7 	bl	8001c4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, DRV_MOD0, mod0 ? GPIO_PIN_SET : GPIO_PIN_RESET); // MOD0
 8000cde:	797b      	ldrb	r3, [r7, #5]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	bf14      	ite	ne
 8000ce4:	2301      	movne	r3, #1
 8000ce6:	2300      	moveq	r3, #0
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	461a      	mov	r2, r3
 8000cec:	2104      	movs	r1, #4
 8000cee:	4825      	ldr	r0, [pc, #148]	@ (8000d84 <setMicrostep+0xe4>)
 8000cf0:	f000 ffac 	bl	8001c4c <HAL_GPIO_WritePin>
	microstep_factor = 1;
 8000cf4:	4b24      	ldr	r3, [pc, #144]	@ (8000d88 <setMicrostep+0xe8>)
 8000cf6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000cfa:	601a      	str	r2, [r3, #0]
	if (mod2 == 0 && mod1 == 0 && mod0 == 0) {
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d10a      	bne.n	8000d18 <setMicrostep+0x78>
 8000d02:	79bb      	ldrb	r3, [r7, #6]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d107      	bne.n	8000d18 <setMicrostep+0x78>
 8000d08:	797b      	ldrb	r3, [r7, #5]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d104      	bne.n	8000d18 <setMicrostep+0x78>
	    microstep_factor = 1.0;
 8000d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000d88 <setMicrostep+0xe8>)
 8000d10:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	e031      	b.n	8000d7c <setMicrostep+0xdc>
	}
	else if (mod2 == 0 && mod1 == 0 && mod0 == 1) {
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d10a      	bne.n	8000d34 <setMicrostep+0x94>
 8000d1e:	79bb      	ldrb	r3, [r7, #6]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d107      	bne.n	8000d34 <setMicrostep+0x94>
 8000d24:	797b      	ldrb	r3, [r7, #5]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d104      	bne.n	8000d34 <setMicrostep+0x94>
	    microstep_factor = 2.0;
 8000d2a:	4b17      	ldr	r3, [pc, #92]	@ (8000d88 <setMicrostep+0xe8>)
 8000d2c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	e023      	b.n	8000d7c <setMicrostep+0xdc>
	}
	else if (mod2 == 0 && mod1 == 1 && mod0 == 0) {
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d10a      	bne.n	8000d50 <setMicrostep+0xb0>
 8000d3a:	79bb      	ldrb	r3, [r7, #6]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d107      	bne.n	8000d50 <setMicrostep+0xb0>
 8000d40:	797b      	ldrb	r3, [r7, #5]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d104      	bne.n	8000d50 <setMicrostep+0xb0>
	    microstep_factor = 4.0;
 8000d46:	4b10      	ldr	r3, [pc, #64]	@ (8000d88 <setMicrostep+0xe8>)
 8000d48:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	e015      	b.n	8000d7c <setMicrostep+0xdc>
	}
	else if (mod2 == 0 && mod1 == 1 && mod0 == 1) {
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d10a      	bne.n	8000d6c <setMicrostep+0xcc>
 8000d56:	79bb      	ldrb	r3, [r7, #6]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d107      	bne.n	8000d6c <setMicrostep+0xcc>
 8000d5c:	797b      	ldrb	r3, [r7, #5]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d104      	bne.n	8000d6c <setMicrostep+0xcc>
	    microstep_factor = 1.0 / 8.0;
 8000d62:	4b09      	ldr	r3, [pc, #36]	@ (8000d88 <setMicrostep+0xe8>)
 8000d64:	f04f 5278 	mov.w	r2, #1040187392	@ 0x3e000000
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	e007      	b.n	8000d7c <setMicrostep+0xdc>
	}
	else if (mod2 == 1) {
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d104      	bne.n	8000d7c <setMicrostep+0xdc>
	    microstep_factor = 1.0 / 32.0;
 8000d72:	4b05      	ldr	r3, [pc, #20]	@ (8000d88 <setMicrostep+0xe8>)
 8000d74:	f04f 5274 	mov.w	r2, #1023410176	@ 0x3d000000
 8000d78:	601a      	str	r2, [r3, #0]
	}
}
 8000d7a:	e7ff      	b.n	8000d7c <setMicrostep+0xdc>
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40010800 	.word	0x40010800
 8000d88:	2000008c 	.word	0x2000008c

08000d8c <generateStep>:
void generateStep(uint8_t stepCount){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
	if(gen_complete == 1){
 8000d96:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc0 <generateStep+0x34>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d10c      	bne.n	8000db8 <generateStep+0x2c>
		pulseCount = 0;
 8000d9e:	4b09      	ldr	r3, [pc, #36]	@ (8000dc4 <generateStep+0x38>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
		target_count = stepCount;
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	4a08      	ldr	r2, [pc, #32]	@ (8000dc8 <generateStep+0x3c>)
 8000da8:	6013      	str	r3, [r2, #0]
		HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 8000daa:	2100      	movs	r1, #0
 8000dac:	4807      	ldr	r0, [pc, #28]	@ (8000dcc <generateStep+0x40>)
 8000dae:	f002 fc5b 	bl	8003668 <HAL_TIM_PWM_Start_IT>
		gen_complete = 0;
 8000db2:	4b03      	ldr	r3, [pc, #12]	@ (8000dc0 <generateStep+0x34>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]
	}
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000000 	.word	0x20000000
 8000dc4:	20000084 	.word	0x20000084
 8000dc8:	20000088 	.word	0x20000088
 8000dcc:	20000388 	.word	0x20000388

08000dd0 <configureSpeed>:
void configureSpeed(float rps){
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	float step_per_rev = 360.0 / 1.8;
 8000dd8:	4b14      	ldr	r3, [pc, #80]	@ (8000e2c <configureSpeed+0x5c>)
 8000dda:	60fb      	str	r3, [r7, #12]
	step_per_rev = step_per_rev * microstep_factor;
 8000ddc:	4b14      	ldr	r3, [pc, #80]	@ (8000e30 <configureSpeed+0x60>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4619      	mov	r1, r3
 8000de2:	68f8      	ldr	r0, [r7, #12]
 8000de4:	f7ff fdd2 	bl	800098c <__aeabi_fmul>
 8000de8:	4603      	mov	r3, r0
 8000dea:	60fb      	str	r3, [r7, #12]
	float freq = 0;
 8000dec:	f04f 0300 	mov.w	r3, #0
 8000df0:	60bb      	str	r3, [r7, #8]
	freq = rps * step_per_rev;
 8000df2:	68f9      	ldr	r1, [r7, #12]
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f7ff fdc9 	bl	800098c <__aeabi_fmul>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	60bb      	str	r3, [r7, #8]
	freq = PRESCALLER_FREQ / freq;
 8000dfe:	68b9      	ldr	r1, [r7, #8]
 8000e00:	480c      	ldr	r0, [pc, #48]	@ (8000e34 <configureSpeed+0x64>)
 8000e02:	f7ff fe77 	bl	8000af4 <__aeabi_fdiv>
 8000e06:	4603      	mov	r3, r0
 8000e08:	60bb      	str	r3, [r7, #8]
	 __HAL_TIM_SET_AUTORELOAD(&htim2, freq);
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e38 <configureSpeed+0x68>)
 8000e0c:	681c      	ldr	r4, [r3, #0]
 8000e0e:	68b8      	ldr	r0, [r7, #8]
 8000e10:	f7ff ff0c 	bl	8000c2c <__aeabi_f2uiz>
 8000e14:	4603      	mov	r3, r0
 8000e16:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000e18:	68b8      	ldr	r0, [r7, #8]
 8000e1a:	f7ff ff07 	bl	8000c2c <__aeabi_f2uiz>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	4a05      	ldr	r2, [pc, #20]	@ (8000e38 <configureSpeed+0x68>)
 8000e22:	60d3      	str	r3, [r2, #12]
	
}
 8000e24:	bf00      	nop
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd90      	pop	{r4, r7, pc}
 8000e2c:	43480000 	.word	0x43480000
 8000e30:	2000008c 	.word	0x2000008c
 8000e34:	49742400 	.word	0x49742400
 8000e38:	20000388 	.word	0x20000388

08000e3c <HAL_TIM_PWM_PulseFinishedCallback>:

// 1 pulse finish callback
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e4c:	d114      	bne.n	8000e78 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>
			pulseCount++;
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e80 <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	3301      	adds	r3, #1
 8000e54:	4a0a      	ldr	r2, [pc, #40]	@ (8000e80 <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 8000e56:	6013      	str	r3, [r2, #0]
			if(pulseCount >= target_count){
 8000e58:	4b09      	ldr	r3, [pc, #36]	@ (8000e80 <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4b09      	ldr	r3, [pc, #36]	@ (8000e84 <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d309      	bcc.n	8000e78 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>
				HAL_TIM_PWM_Stop_IT(htim, TIM_CHANNEL_1);
 8000e64:	2100      	movs	r1, #0
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f002 fcee 	bl	8003848 <HAL_TIM_PWM_Stop_IT>
				pulseCount = 0;
 8000e6c:	4b04      	ldr	r3, [pc, #16]	@ (8000e80 <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
				gen_complete = 1;
 8000e72:	4b05      	ldr	r3, [pc, #20]	@ (8000e88 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	701a      	strb	r2, [r3, #0]
			}
    }
}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000084 	.word	0x20000084
 8000e84:	20000088 	.word	0x20000088
 8000e88:	20000000 	.word	0x20000000

08000e8c <encGetAngle>:
	}else if (dir == 0){
		HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, GPIO_PIN_SET);
	}
}

void encGetAngle(float* result){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08a      	sub	sp, #40	@ 0x28
 8000e90:	af04      	add	r7, sp, #16
 8000e92:	6078      	str	r0, [r7, #4]
	uint8_t buffer[2] = {0};
 8000e94:	2300      	movs	r3, #0
 8000e96:	81bb      	strh	r3, [r7, #12]
	uint16_t angle  = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(&hi2c1, (ENC_ADDR << 1), AS5600_RAW_ANGLE_MSB_REG, I2C_MEMADD_SIZE_8BIT, buffer, 2, 100);
 8000e9c:	2364      	movs	r3, #100	@ 0x64
 8000e9e:	9302      	str	r3, [sp, #8]
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	9301      	str	r3, [sp, #4]
 8000ea4:	f107 030c 	add.w	r3, r7, #12
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	2301      	movs	r3, #1
 8000eac:	220c      	movs	r2, #12
 8000eae:	216c      	movs	r1, #108	@ 0x6c
 8000eb0:	4815      	ldr	r0, [pc, #84]	@ (8000f08 <encGetAngle+0x7c>)
 8000eb2:	f001 f827 	bl	8001f04 <HAL_I2C_Mem_Read>
	angle = (buffer[0] << 8) | buffer[1];
 8000eb6:	7b3b      	ldrb	r3, [r7, #12]
 8000eb8:	021b      	lsls	r3, r3, #8
 8000eba:	b21a      	sxth	r2, r3
 8000ebc:	7b7b      	ldrb	r3, [r7, #13]
 8000ebe:	b21b      	sxth	r3, r3
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	b21b      	sxth	r3, r3
 8000ec4:	82fb      	strh	r3, [r7, #22]
	float angle_deg = (angle * 360.0) / 4096.0;
 8000ec6:	8afb      	ldrh	r3, [r7, #22]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fa93 	bl	80003f4 <__aeabi_i2d>
 8000ece:	f04f 0200 	mov.w	r2, #0
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f0c <encGetAngle+0x80>)
 8000ed4:	f7ff faf8 	bl	80004c8 <__aeabi_dmul>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	460b      	mov	r3, r1
 8000edc:	4610      	mov	r0, r2
 8000ede:	4619      	mov	r1, r3
 8000ee0:	f04f 0200 	mov.w	r2, #0
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8000f10 <encGetAngle+0x84>)
 8000ee6:	f7ff fc19 	bl	800071c <__aeabi_ddiv>
 8000eea:	4602      	mov	r2, r0
 8000eec:	460b      	mov	r3, r1
 8000eee:	4610      	mov	r0, r2
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f7ff fcfb 	bl	80008ec <__aeabi_d2f>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	613b      	str	r3, [r7, #16]

	*result = angle_deg;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	601a      	str	r2, [r3, #0]
}
 8000f00:	bf00      	nop
 8000f02:	3718      	adds	r7, #24
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000334 	.word	0x20000334
 8000f0c:	40768000 	.word	0x40768000
 8000f10:	40b00000 	.word	0x40b00000

08000f14 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	4a06      	ldr	r2, [pc, #24]	@ (8000f3c <vApplicationGetIdleTaskMemory+0x28>)
 8000f24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	4a05      	ldr	r2, [pc, #20]	@ (8000f40 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2280      	movs	r2, #128	@ 0x80
 8000f30:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f32:	bf00      	nop
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr
 8000f3c:	20000090 	.word	0x20000090
 8000f40:	20000130 	.word	0x20000130

08000f44 <i2c_scanbus>:

static uint8_t i2c_dataRady = 0;
static uint8_t i2c_sendSuccess = 0;

/* Blocking function */
void i2c_scanbus(I2C_HandleTypeDef* channel, uint8_t* found_addr){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef result;
	static uint8_t counter = 0;
	for(uint8_t i = 0 ; i <= MAX_NODE ; i++){
 8000f4e:	2300      	movs	r3, #0
 8000f50:	73fb      	strb	r3, [r7, #15]
 8000f52:	e020      	b.n	8000f96 <i2c_scanbus+0x52>
		result = HAL_I2C_IsDeviceReady(channel, (i << 1), 1, 100);
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	b299      	uxth	r1, r3
 8000f5c:	2364      	movs	r3, #100	@ 0x64
 8000f5e:	2201      	movs	r2, #1
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f001 fa43 	bl	80023ec <HAL_I2C_IsDeviceReady>
 8000f66:	4603      	mov	r3, r0
 8000f68:	73bb      	strb	r3, [r7, #14]
		if(result == HAL_OK){
 8000f6a:	7bbb      	ldrb	r3, [r7, #14]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d10c      	bne.n	8000f8a <i2c_scanbus+0x46>
			found_addr[counter] = i;
 8000f70:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa8 <i2c_scanbus+0x64>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	4413      	add	r3, r2
 8000f7a:	7bfa      	ldrb	r2, [r7, #15]
 8000f7c:	701a      	strb	r2, [r3, #0]
			counter++;
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa8 <i2c_scanbus+0x64>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	3301      	adds	r3, #1
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4b08      	ldr	r3, [pc, #32]	@ (8000fa8 <i2c_scanbus+0x64>)
 8000f88:	701a      	strb	r2, [r3, #0]
		}
		HAL_Delay(10);
 8000f8a:	200a      	movs	r0, #10
 8000f8c:	f000 fbd6 	bl	800173c <HAL_Delay>
	for(uint8_t i = 0 ; i <= MAX_NODE ; i++){
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	3301      	adds	r3, #1
 8000f94:	73fb      	strb	r3, [r7, #15]
 8000f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	dada      	bge.n	8000f54 <i2c_scanbus+0x10>
	}
}
 8000f9e:	bf00      	nop
 8000fa0:	bf00      	nop
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000330 	.word	0x20000330

08000fac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fac:	b5b0      	push	{r4, r5, r7, lr}
 8000fae:	b08e      	sub	sp, #56	@ 0x38
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fb2:	f000 fb91 	bl	80016d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb6:	f000 f84d 	bl	8001054 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fba:	f000 f933 	bl	8001224 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fbe:	f000 f88f 	bl	80010e0 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000fc2:	f000 f8bb 	bl	800113c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  i2c_scanbus(&hi2c1, available_node);
 8000fc6:	491c      	ldr	r1, [pc, #112]	@ (8001038 <main+0x8c>)
 8000fc8:	481c      	ldr	r0, [pc, #112]	@ (800103c <main+0x90>)
 8000fca:	f7ff ffbb 	bl	8000f44 <i2c_scanbus>
  stepperInit();
 8000fce:	f7ff fe4d 	bl	8000c6c <stepperInit>
  setMicrostep(0,0,0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f7ff fe62 	bl	8000ca0 <setMicrostep>
  configureSpeed(motor_speed);
 8000fdc:	4b18      	ldr	r3, [pc, #96]	@ (8001040 <main+0x94>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fef5 	bl	8000dd0 <configureSpeed>
  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(driverTask, StartDriverTask, osPriorityNormal, 0, 128);
 8000fe6:	4b17      	ldr	r3, [pc, #92]	@ (8001044 <main+0x98>)
 8000fe8:	f107 041c 	add.w	r4, r7, #28
 8000fec:	461d      	mov	r5, r3
 8000fee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ff0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ff2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ff6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  driverTaskHandler = osThreadCreate(osThread(driverTask), NULL);
 8000ffa:	f107 031c 	add.w	r3, r7, #28
 8000ffe:	2100      	movs	r1, #0
 8001000:	4618      	mov	r0, r3
 8001002:	f003 faa5 	bl	8004550 <osThreadCreate>
 8001006:	4603      	mov	r3, r0
 8001008:	4a0f      	ldr	r2, [pc, #60]	@ (8001048 <main+0x9c>)
 800100a:	6013      	str	r3, [r2, #0]

  osThreadDef(encoderTask, StartEncoderTask, osPriorityNormal, 0, 128);
 800100c:	4b0f      	ldr	r3, [pc, #60]	@ (800104c <main+0xa0>)
 800100e:	463c      	mov	r4, r7
 8001010:	461d      	mov	r5, r3
 8001012:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001014:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001016:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800101a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  encoderTaskHandler = osThreadCreate(osThread(encoderTask), NULL);
 800101e:	463b      	mov	r3, r7
 8001020:	2100      	movs	r1, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f003 fa94 	bl	8004550 <osThreadCreate>
 8001028:	4603      	mov	r3, r0
 800102a:	4a09      	ldr	r2, [pc, #36]	@ (8001050 <main+0xa4>)
 800102c:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800102e:	f003 fa88 	bl	8004542 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001032:	bf00      	nop
 8001034:	e7fd      	b.n	8001032 <main+0x86>
 8001036:	bf00      	nop
 8001038:	200003dc 	.word	0x200003dc
 800103c:	20000334 	.word	0x20000334
 8001040:	20000004 	.word	0x20000004
 8001044:	0800595c 	.word	0x0800595c
 8001048:	200003d0 	.word	0x200003d0
 800104c:	08005984 	.word	0x08005984
 8001050:	200003d4 	.word	0x200003d4

08001054 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b090      	sub	sp, #64	@ 0x40
 8001058:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105a:	f107 0318 	add.w	r3, r7, #24
 800105e:	2228      	movs	r2, #40	@ 0x28
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f004 fb90 	bl	8005788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
 8001074:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001076:	2301      	movs	r3, #1
 8001078:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800107a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800107e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001080:	2300      	movs	r3, #0
 8001082:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001084:	2301      	movs	r3, #1
 8001086:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001088:	2302      	movs	r3, #2
 800108a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800108c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001090:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001092:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001096:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001098:	f107 0318 	add.w	r3, r7, #24
 800109c:	4618      	mov	r0, r3
 800109e:	f001 fda9 	bl	8002bf4 <HAL_RCC_OscConfig>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <SystemClock_Config+0x58>
  {
    Error_Handler();
 80010a8:	f000 f97a 	bl	80013a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ac:	230f      	movs	r3, #15
 80010ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b0:	2302      	movs	r3, #2
 80010b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	2102      	movs	r1, #2
 80010c6:	4618      	mov	r0, r3
 80010c8:	f002 f816 	bl	80030f8 <HAL_RCC_ClockConfig>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80010d2:	f000 f965 	bl	80013a0 <Error_Handler>
  }
}
 80010d6:	bf00      	nop
 80010d8:	3740      	adds	r7, #64	@ 0x40
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010e4:	4b12      	ldr	r3, [pc, #72]	@ (8001130 <MX_I2C1_Init+0x50>)
 80010e6:	4a13      	ldr	r2, [pc, #76]	@ (8001134 <MX_I2C1_Init+0x54>)
 80010e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010ea:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <MX_I2C1_Init+0x50>)
 80010ec:	4a12      	ldr	r2, [pc, #72]	@ (8001138 <MX_I2C1_Init+0x58>)
 80010ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <MX_I2C1_Init+0x50>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001130 <MX_I2C1_Init+0x50>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001130 <MX_I2C1_Init+0x50>)
 80010fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001102:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001104:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <MX_I2C1_Init+0x50>)
 8001106:	2200      	movs	r2, #0
 8001108:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800110a:	4b09      	ldr	r3, [pc, #36]	@ (8001130 <MX_I2C1_Init+0x50>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001110:	4b07      	ldr	r3, [pc, #28]	@ (8001130 <MX_I2C1_Init+0x50>)
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001116:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <MX_I2C1_Init+0x50>)
 8001118:	2200      	movs	r2, #0
 800111a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800111c:	4804      	ldr	r0, [pc, #16]	@ (8001130 <MX_I2C1_Init+0x50>)
 800111e:	f000 fdad 	bl	8001c7c <HAL_I2C_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001128:	f000 f93a 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000334 	.word	0x20000334
 8001134:	40005400 	.word	0x40005400
 8001138:	000186a0 	.word	0x000186a0

0800113c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08e      	sub	sp, #56	@ 0x38
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001142:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001150:	f107 0320 	add.w	r3, r7, #32
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
 8001168:	615a      	str	r2, [r3, #20]
 800116a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800116c:	4b2c      	ldr	r3, [pc, #176]	@ (8001220 <MX_TIM2_Init+0xe4>)
 800116e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001172:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72 - 1;
 8001174:	4b2a      	ldr	r3, [pc, #168]	@ (8001220 <MX_TIM2_Init+0xe4>)
 8001176:	2247      	movs	r2, #71	@ 0x47
 8001178:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117a:	4b29      	ldr	r3, [pc, #164]	@ (8001220 <MX_TIM2_Init+0xe4>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4 - 1;
 8001180:	4b27      	ldr	r3, [pc, #156]	@ (8001220 <MX_TIM2_Init+0xe4>)
 8001182:	2203      	movs	r2, #3
 8001184:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001186:	4b26      	ldr	r3, [pc, #152]	@ (8001220 <MX_TIM2_Init+0xe4>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800118c:	4b24      	ldr	r3, [pc, #144]	@ (8001220 <MX_TIM2_Init+0xe4>)
 800118e:	2200      	movs	r2, #0
 8001190:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001192:	4823      	ldr	r0, [pc, #140]	@ (8001220 <MX_TIM2_Init+0xe4>)
 8001194:	f002 f96e 	bl	8003474 <HAL_TIM_Base_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800119e:	f000 f8ff 	bl	80013a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011a8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011ac:	4619      	mov	r1, r3
 80011ae:	481c      	ldr	r0, [pc, #112]	@ (8001220 <MX_TIM2_Init+0xe4>)
 80011b0:	f002 fdae 	bl	8003d10 <HAL_TIM_ConfigClockSource>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80011ba:	f000 f8f1 	bl	80013a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011be:	4818      	ldr	r0, [pc, #96]	@ (8001220 <MX_TIM2_Init+0xe4>)
 80011c0:	f002 f9fa 	bl	80035b8 <HAL_TIM_PWM_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80011ca:	f000 f8e9 	bl	80013a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ce:	2300      	movs	r3, #0
 80011d0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d2:	2300      	movs	r3, #0
 80011d4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011d6:	f107 0320 	add.w	r3, r7, #32
 80011da:	4619      	mov	r1, r3
 80011dc:	4810      	ldr	r0, [pc, #64]	@ (8001220 <MX_TIM2_Init+0xe4>)
 80011de:	f003 f929 	bl	8004434 <HAL_TIMEx_MasterConfigSynchronization>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80011e8:	f000 f8da 	bl	80013a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ec:	2360      	movs	r3, #96	@ 0x60
 80011ee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 80011f0:	2332      	movs	r3, #50	@ 0x32
 80011f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	2200      	movs	r2, #0
 8001200:	4619      	mov	r1, r3
 8001202:	4807      	ldr	r0, [pc, #28]	@ (8001220 <MX_TIM2_Init+0xe4>)
 8001204:	f002 fcc2 	bl	8003b8c <HAL_TIM_PWM_ConfigChannel>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800120e:	f000 f8c7 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001212:	4803      	ldr	r0, [pc, #12]	@ (8001220 <MX_TIM2_Init+0xe4>)
 8001214:	f000 f964 	bl	80014e0 <HAL_TIM_MspPostInit>

}
 8001218:	bf00      	nop
 800121a:	3738      	adds	r7, #56	@ 0x38
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000388 	.word	0x20000388

08001224 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b088      	sub	sp, #32
 8001228:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122a:	f107 0310 	add.w	r3, r7, #16
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001238:	4b3e      	ldr	r3, [pc, #248]	@ (8001334 <MX_GPIO_Init+0x110>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	4a3d      	ldr	r2, [pc, #244]	@ (8001334 <MX_GPIO_Init+0x110>)
 800123e:	f043 0310 	orr.w	r3, r3, #16
 8001242:	6193      	str	r3, [r2, #24]
 8001244:	4b3b      	ldr	r3, [pc, #236]	@ (8001334 <MX_GPIO_Init+0x110>)
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	f003 0310 	and.w	r3, r3, #16
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001250:	4b38      	ldr	r3, [pc, #224]	@ (8001334 <MX_GPIO_Init+0x110>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	4a37      	ldr	r2, [pc, #220]	@ (8001334 <MX_GPIO_Init+0x110>)
 8001256:	f043 0320 	orr.w	r3, r3, #32
 800125a:	6193      	str	r3, [r2, #24]
 800125c:	4b35      	ldr	r3, [pc, #212]	@ (8001334 <MX_GPIO_Init+0x110>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	f003 0320 	and.w	r3, r3, #32
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001268:	4b32      	ldr	r3, [pc, #200]	@ (8001334 <MX_GPIO_Init+0x110>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	4a31      	ldr	r2, [pc, #196]	@ (8001334 <MX_GPIO_Init+0x110>)
 800126e:	f043 0304 	orr.w	r3, r3, #4
 8001272:	6193      	str	r3, [r2, #24]
 8001274:	4b2f      	ldr	r3, [pc, #188]	@ (8001334 <MX_GPIO_Init+0x110>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	f003 0304 	and.w	r3, r3, #4
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001280:	4b2c      	ldr	r3, [pc, #176]	@ (8001334 <MX_GPIO_Init+0x110>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	4a2b      	ldr	r2, [pc, #172]	@ (8001334 <MX_GPIO_Init+0x110>)
 8001286:	f043 0308 	orr.w	r3, r3, #8
 800128a:	6193      	str	r3, [r2, #24]
 800128c:	4b29      	ldr	r3, [pc, #164]	@ (8001334 <MX_GPIO_Init+0x110>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	f003 0308 	and.w	r3, r3, #8
 8001294:	603b      	str	r3, [r7, #0]
 8001296:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001298:	2200      	movs	r2, #0
 800129a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800129e:	4826      	ldr	r0, [pc, #152]	@ (8001338 <MX_GPIO_Init+0x114>)
 80012a0:	f000 fcd4 	bl	8001c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80012a4:	2200      	movs	r2, #0
 80012a6:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 80012aa:	4824      	ldr	r0, [pc, #144]	@ (800133c <MX_GPIO_Init+0x118>)
 80012ac:	f000 fcce 	bl	8001c4c <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80012b0:	2200      	movs	r2, #0
 80012b2:	2120      	movs	r1, #32
 80012b4:	4822      	ldr	r0, [pc, #136]	@ (8001340 <MX_GPIO_Init+0x11c>)
 80012b6:	f000 fcc9 	bl	8001c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c0:	2301      	movs	r3, #1
 80012c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c8:	2302      	movs	r3, #2
 80012ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012cc:	f107 0310 	add.w	r3, r7, #16
 80012d0:	4619      	mov	r1, r3
 80012d2:	4819      	ldr	r0, [pc, #100]	@ (8001338 <MX_GPIO_Init+0x114>)
 80012d4:	f000 fb36 	bl	8001944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80012d8:	f44f 73df 	mov.w	r3, #446	@ 0x1be
 80012dc:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012de:	2301      	movs	r3, #1
 80012e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	2302      	movs	r3, #2
 80012e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ea:	f107 0310 	add.w	r3, r7, #16
 80012ee:	4619      	mov	r1, r3
 80012f0:	4812      	ldr	r0, [pc, #72]	@ (800133c <MX_GPIO_Init+0x118>)
 80012f2:	f000 fb27 	bl	8001944 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012f6:	2340      	movs	r3, #64	@ 0x40
 80012f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001302:	f107 0310 	add.w	r3, r7, #16
 8001306:	4619      	mov	r1, r3
 8001308:	480c      	ldr	r0, [pc, #48]	@ (800133c <MX_GPIO_Init+0x118>)
 800130a:	f000 fb1b 	bl	8001944 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800130e:	2320      	movs	r3, #32
 8001310:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001312:	2301      	movs	r3, #1
 8001314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131a:	2302      	movs	r3, #2
 800131c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131e:	f107 0310 	add.w	r3, r7, #16
 8001322:	4619      	mov	r1, r3
 8001324:	4806      	ldr	r0, [pc, #24]	@ (8001340 <MX_GPIO_Init+0x11c>)
 8001326:	f000 fb0d 	bl	8001944 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800132a:	bf00      	nop
 800132c:	3720      	adds	r7, #32
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40021000 	.word	0x40021000
 8001338:	40011000 	.word	0x40011000
 800133c:	40010800 	.word	0x40010800
 8001340:	40010c00 	.word	0x40010c00

08001344 <StartDriverTask>:

/* USER CODE BEGIN 4 */
void StartDriverTask(void const* argument){
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	for(;;){
		generateStep(200);
 800134c:	20c8      	movs	r0, #200	@ 0xc8
 800134e:	f7ff fd1d 	bl	8000d8c <generateStep>
 8001352:	e7fb      	b.n	800134c <StartDriverTask+0x8>

08001354 <StartEncoderTask>:
	}
}

void StartEncoderTask(void const* argument){
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	float enc_angle = 0.0;
 800135c:	f04f 0300 	mov.w	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
	for(;;){
		encGetAngle(&enc_angle);
 8001362:	f107 030c 	add.w	r3, r7, #12
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fd90 	bl	8000e8c <encGetAngle>
		angle_data = enc_angle;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4a02      	ldr	r2, [pc, #8]	@ (8001378 <StartEncoderTask+0x24>)
 8001370:	6013      	str	r3, [r2, #0]
		encGetAngle(&enc_angle);
 8001372:	bf00      	nop
 8001374:	e7f5      	b.n	8001362 <StartEncoderTask+0xe>
 8001376:	bf00      	nop
 8001378:	200003d8 	.word	0x200003d8

0800137c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a04      	ldr	r2, [pc, #16]	@ (800139c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d101      	bne.n	8001392 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800138e:	f000 f9b9 	bl	8001704 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40012c00 	.word	0x40012c00

080013a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a4:	b672      	cpsid	i
}
 80013a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a8:	bf00      	nop
 80013aa:	e7fd      	b.n	80013a8 <Error_Handler+0x8>

080013ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013b2:	4b18      	ldr	r3, [pc, #96]	@ (8001414 <HAL_MspInit+0x68>)
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	4a17      	ldr	r2, [pc, #92]	@ (8001414 <HAL_MspInit+0x68>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	6193      	str	r3, [r2, #24]
 80013be:	4b15      	ldr	r3, [pc, #84]	@ (8001414 <HAL_MspInit+0x68>)
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ca:	4b12      	ldr	r3, [pc, #72]	@ (8001414 <HAL_MspInit+0x68>)
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	4a11      	ldr	r2, [pc, #68]	@ (8001414 <HAL_MspInit+0x68>)
 80013d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013d4:	61d3      	str	r3, [r2, #28]
 80013d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001414 <HAL_MspInit+0x68>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	210f      	movs	r1, #15
 80013e6:	f06f 0001 	mvn.w	r0, #1
 80013ea:	f000 fa80 	bl	80018ee <HAL_NVIC_SetPriority>

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 80013ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001418 <HAL_MspInit+0x6c>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	4a04      	ldr	r2, [pc, #16]	@ (8001418 <HAL_MspInit+0x6c>)
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140a:	bf00      	nop
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40021000 	.word	0x40021000
 8001418:	40010000 	.word	0x40010000

0800141c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b088      	sub	sp, #32
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 0310 	add.w	r3, r7, #16
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a15      	ldr	r2, [pc, #84]	@ (800148c <HAL_I2C_MspInit+0x70>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d123      	bne.n	8001484 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800143c:	4b14      	ldr	r3, [pc, #80]	@ (8001490 <HAL_I2C_MspInit+0x74>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	4a13      	ldr	r2, [pc, #76]	@ (8001490 <HAL_I2C_MspInit+0x74>)
 8001442:	f043 0308 	orr.w	r3, r3, #8
 8001446:	6193      	str	r3, [r2, #24]
 8001448:	4b11      	ldr	r3, [pc, #68]	@ (8001490 <HAL_I2C_MspInit+0x74>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	f003 0308 	and.w	r3, r3, #8
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001454:	23c0      	movs	r3, #192	@ 0xc0
 8001456:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001458:	2312      	movs	r3, #18
 800145a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800145c:	2303      	movs	r3, #3
 800145e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001460:	f107 0310 	add.w	r3, r7, #16
 8001464:	4619      	mov	r1, r3
 8001466:	480b      	ldr	r0, [pc, #44]	@ (8001494 <HAL_I2C_MspInit+0x78>)
 8001468:	f000 fa6c 	bl	8001944 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800146c:	4b08      	ldr	r3, [pc, #32]	@ (8001490 <HAL_I2C_MspInit+0x74>)
 800146e:	69db      	ldr	r3, [r3, #28]
 8001470:	4a07      	ldr	r2, [pc, #28]	@ (8001490 <HAL_I2C_MspInit+0x74>)
 8001472:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001476:	61d3      	str	r3, [r2, #28]
 8001478:	4b05      	ldr	r3, [pc, #20]	@ (8001490 <HAL_I2C_MspInit+0x74>)
 800147a:	69db      	ldr	r3, [r3, #28]
 800147c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001484:	bf00      	nop
 8001486:	3720      	adds	r7, #32
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40005400 	.word	0x40005400
 8001490:	40021000 	.word	0x40021000
 8001494:	40010c00 	.word	0x40010c00

08001498 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014a8:	d113      	bne.n	80014d2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014aa:	4b0c      	ldr	r3, [pc, #48]	@ (80014dc <HAL_TIM_Base_MspInit+0x44>)
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	4a0b      	ldr	r2, [pc, #44]	@ (80014dc <HAL_TIM_Base_MspInit+0x44>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	61d3      	str	r3, [r2, #28]
 80014b6:	4b09      	ldr	r3, [pc, #36]	@ (80014dc <HAL_TIM_Base_MspInit+0x44>)
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2105      	movs	r1, #5
 80014c6:	201c      	movs	r0, #28
 80014c8:	f000 fa11 	bl	80018ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014cc:	201c      	movs	r0, #28
 80014ce:	f000 fa2a 	bl	8001926 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80014d2:	bf00      	nop
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40021000 	.word	0x40021000

080014e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b088      	sub	sp, #32
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	f107 0310 	add.w	r3, r7, #16
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014fe:	d117      	bne.n	8001530 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001500:	4b0d      	ldr	r3, [pc, #52]	@ (8001538 <HAL_TIM_MspPostInit+0x58>)
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	4a0c      	ldr	r2, [pc, #48]	@ (8001538 <HAL_TIM_MspPostInit+0x58>)
 8001506:	f043 0304 	orr.w	r3, r3, #4
 800150a:	6193      	str	r3, [r2, #24]
 800150c:	4b0a      	ldr	r3, [pc, #40]	@ (8001538 <HAL_TIM_MspPostInit+0x58>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	f003 0304 	and.w	r3, r3, #4
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001518:	2301      	movs	r3, #1
 800151a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151c:	2302      	movs	r3, #2
 800151e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001520:	2302      	movs	r3, #2
 8001522:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001524:	f107 0310 	add.w	r3, r7, #16
 8001528:	4619      	mov	r1, r3
 800152a:	4804      	ldr	r0, [pc, #16]	@ (800153c <HAL_TIM_MspPostInit+0x5c>)
 800152c:	f000 fa0a 	bl	8001944 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001530:	bf00      	nop
 8001532:	3720      	adds	r7, #32
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40021000 	.word	0x40021000
 800153c:	40010800 	.word	0x40010800

08001540 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08c      	sub	sp, #48	@ 0x30
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001548:	2300      	movs	r3, #0
 800154a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800154c:	2300      	movs	r3, #0
 800154e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001550:	2300      	movs	r3, #0
 8001552:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001556:	4b2e      	ldr	r3, [pc, #184]	@ (8001610 <HAL_InitTick+0xd0>)
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	4a2d      	ldr	r2, [pc, #180]	@ (8001610 <HAL_InitTick+0xd0>)
 800155c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001560:	6193      	str	r3, [r2, #24]
 8001562:	4b2b      	ldr	r3, [pc, #172]	@ (8001610 <HAL_InitTick+0xd0>)
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800156e:	f107 020c 	add.w	r2, r7, #12
 8001572:	f107 0310 	add.w	r3, r7, #16
 8001576:	4611      	mov	r1, r2
 8001578:	4618      	mov	r0, r3
 800157a:	f001 ff2d 	bl	80033d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800157e:	f001 ff17 	bl	80033b0 <HAL_RCC_GetPCLK2Freq>
 8001582:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001586:	4a23      	ldr	r2, [pc, #140]	@ (8001614 <HAL_InitTick+0xd4>)
 8001588:	fba2 2303 	umull	r2, r3, r2, r3
 800158c:	0c9b      	lsrs	r3, r3, #18
 800158e:	3b01      	subs	r3, #1
 8001590:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001592:	4b21      	ldr	r3, [pc, #132]	@ (8001618 <HAL_InitTick+0xd8>)
 8001594:	4a21      	ldr	r2, [pc, #132]	@ (800161c <HAL_InitTick+0xdc>)
 8001596:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001598:	4b1f      	ldr	r3, [pc, #124]	@ (8001618 <HAL_InitTick+0xd8>)
 800159a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800159e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80015a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001618 <HAL_InitTick+0xd8>)
 80015a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80015a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001618 <HAL_InitTick+0xd8>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001618 <HAL_InitTick+0xd8>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b2:	4b19      	ldr	r3, [pc, #100]	@ (8001618 <HAL_InitTick+0xd8>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80015b8:	4817      	ldr	r0, [pc, #92]	@ (8001618 <HAL_InitTick+0xd8>)
 80015ba:	f001 ff5b 	bl	8003474 <HAL_TIM_Base_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80015c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d11b      	bne.n	8001604 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80015cc:	4812      	ldr	r0, [pc, #72]	@ (8001618 <HAL_InitTick+0xd8>)
 80015ce:	f001 ffa1 	bl	8003514 <HAL_TIM_Base_Start_IT>
 80015d2:	4603      	mov	r3, r0
 80015d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80015d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80015e0:	2019      	movs	r0, #25
 80015e2:	f000 f9a0 	bl	8001926 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b0f      	cmp	r3, #15
 80015ea:	d808      	bhi.n	80015fe <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80015ec:	2200      	movs	r2, #0
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	2019      	movs	r0, #25
 80015f2:	f000 f97c 	bl	80018ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001620 <HAL_InitTick+0xe0>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6013      	str	r3, [r2, #0]
 80015fc:	e002      	b.n	8001604 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001604:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001608:	4618      	mov	r0, r3
 800160a:	3730      	adds	r7, #48	@ 0x30
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40021000 	.word	0x40021000
 8001614:	431bde83 	.word	0x431bde83
 8001618:	2000045c 	.word	0x2000045c
 800161c:	40012c00 	.word	0x40012c00
 8001620:	2000000c 	.word	0x2000000c

08001624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001628:	bf00      	nop
 800162a:	e7fd      	b.n	8001628 <NMI_Handler+0x4>

0800162c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <HardFault_Handler+0x4>

08001634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <MemManage_Handler+0x4>

0800163c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <BusFault_Handler+0x4>

08001644 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <UsageFault_Handler+0x4>

0800164c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr

08001658 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800165c:	4802      	ldr	r0, [pc, #8]	@ (8001668 <TIM1_UP_IRQHandler+0x10>)
 800165e:	f002 f9a5 	bl	80039ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	2000045c 	.word	0x2000045c

0800166c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001670:	4802      	ldr	r0, [pc, #8]	@ (800167c <TIM2_IRQHandler+0x10>)
 8001672:	f002 f99b 	bl	80039ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000388 	.word	0x20000388

08001680 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr

0800168c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800168c:	f7ff fff8 	bl	8001680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001690:	480b      	ldr	r0, [pc, #44]	@ (80016c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001692:	490c      	ldr	r1, [pc, #48]	@ (80016c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001694:	4a0c      	ldr	r2, [pc, #48]	@ (80016c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001698:	e002      	b.n	80016a0 <LoopCopyDataInit>

0800169a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800169c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800169e:	3304      	adds	r3, #4

080016a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a4:	d3f9      	bcc.n	800169a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016a6:	4a09      	ldr	r2, [pc, #36]	@ (80016cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016a8:	4c09      	ldr	r4, [pc, #36]	@ (80016d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016ac:	e001      	b.n	80016b2 <LoopFillZerobss>

080016ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b0:	3204      	adds	r2, #4

080016b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b4:	d3fb      	bcc.n	80016ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016b6:	f004 f8c5 	bl	8005844 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016ba:	f7ff fc77 	bl	8000fac <main>
  bx lr
 80016be:	4770      	bx	lr
  ldr r0, =_sdata
 80016c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80016c8:	080059dc 	.word	0x080059dc
  ldr r2, =_sbss
 80016cc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80016d0:	2000133c 	.word	0x2000133c

080016d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016d4:	e7fe      	b.n	80016d4 <ADC1_2_IRQHandler>
	...

080016d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016dc:	4b08      	ldr	r3, [pc, #32]	@ (8001700 <HAL_Init+0x28>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a07      	ldr	r2, [pc, #28]	@ (8001700 <HAL_Init+0x28>)
 80016e2:	f043 0310 	orr.w	r3, r3, #16
 80016e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e8:	2003      	movs	r0, #3
 80016ea:	f000 f8f5 	bl	80018d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ee:	200f      	movs	r0, #15
 80016f0:	f7ff ff26 	bl	8001540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016f4:	f7ff fe5a 	bl	80013ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40022000 	.word	0x40022000

08001704 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001708:	4b05      	ldr	r3, [pc, #20]	@ (8001720 <HAL_IncTick+0x1c>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	461a      	mov	r2, r3
 800170e:	4b05      	ldr	r3, [pc, #20]	@ (8001724 <HAL_IncTick+0x20>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4413      	add	r3, r2
 8001714:	4a03      	ldr	r2, [pc, #12]	@ (8001724 <HAL_IncTick+0x20>)
 8001716:	6013      	str	r3, [r2, #0]
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	20000010 	.word	0x20000010
 8001724:	200004a4 	.word	0x200004a4

08001728 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return uwTick;
 800172c:	4b02      	ldr	r3, [pc, #8]	@ (8001738 <HAL_GetTick+0x10>)
 800172e:	681b      	ldr	r3, [r3, #0]
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr
 8001738:	200004a4 	.word	0x200004a4

0800173c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001744:	f7ff fff0 	bl	8001728 <HAL_GetTick>
 8001748:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001754:	d005      	beq.n	8001762 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001756:	4b0a      	ldr	r3, [pc, #40]	@ (8001780 <HAL_Delay+0x44>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	461a      	mov	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4413      	add	r3, r2
 8001760:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001762:	bf00      	nop
 8001764:	f7ff ffe0 	bl	8001728 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	429a      	cmp	r2, r3
 8001772:	d8f7      	bhi.n	8001764 <HAL_Delay+0x28>
  {
  }
}
 8001774:	bf00      	nop
 8001776:	bf00      	nop
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000010 	.word	0x20000010

08001784 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001794:	4b0c      	ldr	r3, [pc, #48]	@ (80017c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017a0:	4013      	ands	r3, r2
 80017a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b6:	4a04      	ldr	r2, [pc, #16]	@ (80017c8 <__NVIC_SetPriorityGrouping+0x44>)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	60d3      	str	r3, [r2, #12]
}
 80017bc:	bf00      	nop
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d0:	4b04      	ldr	r3, [pc, #16]	@ (80017e4 <__NVIC_GetPriorityGrouping+0x18>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	0a1b      	lsrs	r3, r3, #8
 80017d6:	f003 0307 	and.w	r3, r3, #7
}
 80017da:	4618      	mov	r0, r3
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	db0b      	blt.n	8001812 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	f003 021f 	and.w	r2, r3, #31
 8001800:	4906      	ldr	r1, [pc, #24]	@ (800181c <__NVIC_EnableIRQ+0x34>)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	095b      	lsrs	r3, r3, #5
 8001808:	2001      	movs	r0, #1
 800180a:	fa00 f202 	lsl.w	r2, r0, r2
 800180e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr
 800181c:	e000e100 	.word	0xe000e100

08001820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	6039      	str	r1, [r7, #0]
 800182a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001830:	2b00      	cmp	r3, #0
 8001832:	db0a      	blt.n	800184a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	b2da      	uxtb	r2, r3
 8001838:	490c      	ldr	r1, [pc, #48]	@ (800186c <__NVIC_SetPriority+0x4c>)
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	0112      	lsls	r2, r2, #4
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	440b      	add	r3, r1
 8001844:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001848:	e00a      	b.n	8001860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4908      	ldr	r1, [pc, #32]	@ (8001870 <__NVIC_SetPriority+0x50>)
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	3b04      	subs	r3, #4
 8001858:	0112      	lsls	r2, r2, #4
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	440b      	add	r3, r1
 800185e:	761a      	strb	r2, [r3, #24]
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	bc80      	pop	{r7}
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	e000e100 	.word	0xe000e100
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001874:	b480      	push	{r7}
 8001876:	b089      	sub	sp, #36	@ 0x24
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f1c3 0307 	rsb	r3, r3, #7
 800188e:	2b04      	cmp	r3, #4
 8001890:	bf28      	it	cs
 8001892:	2304      	movcs	r3, #4
 8001894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3304      	adds	r3, #4
 800189a:	2b06      	cmp	r3, #6
 800189c:	d902      	bls.n	80018a4 <NVIC_EncodePriority+0x30>
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3b03      	subs	r3, #3
 80018a2:	e000      	b.n	80018a6 <NVIC_EncodePriority+0x32>
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a8:	f04f 32ff 	mov.w	r2, #4294967295
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43da      	mvns	r2, r3
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	401a      	ands	r2, r3
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018bc:	f04f 31ff 	mov.w	r1, #4294967295
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	fa01 f303 	lsl.w	r3, r1, r3
 80018c6:	43d9      	mvns	r1, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	4313      	orrs	r3, r2
         );
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3724      	adds	r7, #36	@ 0x24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr

080018d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7ff ff4f 	bl	8001784 <__NVIC_SetPriorityGrouping>
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b086      	sub	sp, #24
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	4603      	mov	r3, r0
 80018f6:	60b9      	str	r1, [r7, #8]
 80018f8:	607a      	str	r2, [r7, #4]
 80018fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001900:	f7ff ff64 	bl	80017cc <__NVIC_GetPriorityGrouping>
 8001904:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	68b9      	ldr	r1, [r7, #8]
 800190a:	6978      	ldr	r0, [r7, #20]
 800190c:	f7ff ffb2 	bl	8001874 <NVIC_EncodePriority>
 8001910:	4602      	mov	r2, r0
 8001912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001916:	4611      	mov	r1, r2
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff ff81 	bl	8001820 <__NVIC_SetPriority>
}
 800191e:	bf00      	nop
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b082      	sub	sp, #8
 800192a:	af00      	add	r7, sp, #0
 800192c:	4603      	mov	r3, r0
 800192e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff ff57 	bl	80017e8 <__NVIC_EnableIRQ>
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
	...

08001944 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001944:	b480      	push	{r7}
 8001946:	b08b      	sub	sp, #44	@ 0x2c
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800194e:	2300      	movs	r3, #0
 8001950:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001952:	2300      	movs	r3, #0
 8001954:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001956:	e169      	b.n	8001c2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001958:	2201      	movs	r2, #1
 800195a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	69fa      	ldr	r2, [r7, #28]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	429a      	cmp	r2, r3
 8001972:	f040 8158 	bne.w	8001c26 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	4a9a      	ldr	r2, [pc, #616]	@ (8001be4 <HAL_GPIO_Init+0x2a0>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d05e      	beq.n	8001a3e <HAL_GPIO_Init+0xfa>
 8001980:	4a98      	ldr	r2, [pc, #608]	@ (8001be4 <HAL_GPIO_Init+0x2a0>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d875      	bhi.n	8001a72 <HAL_GPIO_Init+0x12e>
 8001986:	4a98      	ldr	r2, [pc, #608]	@ (8001be8 <HAL_GPIO_Init+0x2a4>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d058      	beq.n	8001a3e <HAL_GPIO_Init+0xfa>
 800198c:	4a96      	ldr	r2, [pc, #600]	@ (8001be8 <HAL_GPIO_Init+0x2a4>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d86f      	bhi.n	8001a72 <HAL_GPIO_Init+0x12e>
 8001992:	4a96      	ldr	r2, [pc, #600]	@ (8001bec <HAL_GPIO_Init+0x2a8>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d052      	beq.n	8001a3e <HAL_GPIO_Init+0xfa>
 8001998:	4a94      	ldr	r2, [pc, #592]	@ (8001bec <HAL_GPIO_Init+0x2a8>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d869      	bhi.n	8001a72 <HAL_GPIO_Init+0x12e>
 800199e:	4a94      	ldr	r2, [pc, #592]	@ (8001bf0 <HAL_GPIO_Init+0x2ac>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d04c      	beq.n	8001a3e <HAL_GPIO_Init+0xfa>
 80019a4:	4a92      	ldr	r2, [pc, #584]	@ (8001bf0 <HAL_GPIO_Init+0x2ac>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d863      	bhi.n	8001a72 <HAL_GPIO_Init+0x12e>
 80019aa:	4a92      	ldr	r2, [pc, #584]	@ (8001bf4 <HAL_GPIO_Init+0x2b0>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d046      	beq.n	8001a3e <HAL_GPIO_Init+0xfa>
 80019b0:	4a90      	ldr	r2, [pc, #576]	@ (8001bf4 <HAL_GPIO_Init+0x2b0>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d85d      	bhi.n	8001a72 <HAL_GPIO_Init+0x12e>
 80019b6:	2b12      	cmp	r3, #18
 80019b8:	d82a      	bhi.n	8001a10 <HAL_GPIO_Init+0xcc>
 80019ba:	2b12      	cmp	r3, #18
 80019bc:	d859      	bhi.n	8001a72 <HAL_GPIO_Init+0x12e>
 80019be:	a201      	add	r2, pc, #4	@ (adr r2, 80019c4 <HAL_GPIO_Init+0x80>)
 80019c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c4:	08001a3f 	.word	0x08001a3f
 80019c8:	08001a19 	.word	0x08001a19
 80019cc:	08001a2b 	.word	0x08001a2b
 80019d0:	08001a6d 	.word	0x08001a6d
 80019d4:	08001a73 	.word	0x08001a73
 80019d8:	08001a73 	.word	0x08001a73
 80019dc:	08001a73 	.word	0x08001a73
 80019e0:	08001a73 	.word	0x08001a73
 80019e4:	08001a73 	.word	0x08001a73
 80019e8:	08001a73 	.word	0x08001a73
 80019ec:	08001a73 	.word	0x08001a73
 80019f0:	08001a73 	.word	0x08001a73
 80019f4:	08001a73 	.word	0x08001a73
 80019f8:	08001a73 	.word	0x08001a73
 80019fc:	08001a73 	.word	0x08001a73
 8001a00:	08001a73 	.word	0x08001a73
 8001a04:	08001a73 	.word	0x08001a73
 8001a08:	08001a21 	.word	0x08001a21
 8001a0c:	08001a35 	.word	0x08001a35
 8001a10:	4a79      	ldr	r2, [pc, #484]	@ (8001bf8 <HAL_GPIO_Init+0x2b4>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d013      	beq.n	8001a3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a16:	e02c      	b.n	8001a72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	623b      	str	r3, [r7, #32]
          break;
 8001a1e:	e029      	b.n	8001a74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	3304      	adds	r3, #4
 8001a26:	623b      	str	r3, [r7, #32]
          break;
 8001a28:	e024      	b.n	8001a74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	3308      	adds	r3, #8
 8001a30:	623b      	str	r3, [r7, #32]
          break;
 8001a32:	e01f      	b.n	8001a74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	330c      	adds	r3, #12
 8001a3a:	623b      	str	r3, [r7, #32]
          break;
 8001a3c:	e01a      	b.n	8001a74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d102      	bne.n	8001a4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a46:	2304      	movs	r3, #4
 8001a48:	623b      	str	r3, [r7, #32]
          break;
 8001a4a:	e013      	b.n	8001a74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d105      	bne.n	8001a60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a54:	2308      	movs	r3, #8
 8001a56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	69fa      	ldr	r2, [r7, #28]
 8001a5c:	611a      	str	r2, [r3, #16]
          break;
 8001a5e:	e009      	b.n	8001a74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a60:	2308      	movs	r3, #8
 8001a62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	69fa      	ldr	r2, [r7, #28]
 8001a68:	615a      	str	r2, [r3, #20]
          break;
 8001a6a:	e003      	b.n	8001a74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	623b      	str	r3, [r7, #32]
          break;
 8001a70:	e000      	b.n	8001a74 <HAL_GPIO_Init+0x130>
          break;
 8001a72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	2bff      	cmp	r3, #255	@ 0xff
 8001a78:	d801      	bhi.n	8001a7e <HAL_GPIO_Init+0x13a>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	e001      	b.n	8001a82 <HAL_GPIO_Init+0x13e>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	3304      	adds	r3, #4
 8001a82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	2bff      	cmp	r3, #255	@ 0xff
 8001a88:	d802      	bhi.n	8001a90 <HAL_GPIO_Init+0x14c>
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	e002      	b.n	8001a96 <HAL_GPIO_Init+0x152>
 8001a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a92:	3b08      	subs	r3, #8
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	210f      	movs	r1, #15
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	401a      	ands	r2, r3
 8001aa8:	6a39      	ldr	r1, [r7, #32]
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f000 80b1 	beq.w	8001c26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ac4:	4b4d      	ldr	r3, [pc, #308]	@ (8001bfc <HAL_GPIO_Init+0x2b8>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	4a4c      	ldr	r2, [pc, #304]	@ (8001bfc <HAL_GPIO_Init+0x2b8>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	6193      	str	r3, [r2, #24]
 8001ad0:	4b4a      	ldr	r3, [pc, #296]	@ (8001bfc <HAL_GPIO_Init+0x2b8>)
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001adc:	4a48      	ldr	r2, [pc, #288]	@ (8001c00 <HAL_GPIO_Init+0x2bc>)
 8001ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae0:	089b      	lsrs	r3, r3, #2
 8001ae2:	3302      	adds	r3, #2
 8001ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	220f      	movs	r2, #15
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	4013      	ands	r3, r2
 8001afe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a40      	ldr	r2, [pc, #256]	@ (8001c04 <HAL_GPIO_Init+0x2c0>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d013      	beq.n	8001b30 <HAL_GPIO_Init+0x1ec>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a3f      	ldr	r2, [pc, #252]	@ (8001c08 <HAL_GPIO_Init+0x2c4>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d00d      	beq.n	8001b2c <HAL_GPIO_Init+0x1e8>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a3e      	ldr	r2, [pc, #248]	@ (8001c0c <HAL_GPIO_Init+0x2c8>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d007      	beq.n	8001b28 <HAL_GPIO_Init+0x1e4>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a3d      	ldr	r2, [pc, #244]	@ (8001c10 <HAL_GPIO_Init+0x2cc>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d101      	bne.n	8001b24 <HAL_GPIO_Init+0x1e0>
 8001b20:	2303      	movs	r3, #3
 8001b22:	e006      	b.n	8001b32 <HAL_GPIO_Init+0x1ee>
 8001b24:	2304      	movs	r3, #4
 8001b26:	e004      	b.n	8001b32 <HAL_GPIO_Init+0x1ee>
 8001b28:	2302      	movs	r3, #2
 8001b2a:	e002      	b.n	8001b32 <HAL_GPIO_Init+0x1ee>
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e000      	b.n	8001b32 <HAL_GPIO_Init+0x1ee>
 8001b30:	2300      	movs	r3, #0
 8001b32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b34:	f002 0203 	and.w	r2, r2, #3
 8001b38:	0092      	lsls	r2, r2, #2
 8001b3a:	4093      	lsls	r3, r2
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b42:	492f      	ldr	r1, [pc, #188]	@ (8001c00 <HAL_GPIO_Init+0x2bc>)
 8001b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b46:	089b      	lsrs	r3, r3, #2
 8001b48:	3302      	adds	r3, #2
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d006      	beq.n	8001b6a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b5c:	4b2d      	ldr	r3, [pc, #180]	@ (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	492c      	ldr	r1, [pc, #176]	@ (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	608b      	str	r3, [r1, #8]
 8001b68:	e006      	b.n	8001b78 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b6a:	4b2a      	ldr	r3, [pc, #168]	@ (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	43db      	mvns	r3, r3
 8001b72:	4928      	ldr	r1, [pc, #160]	@ (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001b74:	4013      	ands	r3, r2
 8001b76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d006      	beq.n	8001b92 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b84:	4b23      	ldr	r3, [pc, #140]	@ (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001b86:	68da      	ldr	r2, [r3, #12]
 8001b88:	4922      	ldr	r1, [pc, #136]	@ (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	60cb      	str	r3, [r1, #12]
 8001b90:	e006      	b.n	8001ba0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b92:	4b20      	ldr	r3, [pc, #128]	@ (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001b94:	68da      	ldr	r2, [r3, #12]
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	491e      	ldr	r1, [pc, #120]	@ (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d006      	beq.n	8001bba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bac:	4b19      	ldr	r3, [pc, #100]	@ (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	4918      	ldr	r1, [pc, #96]	@ (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	604b      	str	r3, [r1, #4]
 8001bb8:	e006      	b.n	8001bc8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bba:	4b16      	ldr	r3, [pc, #88]	@ (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	4914      	ldr	r1, [pc, #80]	@ (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d021      	beq.n	8001c18 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	490e      	ldr	r1, [pc, #56]	@ (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	600b      	str	r3, [r1, #0]
 8001be0:	e021      	b.n	8001c26 <HAL_GPIO_Init+0x2e2>
 8001be2:	bf00      	nop
 8001be4:	10320000 	.word	0x10320000
 8001be8:	10310000 	.word	0x10310000
 8001bec:	10220000 	.word	0x10220000
 8001bf0:	10210000 	.word	0x10210000
 8001bf4:	10120000 	.word	0x10120000
 8001bf8:	10110000 	.word	0x10110000
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	40010000 	.word	0x40010000
 8001c04:	40010800 	.word	0x40010800
 8001c08:	40010c00 	.word	0x40010c00
 8001c0c:	40011000 	.word	0x40011000
 8001c10:	40011400 	.word	0x40011400
 8001c14:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c18:	4b0b      	ldr	r3, [pc, #44]	@ (8001c48 <HAL_GPIO_Init+0x304>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	4909      	ldr	r1, [pc, #36]	@ (8001c48 <HAL_GPIO_Init+0x304>)
 8001c22:	4013      	ands	r3, r2
 8001c24:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c28:	3301      	adds	r3, #1
 8001c2a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c32:	fa22 f303 	lsr.w	r3, r2, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f47f ae8e 	bne.w	8001958 <HAL_GPIO_Init+0x14>
  }
}
 8001c3c:	bf00      	nop
 8001c3e:	bf00      	nop
 8001c40:	372c      	adds	r7, #44	@ 0x2c
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr
 8001c48:	40010400 	.word	0x40010400

08001c4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	460b      	mov	r3, r1
 8001c56:	807b      	strh	r3, [r7, #2]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c5c:	787b      	ldrb	r3, [r7, #1]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c62:	887a      	ldrh	r2, [r7, #2]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c68:	e003      	b.n	8001c72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c6a:	887b      	ldrh	r3, [r7, #2]
 8001c6c:	041a      	lsls	r2, r3, #16
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	611a      	str	r2, [r3, #16]
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr

08001c7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e12b      	b.n	8001ee6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d106      	bne.n	8001ca8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff fbba 	bl	800141c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2224      	movs	r2, #36	@ 0x24
 8001cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0201 	bic.w	r2, r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001cce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001cde:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ce0:	f001 fb52 	bl	8003388 <HAL_RCC_GetPCLK1Freq>
 8001ce4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	4a81      	ldr	r2, [pc, #516]	@ (8001ef0 <HAL_I2C_Init+0x274>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d807      	bhi.n	8001d00 <HAL_I2C_Init+0x84>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4a80      	ldr	r2, [pc, #512]	@ (8001ef4 <HAL_I2C_Init+0x278>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	bf94      	ite	ls
 8001cf8:	2301      	movls	r3, #1
 8001cfa:	2300      	movhi	r3, #0
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	e006      	b.n	8001d0e <HAL_I2C_Init+0x92>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4a7d      	ldr	r2, [pc, #500]	@ (8001ef8 <HAL_I2C_Init+0x27c>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	bf94      	ite	ls
 8001d08:	2301      	movls	r3, #1
 8001d0a:	2300      	movhi	r3, #0
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e0e7      	b.n	8001ee6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	4a78      	ldr	r2, [pc, #480]	@ (8001efc <HAL_I2C_Init+0x280>)
 8001d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1e:	0c9b      	lsrs	r3, r3, #18
 8001d20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68ba      	ldr	r2, [r7, #8]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	4a6a      	ldr	r2, [pc, #424]	@ (8001ef0 <HAL_I2C_Init+0x274>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d802      	bhi.n	8001d50 <HAL_I2C_Init+0xd4>
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	e009      	b.n	8001d64 <HAL_I2C_Init+0xe8>
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001d56:	fb02 f303 	mul.w	r3, r2, r3
 8001d5a:	4a69      	ldr	r2, [pc, #420]	@ (8001f00 <HAL_I2C_Init+0x284>)
 8001d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d60:	099b      	lsrs	r3, r3, #6
 8001d62:	3301      	adds	r3, #1
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	430b      	orrs	r3, r1
 8001d6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001d76:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	495c      	ldr	r1, [pc, #368]	@ (8001ef0 <HAL_I2C_Init+0x274>)
 8001d80:	428b      	cmp	r3, r1
 8001d82:	d819      	bhi.n	8001db8 <HAL_I2C_Init+0x13c>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	1e59      	subs	r1, r3, #1
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d92:	1c59      	adds	r1, r3, #1
 8001d94:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001d98:	400b      	ands	r3, r1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00a      	beq.n	8001db4 <HAL_I2C_Init+0x138>
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	1e59      	subs	r1, r3, #1
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dac:	3301      	adds	r3, #1
 8001dae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001db2:	e051      	b.n	8001e58 <HAL_I2C_Init+0x1dc>
 8001db4:	2304      	movs	r3, #4
 8001db6:	e04f      	b.n	8001e58 <HAL_I2C_Init+0x1dc>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d111      	bne.n	8001de4 <HAL_I2C_Init+0x168>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	1e58      	subs	r0, r3, #1
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6859      	ldr	r1, [r3, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	440b      	add	r3, r1
 8001dce:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	bf0c      	ite	eq
 8001ddc:	2301      	moveq	r3, #1
 8001dde:	2300      	movne	r3, #0
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	e012      	b.n	8001e0a <HAL_I2C_Init+0x18e>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	1e58      	subs	r0, r3, #1
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6859      	ldr	r1, [r3, #4]
 8001dec:	460b      	mov	r3, r1
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	440b      	add	r3, r1
 8001df2:	0099      	lsls	r1, r3, #2
 8001df4:	440b      	add	r3, r1
 8001df6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	bf0c      	ite	eq
 8001e04:	2301      	moveq	r3, #1
 8001e06:	2300      	movne	r3, #0
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_I2C_Init+0x196>
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e022      	b.n	8001e58 <HAL_I2C_Init+0x1dc>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10e      	bne.n	8001e38 <HAL_I2C_Init+0x1bc>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	1e58      	subs	r0, r3, #1
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6859      	ldr	r1, [r3, #4]
 8001e22:	460b      	mov	r3, r1
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	440b      	add	r3, r1
 8001e28:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e36:	e00f      	b.n	8001e58 <HAL_I2C_Init+0x1dc>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	1e58      	subs	r0, r3, #1
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6859      	ldr	r1, [r3, #4]
 8001e40:	460b      	mov	r3, r1
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	0099      	lsls	r1, r3, #2
 8001e48:	440b      	add	r3, r1
 8001e4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e4e:	3301      	adds	r3, #1
 8001e50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e58:	6879      	ldr	r1, [r7, #4]
 8001e5a:	6809      	ldr	r1, [r1, #0]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69da      	ldr	r2, [r3, #28]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001e86:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6911      	ldr	r1, [r2, #16]
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	68d2      	ldr	r2, [r2, #12]
 8001e92:	4311      	orrs	r1, r2
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6812      	ldr	r2, [r2, #0]
 8001e98:	430b      	orrs	r3, r1
 8001e9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	695a      	ldr	r2, [r3, #20]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f042 0201 	orr.w	r2, r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2220      	movs	r2, #32
 8001ed2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	000186a0 	.word	0x000186a0
 8001ef4:	001e847f 	.word	0x001e847f
 8001ef8:	003d08ff 	.word	0x003d08ff
 8001efc:	431bde83 	.word	0x431bde83
 8001f00:	10624dd3 	.word	0x10624dd3

08001f04 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08c      	sub	sp, #48	@ 0x30
 8001f08:	af02      	add	r7, sp, #8
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	4608      	mov	r0, r1
 8001f0e:	4611      	mov	r1, r2
 8001f10:	461a      	mov	r2, r3
 8001f12:	4603      	mov	r3, r0
 8001f14:	817b      	strh	r3, [r7, #10]
 8001f16:	460b      	mov	r3, r1
 8001f18:	813b      	strh	r3, [r7, #8]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f22:	f7ff fc01 	bl	8001728 <HAL_GetTick>
 8001f26:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b20      	cmp	r3, #32
 8001f32:	f040 8250 	bne.w	80023d6 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	2319      	movs	r3, #25
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	4982      	ldr	r1, [pc, #520]	@ (8002148 <HAL_I2C_Mem_Read+0x244>)
 8001f40:	68f8      	ldr	r0, [r7, #12]
 8001f42:	f000 fc69 	bl	8002818 <I2C_WaitOnFlagUntilTimeout>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	e243      	b.n	80023d8 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d101      	bne.n	8001f5e <HAL_I2C_Mem_Read+0x5a>
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	e23c      	b.n	80023d8 <HAL_I2C_Mem_Read+0x4d4>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d007      	beq.n	8001f84 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0201 	orr.w	r2, r2, #1
 8001f82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2222      	movs	r2, #34	@ 0x22
 8001f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2240      	movs	r2, #64	@ 0x40
 8001fa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001fae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001fb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4a62      	ldr	r2, [pc, #392]	@ (800214c <HAL_I2C_Mem_Read+0x248>)
 8001fc4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001fc6:	88f8      	ldrh	r0, [r7, #6]
 8001fc8:	893a      	ldrh	r2, [r7, #8]
 8001fca:	8979      	ldrh	r1, [r7, #10]
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fce:	9301      	str	r3, [sp, #4]
 8001fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f000 fb36 	bl	8002648 <I2C_RequestMemoryRead>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e1f8      	b.n	80023d8 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d113      	bne.n	8002016 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	695b      	ldr	r3, [r3, #20]
 8001ff8:	61fb      	str	r3, [r7, #28]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	61fb      	str	r3, [r7, #28]
 8002002:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	e1cc      	b.n	80023b0 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800201a:	2b01      	cmp	r3, #1
 800201c:	d11e      	bne.n	800205c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800202c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800202e:	b672      	cpsid	i
}
 8002030:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002032:	2300      	movs	r3, #0
 8002034:	61bb      	str	r3, [r7, #24]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	61bb      	str	r3, [r7, #24]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	61bb      	str	r3, [r7, #24]
 8002046:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002056:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002058:	b662      	cpsie	i
}
 800205a:	e035      	b.n	80020c8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002060:	2b02      	cmp	r3, #2
 8002062:	d11e      	bne.n	80020a2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002072:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002074:	b672      	cpsid	i
}
 8002076:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	617b      	str	r3, [r7, #20]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	617b      	str	r3, [r7, #20]
 800208c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800209c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800209e:	b662      	cpsie	i
}
 80020a0:	e012      	b.n	80020c8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80020b0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020b2:	2300      	movs	r3, #0
 80020b4:	613b      	str	r3, [r7, #16]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	613b      	str	r3, [r7, #16]
 80020c6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80020c8:	e172      	b.n	80023b0 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020ce:	2b03      	cmp	r3, #3
 80020d0:	f200 811f 	bhi.w	8002312 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d123      	bne.n	8002124 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020de:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f000 fcfb 	bl	8002adc <I2C_WaitOnRXNEFlagUntilTimeout>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e173      	b.n	80023d8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	691a      	ldr	r2, [r3, #16]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002102:	1c5a      	adds	r2, r3, #1
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800210c:	3b01      	subs	r3, #1
 800210e:	b29a      	uxth	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002118:	b29b      	uxth	r3, r3
 800211a:	3b01      	subs	r3, #1
 800211c:	b29a      	uxth	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002122:	e145      	b.n	80023b0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002128:	2b02      	cmp	r3, #2
 800212a:	d152      	bne.n	80021d2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800212c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002132:	2200      	movs	r2, #0
 8002134:	4906      	ldr	r1, [pc, #24]	@ (8002150 <HAL_I2C_Mem_Read+0x24c>)
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f000 fb6e 	bl	8002818 <I2C_WaitOnFlagUntilTimeout>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d008      	beq.n	8002154 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e148      	b.n	80023d8 <HAL_I2C_Mem_Read+0x4d4>
 8002146:	bf00      	nop
 8002148:	00100002 	.word	0x00100002
 800214c:	ffff0000 	.word	0xffff0000
 8002150:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002154:	b672      	cpsid	i
}
 8002156:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002166:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	691a      	ldr	r2, [r3, #16]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002184:	3b01      	subs	r3, #1
 8002186:	b29a      	uxth	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002190:	b29b      	uxth	r3, r3
 8002192:	3b01      	subs	r3, #1
 8002194:	b29a      	uxth	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800219a:	b662      	cpsie	i
}
 800219c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	691a      	ldr	r2, [r3, #16]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b0:	1c5a      	adds	r2, r3, #1
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ba:	3b01      	subs	r3, #1
 80021bc:	b29a      	uxth	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	3b01      	subs	r3, #1
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80021d0:	e0ee      	b.n	80023b0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021d8:	2200      	movs	r2, #0
 80021da:	4981      	ldr	r1, [pc, #516]	@ (80023e0 <HAL_I2C_Mem_Read+0x4dc>)
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f000 fb1b 	bl	8002818 <I2C_WaitOnFlagUntilTimeout>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e0f5      	b.n	80023d8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80021fc:	b672      	cpsid	i
}
 80021fe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	691a      	ldr	r2, [r3, #16]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002212:	1c5a      	adds	r2, r3, #1
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800221c:	3b01      	subs	r3, #1
 800221e:	b29a      	uxth	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002228:	b29b      	uxth	r3, r3
 800222a:	3b01      	subs	r3, #1
 800222c:	b29a      	uxth	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002232:	4b6c      	ldr	r3, [pc, #432]	@ (80023e4 <HAL_I2C_Mem_Read+0x4e0>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	08db      	lsrs	r3, r3, #3
 8002238:	4a6b      	ldr	r2, [pc, #428]	@ (80023e8 <HAL_I2C_Mem_Read+0x4e4>)
 800223a:	fba2 2303 	umull	r2, r3, r2, r3
 800223e:	0a1a      	lsrs	r2, r3, #8
 8002240:	4613      	mov	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	00da      	lsls	r2, r3, #3
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800224c:	6a3b      	ldr	r3, [r7, #32]
 800224e:	3b01      	subs	r3, #1
 8002250:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d118      	bne.n	800228a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2220      	movs	r2, #32
 8002262:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002272:	f043 0220 	orr.w	r2, r3, #32
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800227a:	b662      	cpsie	i
}
 800227c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e0a6      	b.n	80023d8 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b04      	cmp	r3, #4
 8002296:	d1d9      	bne.n	800224c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	691a      	ldr	r2, [r3, #16]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ba:	1c5a      	adds	r2, r3, #1
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022c4:	3b01      	subs	r3, #1
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	3b01      	subs	r3, #1
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80022da:	b662      	cpsie	i
}
 80022dc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f0:	1c5a      	adds	r2, r3, #1
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022fa:	3b01      	subs	r3, #1
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002306:	b29b      	uxth	r3, r3
 8002308:	3b01      	subs	r3, #1
 800230a:	b29a      	uxth	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002310:	e04e      	b.n	80023b0 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002312:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002314:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 fbe0 	bl	8002adc <I2C_WaitOnRXNEFlagUntilTimeout>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e058      	b.n	80023d8 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	691a      	ldr	r2, [r3, #16]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002338:	1c5a      	adds	r2, r3, #1
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002342:	3b01      	subs	r3, #1
 8002344:	b29a      	uxth	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800234e:	b29b      	uxth	r3, r3
 8002350:	3b01      	subs	r3, #1
 8002352:	b29a      	uxth	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	f003 0304 	and.w	r3, r3, #4
 8002362:	2b04      	cmp	r3, #4
 8002364:	d124      	bne.n	80023b0 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800236a:	2b03      	cmp	r3, #3
 800236c:	d107      	bne.n	800237e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800237c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	691a      	ldr	r2, [r3, #16]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002390:	1c5a      	adds	r2, r3, #1
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800239a:	3b01      	subs	r3, #1
 800239c:	b29a      	uxth	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	3b01      	subs	r3, #1
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f47f ae88 	bne.w	80020ca <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2220      	movs	r2, #32
 80023be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80023d2:	2300      	movs	r3, #0
 80023d4:	e000      	b.n	80023d8 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80023d6:	2302      	movs	r3, #2
  }
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3728      	adds	r7, #40	@ 0x28
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	00010004 	.word	0x00010004
 80023e4:	20000008 	.word	0x20000008
 80023e8:	14f8b589 	.word	0x14f8b589

080023ec <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08a      	sub	sp, #40	@ 0x28
 80023f0:	af02      	add	r7, sp, #8
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	607a      	str	r2, [r7, #4]
 80023f6:	603b      	str	r3, [r7, #0]
 80023f8:	460b      	mov	r3, r1
 80023fa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80023fc:	f7ff f994 	bl	8001728 <HAL_GetTick>
 8002400:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002402:	2300      	movs	r3, #0
 8002404:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b20      	cmp	r3, #32
 8002410:	f040 8111 	bne.w	8002636 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	2319      	movs	r3, #25
 800241a:	2201      	movs	r2, #1
 800241c:	4988      	ldr	r1, [pc, #544]	@ (8002640 <HAL_I2C_IsDeviceReady+0x254>)
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 f9fa 	bl	8002818 <I2C_WaitOnFlagUntilTimeout>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800242a:	2302      	movs	r3, #2
 800242c:	e104      	b.n	8002638 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002434:	2b01      	cmp	r3, #1
 8002436:	d101      	bne.n	800243c <HAL_I2C_IsDeviceReady+0x50>
 8002438:	2302      	movs	r3, #2
 800243a:	e0fd      	b.n	8002638 <HAL_I2C_IsDeviceReady+0x24c>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b01      	cmp	r3, #1
 8002450:	d007      	beq.n	8002462 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f042 0201 	orr.w	r2, r2, #1
 8002460:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002470:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2224      	movs	r2, #36	@ 0x24
 8002476:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4a70      	ldr	r2, [pc, #448]	@ (8002644 <HAL_I2C_IsDeviceReady+0x258>)
 8002484:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002494:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	2200      	movs	r2, #0
 800249e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f000 f9b8 	bl	8002818 <I2C_WaitOnFlagUntilTimeout>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00d      	beq.n	80024ca <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024bc:	d103      	bne.n	80024c6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024c4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e0b6      	b.n	8002638 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024ca:	897b      	ldrh	r3, [r7, #10]
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	461a      	mov	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80024d8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80024da:	f7ff f925 	bl	8001728 <HAL_GetTick>
 80024de:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	bf0c      	ite	eq
 80024ee:	2301      	moveq	r3, #1
 80024f0:	2300      	movne	r3, #0
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002500:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002504:	bf0c      	ite	eq
 8002506:	2301      	moveq	r3, #1
 8002508:	2300      	movne	r3, #0
 800250a:	b2db      	uxtb	r3, r3
 800250c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800250e:	e025      	b.n	800255c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002510:	f7ff f90a 	bl	8001728 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	429a      	cmp	r2, r3
 800251e:	d302      	bcc.n	8002526 <HAL_I2C_IsDeviceReady+0x13a>
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d103      	bne.n	800252e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	22a0      	movs	r2, #160	@ 0xa0
 800252a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b02      	cmp	r3, #2
 800253a:	bf0c      	ite	eq
 800253c:	2301      	moveq	r3, #1
 800253e:	2300      	movne	r3, #0
 8002540:	b2db      	uxtb	r3, r3
 8002542:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800254e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002552:	bf0c      	ite	eq
 8002554:	2301      	moveq	r3, #1
 8002556:	2300      	movne	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2ba0      	cmp	r3, #160	@ 0xa0
 8002566:	d005      	beq.n	8002574 <HAL_I2C_IsDeviceReady+0x188>
 8002568:	7dfb      	ldrb	r3, [r7, #23]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d102      	bne.n	8002574 <HAL_I2C_IsDeviceReady+0x188>
 800256e:	7dbb      	ldrb	r3, [r7, #22]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0cd      	beq.n	8002510 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2220      	movs	r2, #32
 8002578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b02      	cmp	r3, #2
 8002588:	d129      	bne.n	80025de <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002598:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800259a:	2300      	movs	r3, #0
 800259c:	613b      	str	r3, [r7, #16]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	613b      	str	r3, [r7, #16]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	613b      	str	r3, [r7, #16]
 80025ae:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	2319      	movs	r3, #25
 80025b6:	2201      	movs	r2, #1
 80025b8:	4921      	ldr	r1, [pc, #132]	@ (8002640 <HAL_I2C_IsDeviceReady+0x254>)
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f000 f92c 	bl	8002818 <I2C_WaitOnFlagUntilTimeout>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e036      	b.n	8002638 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2220      	movs	r2, #32
 80025ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80025da:	2300      	movs	r3, #0
 80025dc:	e02c      	b.n	8002638 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025ec:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80025f6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	2319      	movs	r3, #25
 80025fe:	2201      	movs	r2, #1
 8002600:	490f      	ldr	r1, [pc, #60]	@ (8002640 <HAL_I2C_IsDeviceReady+0x254>)
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f000 f908 	bl	8002818 <I2C_WaitOnFlagUntilTimeout>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e012      	b.n	8002638 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	3301      	adds	r3, #1
 8002616:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	429a      	cmp	r2, r3
 800261e:	f4ff af32 	bcc.w	8002486 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2220      	movs	r2, #32
 8002626:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002636:	2302      	movs	r3, #2
  }
}
 8002638:	4618      	mov	r0, r3
 800263a:	3720      	adds	r7, #32
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	00100002 	.word	0x00100002
 8002644:	ffff0000 	.word	0xffff0000

08002648 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b088      	sub	sp, #32
 800264c:	af02      	add	r7, sp, #8
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	4608      	mov	r0, r1
 8002652:	4611      	mov	r1, r2
 8002654:	461a      	mov	r2, r3
 8002656:	4603      	mov	r3, r0
 8002658:	817b      	strh	r3, [r7, #10]
 800265a:	460b      	mov	r3, r1
 800265c:	813b      	strh	r3, [r7, #8]
 800265e:	4613      	mov	r3, r2
 8002660:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002670:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002680:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	6a3b      	ldr	r3, [r7, #32]
 8002688:	2200      	movs	r2, #0
 800268a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 f8c2 	bl	8002818 <I2C_WaitOnFlagUntilTimeout>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00d      	beq.n	80026b6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026a8:	d103      	bne.n	80026b2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e0aa      	b.n	800280c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026b6:	897b      	ldrh	r3, [r7, #10]
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	461a      	mov	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80026c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c8:	6a3a      	ldr	r2, [r7, #32]
 80026ca:	4952      	ldr	r1, [pc, #328]	@ (8002814 <I2C_RequestMemoryRead+0x1cc>)
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 f91d 	bl	800290c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e097      	b.n	800280c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026dc:	2300      	movs	r3, #0
 80026de:	617b      	str	r3, [r7, #20]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	617b      	str	r3, [r7, #20]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	617b      	str	r3, [r7, #20]
 80026f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026f4:	6a39      	ldr	r1, [r7, #32]
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 f9a8 	bl	8002a4c <I2C_WaitOnTXEFlagUntilTimeout>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00d      	beq.n	800271e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002706:	2b04      	cmp	r3, #4
 8002708:	d107      	bne.n	800271a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002718:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e076      	b.n	800280c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800271e:	88fb      	ldrh	r3, [r7, #6]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d105      	bne.n	8002730 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002724:	893b      	ldrh	r3, [r7, #8]
 8002726:	b2da      	uxtb	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	611a      	str	r2, [r3, #16]
 800272e:	e021      	b.n	8002774 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002730:	893b      	ldrh	r3, [r7, #8]
 8002732:	0a1b      	lsrs	r3, r3, #8
 8002734:	b29b      	uxth	r3, r3
 8002736:	b2da      	uxtb	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800273e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002740:	6a39      	ldr	r1, [r7, #32]
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f000 f982 	bl	8002a4c <I2C_WaitOnTXEFlagUntilTimeout>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00d      	beq.n	800276a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002752:	2b04      	cmp	r3, #4
 8002754:	d107      	bne.n	8002766 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002764:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e050      	b.n	800280c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800276a:	893b      	ldrh	r3, [r7, #8]
 800276c:	b2da      	uxtb	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002774:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002776:	6a39      	ldr	r1, [r7, #32]
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 f967 	bl	8002a4c <I2C_WaitOnTXEFlagUntilTimeout>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00d      	beq.n	80027a0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002788:	2b04      	cmp	r3, #4
 800278a:	d107      	bne.n	800279c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800279a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e035      	b.n	800280c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027ae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	6a3b      	ldr	r3, [r7, #32]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f000 f82b 	bl	8002818 <I2C_WaitOnFlagUntilTimeout>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00d      	beq.n	80027e4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027d6:	d103      	bne.n	80027e0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027de:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e013      	b.n	800280c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80027e4:	897b      	ldrh	r3, [r7, #10]
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f6:	6a3a      	ldr	r2, [r7, #32]
 80027f8:	4906      	ldr	r1, [pc, #24]	@ (8002814 <I2C_RequestMemoryRead+0x1cc>)
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 f886 	bl	800290c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3718      	adds	r7, #24
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	00010002 	.word	0x00010002

08002818 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	603b      	str	r3, [r7, #0]
 8002824:	4613      	mov	r3, r2
 8002826:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002828:	e048      	b.n	80028bc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002830:	d044      	beq.n	80028bc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002832:	f7fe ff79 	bl	8001728 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	429a      	cmp	r2, r3
 8002840:	d302      	bcc.n	8002848 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d139      	bne.n	80028bc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	0c1b      	lsrs	r3, r3, #16
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b01      	cmp	r3, #1
 8002850:	d10d      	bne.n	800286e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	43da      	mvns	r2, r3
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	4013      	ands	r3, r2
 800285e:	b29b      	uxth	r3, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	bf0c      	ite	eq
 8002864:	2301      	moveq	r3, #1
 8002866:	2300      	movne	r3, #0
 8002868:	b2db      	uxtb	r3, r3
 800286a:	461a      	mov	r2, r3
 800286c:	e00c      	b.n	8002888 <I2C_WaitOnFlagUntilTimeout+0x70>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	43da      	mvns	r2, r3
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	4013      	ands	r3, r2
 800287a:	b29b      	uxth	r3, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	bf0c      	ite	eq
 8002880:	2301      	moveq	r3, #1
 8002882:	2300      	movne	r3, #0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	461a      	mov	r2, r3
 8002888:	79fb      	ldrb	r3, [r7, #7]
 800288a:	429a      	cmp	r2, r3
 800288c:	d116      	bne.n	80028bc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2220      	movs	r2, #32
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a8:	f043 0220 	orr.w	r2, r3, #32
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e023      	b.n	8002904 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	0c1b      	lsrs	r3, r3, #16
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d10d      	bne.n	80028e2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	43da      	mvns	r2, r3
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	4013      	ands	r3, r2
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	bf0c      	ite	eq
 80028d8:	2301      	moveq	r3, #1
 80028da:	2300      	movne	r3, #0
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	461a      	mov	r2, r3
 80028e0:	e00c      	b.n	80028fc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	43da      	mvns	r2, r3
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	4013      	ands	r3, r2
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	bf0c      	ite	eq
 80028f4:	2301      	moveq	r3, #1
 80028f6:	2300      	movne	r3, #0
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	461a      	mov	r2, r3
 80028fc:	79fb      	ldrb	r3, [r7, #7]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d093      	beq.n	800282a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
 8002918:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800291a:	e071      	b.n	8002a00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002926:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800292a:	d123      	bne.n	8002974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800293a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002944:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2220      	movs	r2, #32
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002960:	f043 0204 	orr.w	r2, r3, #4
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e067      	b.n	8002a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297a:	d041      	beq.n	8002a00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800297c:	f7fe fed4 	bl	8001728 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	429a      	cmp	r2, r3
 800298a:	d302      	bcc.n	8002992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d136      	bne.n	8002a00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	0c1b      	lsrs	r3, r3, #16
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b01      	cmp	r3, #1
 800299a:	d10c      	bne.n	80029b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	43da      	mvns	r2, r3
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	4013      	ands	r3, r2
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	bf14      	ite	ne
 80029ae:	2301      	movne	r3, #1
 80029b0:	2300      	moveq	r3, #0
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	e00b      	b.n	80029ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	43da      	mvns	r2, r3
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	4013      	ands	r3, r2
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	bf14      	ite	ne
 80029c8:	2301      	movne	r3, #1
 80029ca:	2300      	moveq	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d016      	beq.n	8002a00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2220      	movs	r2, #32
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ec:	f043 0220 	orr.w	r2, r3, #32
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e021      	b.n	8002a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	0c1b      	lsrs	r3, r3, #16
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d10c      	bne.n	8002a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	43da      	mvns	r2, r3
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	4013      	ands	r3, r2
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	bf14      	ite	ne
 8002a1c:	2301      	movne	r3, #1
 8002a1e:	2300      	moveq	r3, #0
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	e00b      	b.n	8002a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	43da      	mvns	r2, r3
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	bf14      	ite	ne
 8002a36:	2301      	movne	r3, #1
 8002a38:	2300      	moveq	r3, #0
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f47f af6d 	bne.w	800291c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a58:	e034      	b.n	8002ac4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 f89b 	bl	8002b96 <I2C_IsAcknowledgeFailed>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e034      	b.n	8002ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a70:	d028      	beq.n	8002ac4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a72:	f7fe fe59 	bl	8001728 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d302      	bcc.n	8002a88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d11d      	bne.n	8002ac4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a92:	2b80      	cmp	r3, #128	@ 0x80
 8002a94:	d016      	beq.n	8002ac4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab0:	f043 0220 	orr.w	r2, r3, #32
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e007      	b.n	8002ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ace:	2b80      	cmp	r3, #128	@ 0x80
 8002ad0:	d1c3      	bne.n	8002a5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ae8:	e049      	b.n	8002b7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	f003 0310 	and.w	r3, r3, #16
 8002af4:	2b10      	cmp	r3, #16
 8002af6:	d119      	bne.n	8002b2c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f06f 0210 	mvn.w	r2, #16
 8002b00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e030      	b.n	8002b8e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b2c:	f7fe fdfc 	bl	8001728 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d302      	bcc.n	8002b42 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d11d      	bne.n	8002b7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b4c:	2b40      	cmp	r3, #64	@ 0x40
 8002b4e:	d016      	beq.n	8002b7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6a:	f043 0220 	orr.w	r2, r3, #32
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e007      	b.n	8002b8e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b88:	2b40      	cmp	r3, #64	@ 0x40
 8002b8a:	d1ae      	bne.n	8002aea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b083      	sub	sp, #12
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ba8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bac:	d11b      	bne.n	8002be6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002bb6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd2:	f043 0204 	orr.w	r2, r3, #4
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e000      	b.n	8002be8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bc80      	pop	{r7}
 8002bf0:	4770      	bx	lr
	...

08002bf4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e272      	b.n	80030ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 8087 	beq.w	8002d22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c14:	4b92      	ldr	r3, [pc, #584]	@ (8002e60 <HAL_RCC_OscConfig+0x26c>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 030c 	and.w	r3, r3, #12
 8002c1c:	2b04      	cmp	r3, #4
 8002c1e:	d00c      	beq.n	8002c3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c20:	4b8f      	ldr	r3, [pc, #572]	@ (8002e60 <HAL_RCC_OscConfig+0x26c>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f003 030c 	and.w	r3, r3, #12
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d112      	bne.n	8002c52 <HAL_RCC_OscConfig+0x5e>
 8002c2c:	4b8c      	ldr	r3, [pc, #560]	@ (8002e60 <HAL_RCC_OscConfig+0x26c>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c38:	d10b      	bne.n	8002c52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c3a:	4b89      	ldr	r3, [pc, #548]	@ (8002e60 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d06c      	beq.n	8002d20 <HAL_RCC_OscConfig+0x12c>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d168      	bne.n	8002d20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e24c      	b.n	80030ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c5a:	d106      	bne.n	8002c6a <HAL_RCC_OscConfig+0x76>
 8002c5c:	4b80      	ldr	r3, [pc, #512]	@ (8002e60 <HAL_RCC_OscConfig+0x26c>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a7f      	ldr	r2, [pc, #508]	@ (8002e60 <HAL_RCC_OscConfig+0x26c>)
 8002c62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c66:	6013      	str	r3, [r2, #0]
 8002c68:	e02e      	b.n	8002cc8 <HAL_RCC_OscConfig+0xd4>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10c      	bne.n	8002c8c <HAL_RCC_OscConfig+0x98>
 8002c72:	4b7b      	ldr	r3, [pc, #492]	@ (8002e60 <HAL_RCC_OscConfig+0x26c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a7a      	ldr	r2, [pc, #488]	@ (8002e60 <HAL_RCC_OscConfig+0x26c>)
 8002c78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	4b78      	ldr	r3, [pc, #480]	@ (8002e60 <HAL_RCC_OscConfig+0x26c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a77      	ldr	r2, [pc, #476]	@ (8002e60 <HAL_RCC_OscConfig+0x26c>)
 8002c84:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	e01d      	b.n	8002cc8 <HAL_RCC_OscConfig+0xd4>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c94:	d10c      	bne.n	8002cb0 <HAL_RCC_OscConfig+0xbc>
 8002c96:	4b72      	ldr	r3, [pc, #456]	@ (8002e60 <HAL_RCC_OscConfig+0x26c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a71      	ldr	r2, [pc, #452]	@ (8002e60 <HAL_RCC_OscConfig+0x26c>)
 8002c9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	4b6f      	ldr	r3, [pc, #444]	@ (8002e60 <HAL_RCC_OscConfig+0x26c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a6e      	ldr	r2, [pc, #440]	@ (8002e60 <HAL_RCC_OscConfig+0x26c>)
 8002ca8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	e00b      	b.n	8002cc8 <HAL_RCC_OscConfig+0xd4>
 8002cb0:	4b6b      	ldr	r3, [pc, #428]	@ (8002e60 <HAL_RCC_OscConfig+0x26c>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a6a      	ldr	r2, [pc, #424]	@ (8002e60 <HAL_RCC_OscConfig+0x26c>)
 8002cb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cba:	6013      	str	r3, [r2, #0]
 8002cbc:	4b68      	ldr	r3, [pc, #416]	@ (8002e60 <HAL_RCC_OscConfig+0x26c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a67      	ldr	r2, [pc, #412]	@ (8002e60 <HAL_RCC_OscConfig+0x26c>)
 8002cc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cc6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d013      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd0:	f7fe fd2a 	bl	8001728 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cd8:	f7fe fd26 	bl	8001728 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b64      	cmp	r3, #100	@ 0x64
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e200      	b.n	80030ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cea:	4b5d      	ldr	r3, [pc, #372]	@ (8002e60 <HAL_RCC_OscConfig+0x26c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0f0      	beq.n	8002cd8 <HAL_RCC_OscConfig+0xe4>
 8002cf6:	e014      	b.n	8002d22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf8:	f7fe fd16 	bl	8001728 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d00:	f7fe fd12 	bl	8001728 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b64      	cmp	r3, #100	@ 0x64
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e1ec      	b.n	80030ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d12:	4b53      	ldr	r3, [pc, #332]	@ (8002e60 <HAL_RCC_OscConfig+0x26c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1f0      	bne.n	8002d00 <HAL_RCC_OscConfig+0x10c>
 8002d1e:	e000      	b.n	8002d22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d063      	beq.n	8002df6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d2e:	4b4c      	ldr	r3, [pc, #304]	@ (8002e60 <HAL_RCC_OscConfig+0x26c>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f003 030c 	and.w	r3, r3, #12
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00b      	beq.n	8002d52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d3a:	4b49      	ldr	r3, [pc, #292]	@ (8002e60 <HAL_RCC_OscConfig+0x26c>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f003 030c 	and.w	r3, r3, #12
 8002d42:	2b08      	cmp	r3, #8
 8002d44:	d11c      	bne.n	8002d80 <HAL_RCC_OscConfig+0x18c>
 8002d46:	4b46      	ldr	r3, [pc, #280]	@ (8002e60 <HAL_RCC_OscConfig+0x26c>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d116      	bne.n	8002d80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d52:	4b43      	ldr	r3, [pc, #268]	@ (8002e60 <HAL_RCC_OscConfig+0x26c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d005      	beq.n	8002d6a <HAL_RCC_OscConfig+0x176>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d001      	beq.n	8002d6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e1c0      	b.n	80030ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d6a:	4b3d      	ldr	r3, [pc, #244]	@ (8002e60 <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	4939      	ldr	r1, [pc, #228]	@ (8002e60 <HAL_RCC_OscConfig+0x26c>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d7e:	e03a      	b.n	8002df6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d020      	beq.n	8002dca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d88:	4b36      	ldr	r3, [pc, #216]	@ (8002e64 <HAL_RCC_OscConfig+0x270>)
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8e:	f7fe fccb 	bl	8001728 <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d96:	f7fe fcc7 	bl	8001728 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e1a1      	b.n	80030ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da8:	4b2d      	ldr	r3, [pc, #180]	@ (8002e60 <HAL_RCC_OscConfig+0x26c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0f0      	beq.n	8002d96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db4:	4b2a      	ldr	r3, [pc, #168]	@ (8002e60 <HAL_RCC_OscConfig+0x26c>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	4927      	ldr	r1, [pc, #156]	@ (8002e60 <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	600b      	str	r3, [r1, #0]
 8002dc8:	e015      	b.n	8002df6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dca:	4b26      	ldr	r3, [pc, #152]	@ (8002e64 <HAL_RCC_OscConfig+0x270>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd0:	f7fe fcaa 	bl	8001728 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dd8:	f7fe fca6 	bl	8001728 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e180      	b.n	80030ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dea:	4b1d      	ldr	r3, [pc, #116]	@ (8002e60 <HAL_RCC_OscConfig+0x26c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f0      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d03a      	beq.n	8002e78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d019      	beq.n	8002e3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e0a:	4b17      	ldr	r3, [pc, #92]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e10:	f7fe fc8a 	bl	8001728 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e18:	f7fe fc86 	bl	8001728 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e160      	b.n	80030ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002e60 <HAL_RCC_OscConfig+0x26c>)
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0f0      	beq.n	8002e18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e36:	2001      	movs	r0, #1
 8002e38:	f000 fafe 	bl	8003438 <RCC_Delay>
 8002e3c:	e01c      	b.n	8002e78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e44:	f7fe fc70 	bl	8001728 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e4a:	e00f      	b.n	8002e6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e4c:	f7fe fc6c 	bl	8001728 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d908      	bls.n	8002e6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e146      	b.n	80030ec <HAL_RCC_OscConfig+0x4f8>
 8002e5e:	bf00      	nop
 8002e60:	40021000 	.word	0x40021000
 8002e64:	42420000 	.word	0x42420000
 8002e68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e6c:	4b92      	ldr	r3, [pc, #584]	@ (80030b8 <HAL_RCC_OscConfig+0x4c4>)
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1e9      	bne.n	8002e4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f000 80a6 	beq.w	8002fd2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e86:	2300      	movs	r3, #0
 8002e88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e8a:	4b8b      	ldr	r3, [pc, #556]	@ (80030b8 <HAL_RCC_OscConfig+0x4c4>)
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10d      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e96:	4b88      	ldr	r3, [pc, #544]	@ (80030b8 <HAL_RCC_OscConfig+0x4c4>)
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	4a87      	ldr	r2, [pc, #540]	@ (80030b8 <HAL_RCC_OscConfig+0x4c4>)
 8002e9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ea0:	61d3      	str	r3, [r2, #28]
 8002ea2:	4b85      	ldr	r3, [pc, #532]	@ (80030b8 <HAL_RCC_OscConfig+0x4c4>)
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eaa:	60bb      	str	r3, [r7, #8]
 8002eac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb2:	4b82      	ldr	r3, [pc, #520]	@ (80030bc <HAL_RCC_OscConfig+0x4c8>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d118      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ebe:	4b7f      	ldr	r3, [pc, #508]	@ (80030bc <HAL_RCC_OscConfig+0x4c8>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a7e      	ldr	r2, [pc, #504]	@ (80030bc <HAL_RCC_OscConfig+0x4c8>)
 8002ec4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ec8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eca:	f7fe fc2d 	bl	8001728 <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed0:	e008      	b.n	8002ee4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ed2:	f7fe fc29 	bl	8001728 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b64      	cmp	r3, #100	@ 0x64
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e103      	b.n	80030ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee4:	4b75      	ldr	r3, [pc, #468]	@ (80030bc <HAL_RCC_OscConfig+0x4c8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0f0      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d106      	bne.n	8002f06 <HAL_RCC_OscConfig+0x312>
 8002ef8:	4b6f      	ldr	r3, [pc, #444]	@ (80030b8 <HAL_RCC_OscConfig+0x4c4>)
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	4a6e      	ldr	r2, [pc, #440]	@ (80030b8 <HAL_RCC_OscConfig+0x4c4>)
 8002efe:	f043 0301 	orr.w	r3, r3, #1
 8002f02:	6213      	str	r3, [r2, #32]
 8002f04:	e02d      	b.n	8002f62 <HAL_RCC_OscConfig+0x36e>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10c      	bne.n	8002f28 <HAL_RCC_OscConfig+0x334>
 8002f0e:	4b6a      	ldr	r3, [pc, #424]	@ (80030b8 <HAL_RCC_OscConfig+0x4c4>)
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	4a69      	ldr	r2, [pc, #420]	@ (80030b8 <HAL_RCC_OscConfig+0x4c4>)
 8002f14:	f023 0301 	bic.w	r3, r3, #1
 8002f18:	6213      	str	r3, [r2, #32]
 8002f1a:	4b67      	ldr	r3, [pc, #412]	@ (80030b8 <HAL_RCC_OscConfig+0x4c4>)
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	4a66      	ldr	r2, [pc, #408]	@ (80030b8 <HAL_RCC_OscConfig+0x4c4>)
 8002f20:	f023 0304 	bic.w	r3, r3, #4
 8002f24:	6213      	str	r3, [r2, #32]
 8002f26:	e01c      	b.n	8002f62 <HAL_RCC_OscConfig+0x36e>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	2b05      	cmp	r3, #5
 8002f2e:	d10c      	bne.n	8002f4a <HAL_RCC_OscConfig+0x356>
 8002f30:	4b61      	ldr	r3, [pc, #388]	@ (80030b8 <HAL_RCC_OscConfig+0x4c4>)
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	4a60      	ldr	r2, [pc, #384]	@ (80030b8 <HAL_RCC_OscConfig+0x4c4>)
 8002f36:	f043 0304 	orr.w	r3, r3, #4
 8002f3a:	6213      	str	r3, [r2, #32]
 8002f3c:	4b5e      	ldr	r3, [pc, #376]	@ (80030b8 <HAL_RCC_OscConfig+0x4c4>)
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	4a5d      	ldr	r2, [pc, #372]	@ (80030b8 <HAL_RCC_OscConfig+0x4c4>)
 8002f42:	f043 0301 	orr.w	r3, r3, #1
 8002f46:	6213      	str	r3, [r2, #32]
 8002f48:	e00b      	b.n	8002f62 <HAL_RCC_OscConfig+0x36e>
 8002f4a:	4b5b      	ldr	r3, [pc, #364]	@ (80030b8 <HAL_RCC_OscConfig+0x4c4>)
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	4a5a      	ldr	r2, [pc, #360]	@ (80030b8 <HAL_RCC_OscConfig+0x4c4>)
 8002f50:	f023 0301 	bic.w	r3, r3, #1
 8002f54:	6213      	str	r3, [r2, #32]
 8002f56:	4b58      	ldr	r3, [pc, #352]	@ (80030b8 <HAL_RCC_OscConfig+0x4c4>)
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	4a57      	ldr	r2, [pc, #348]	@ (80030b8 <HAL_RCC_OscConfig+0x4c4>)
 8002f5c:	f023 0304 	bic.w	r3, r3, #4
 8002f60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d015      	beq.n	8002f96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f6a:	f7fe fbdd 	bl	8001728 <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f70:	e00a      	b.n	8002f88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f72:	f7fe fbd9 	bl	8001728 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e0b1      	b.n	80030ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f88:	4b4b      	ldr	r3, [pc, #300]	@ (80030b8 <HAL_RCC_OscConfig+0x4c4>)
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0ee      	beq.n	8002f72 <HAL_RCC_OscConfig+0x37e>
 8002f94:	e014      	b.n	8002fc0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f96:	f7fe fbc7 	bl	8001728 <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f9c:	e00a      	b.n	8002fb4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f9e:	f7fe fbc3 	bl	8001728 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e09b      	b.n	80030ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fb4:	4b40      	ldr	r3, [pc, #256]	@ (80030b8 <HAL_RCC_OscConfig+0x4c4>)
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1ee      	bne.n	8002f9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fc0:	7dfb      	ldrb	r3, [r7, #23]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d105      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fc6:	4b3c      	ldr	r3, [pc, #240]	@ (80030b8 <HAL_RCC_OscConfig+0x4c4>)
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	4a3b      	ldr	r2, [pc, #236]	@ (80030b8 <HAL_RCC_OscConfig+0x4c4>)
 8002fcc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fd0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f000 8087 	beq.w	80030ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fdc:	4b36      	ldr	r3, [pc, #216]	@ (80030b8 <HAL_RCC_OscConfig+0x4c4>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f003 030c 	and.w	r3, r3, #12
 8002fe4:	2b08      	cmp	r3, #8
 8002fe6:	d061      	beq.n	80030ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	69db      	ldr	r3, [r3, #28]
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d146      	bne.n	800307e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff0:	4b33      	ldr	r3, [pc, #204]	@ (80030c0 <HAL_RCC_OscConfig+0x4cc>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff6:	f7fe fb97 	bl	8001728 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ffe:	f7fe fb93 	bl	8001728 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e06d      	b.n	80030ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003010:	4b29      	ldr	r3, [pc, #164]	@ (80030b8 <HAL_RCC_OscConfig+0x4c4>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1f0      	bne.n	8002ffe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003024:	d108      	bne.n	8003038 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003026:	4b24      	ldr	r3, [pc, #144]	@ (80030b8 <HAL_RCC_OscConfig+0x4c4>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	4921      	ldr	r1, [pc, #132]	@ (80030b8 <HAL_RCC_OscConfig+0x4c4>)
 8003034:	4313      	orrs	r3, r2
 8003036:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003038:	4b1f      	ldr	r3, [pc, #124]	@ (80030b8 <HAL_RCC_OscConfig+0x4c4>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a19      	ldr	r1, [r3, #32]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003048:	430b      	orrs	r3, r1
 800304a:	491b      	ldr	r1, [pc, #108]	@ (80030b8 <HAL_RCC_OscConfig+0x4c4>)
 800304c:	4313      	orrs	r3, r2
 800304e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003050:	4b1b      	ldr	r3, [pc, #108]	@ (80030c0 <HAL_RCC_OscConfig+0x4cc>)
 8003052:	2201      	movs	r2, #1
 8003054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003056:	f7fe fb67 	bl	8001728 <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800305c:	e008      	b.n	8003070 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800305e:	f7fe fb63 	bl	8001728 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e03d      	b.n	80030ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003070:	4b11      	ldr	r3, [pc, #68]	@ (80030b8 <HAL_RCC_OscConfig+0x4c4>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d0f0      	beq.n	800305e <HAL_RCC_OscConfig+0x46a>
 800307c:	e035      	b.n	80030ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800307e:	4b10      	ldr	r3, [pc, #64]	@ (80030c0 <HAL_RCC_OscConfig+0x4cc>)
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003084:	f7fe fb50 	bl	8001728 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800308c:	f7fe fb4c 	bl	8001728 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e026      	b.n	80030ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800309e:	4b06      	ldr	r3, [pc, #24]	@ (80030b8 <HAL_RCC_OscConfig+0x4c4>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f0      	bne.n	800308c <HAL_RCC_OscConfig+0x498>
 80030aa:	e01e      	b.n	80030ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	69db      	ldr	r3, [r3, #28]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d107      	bne.n	80030c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e019      	b.n	80030ec <HAL_RCC_OscConfig+0x4f8>
 80030b8:	40021000 	.word	0x40021000
 80030bc:	40007000 	.word	0x40007000
 80030c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030c4:	4b0b      	ldr	r3, [pc, #44]	@ (80030f4 <HAL_RCC_OscConfig+0x500>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d106      	bne.n	80030e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d001      	beq.n	80030ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3718      	adds	r7, #24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40021000 	.word	0x40021000

080030f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e0d0      	b.n	80032ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800310c:	4b6a      	ldr	r3, [pc, #424]	@ (80032b8 <HAL_RCC_ClockConfig+0x1c0>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	429a      	cmp	r2, r3
 8003118:	d910      	bls.n	800313c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800311a:	4b67      	ldr	r3, [pc, #412]	@ (80032b8 <HAL_RCC_ClockConfig+0x1c0>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f023 0207 	bic.w	r2, r3, #7
 8003122:	4965      	ldr	r1, [pc, #404]	@ (80032b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	4313      	orrs	r3, r2
 8003128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800312a:	4b63      	ldr	r3, [pc, #396]	@ (80032b8 <HAL_RCC_ClockConfig+0x1c0>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	429a      	cmp	r2, r3
 8003136:	d001      	beq.n	800313c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e0b8      	b.n	80032ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d020      	beq.n	800318a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	d005      	beq.n	8003160 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003154:	4b59      	ldr	r3, [pc, #356]	@ (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	4a58      	ldr	r2, [pc, #352]	@ (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 800315a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800315e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0308 	and.w	r3, r3, #8
 8003168:	2b00      	cmp	r3, #0
 800316a:	d005      	beq.n	8003178 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800316c:	4b53      	ldr	r3, [pc, #332]	@ (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	4a52      	ldr	r2, [pc, #328]	@ (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 8003172:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003176:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003178:	4b50      	ldr	r3, [pc, #320]	@ (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	494d      	ldr	r1, [pc, #308]	@ (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 8003186:	4313      	orrs	r3, r2
 8003188:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d040      	beq.n	8003218 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d107      	bne.n	80031ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319e:	4b47      	ldr	r3, [pc, #284]	@ (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d115      	bne.n	80031d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e07f      	b.n	80032ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d107      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b6:	4b41      	ldr	r3, [pc, #260]	@ (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d109      	bne.n	80031d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e073      	b.n	80032ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c6:	4b3d      	ldr	r3, [pc, #244]	@ (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e06b      	b.n	80032ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031d6:	4b39      	ldr	r3, [pc, #228]	@ (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f023 0203 	bic.w	r2, r3, #3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	4936      	ldr	r1, [pc, #216]	@ (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031e8:	f7fe fa9e 	bl	8001728 <HAL_GetTick>
 80031ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ee:	e00a      	b.n	8003206 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031f0:	f7fe fa9a 	bl	8001728 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031fe:	4293      	cmp	r3, r2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e053      	b.n	80032ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003206:	4b2d      	ldr	r3, [pc, #180]	@ (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f003 020c 	and.w	r2, r3, #12
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	429a      	cmp	r2, r3
 8003216:	d1eb      	bne.n	80031f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003218:	4b27      	ldr	r3, [pc, #156]	@ (80032b8 <HAL_RCC_ClockConfig+0x1c0>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0307 	and.w	r3, r3, #7
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	429a      	cmp	r2, r3
 8003224:	d210      	bcs.n	8003248 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003226:	4b24      	ldr	r3, [pc, #144]	@ (80032b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f023 0207 	bic.w	r2, r3, #7
 800322e:	4922      	ldr	r1, [pc, #136]	@ (80032b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	4313      	orrs	r3, r2
 8003234:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003236:	4b20      	ldr	r3, [pc, #128]	@ (80032b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	429a      	cmp	r2, r3
 8003242:	d001      	beq.n	8003248 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e032      	b.n	80032ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b00      	cmp	r3, #0
 8003252:	d008      	beq.n	8003266 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003254:	4b19      	ldr	r3, [pc, #100]	@ (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	4916      	ldr	r1, [pc, #88]	@ (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 8003262:	4313      	orrs	r3, r2
 8003264:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	2b00      	cmp	r3, #0
 8003270:	d009      	beq.n	8003286 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003272:	4b12      	ldr	r3, [pc, #72]	@ (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	490e      	ldr	r1, [pc, #56]	@ (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 8003282:	4313      	orrs	r3, r2
 8003284:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003286:	f000 f821 	bl	80032cc <HAL_RCC_GetSysClockFreq>
 800328a:	4602      	mov	r2, r0
 800328c:	4b0b      	ldr	r3, [pc, #44]	@ (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	091b      	lsrs	r3, r3, #4
 8003292:	f003 030f 	and.w	r3, r3, #15
 8003296:	490a      	ldr	r1, [pc, #40]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003298:	5ccb      	ldrb	r3, [r1, r3]
 800329a:	fa22 f303 	lsr.w	r3, r2, r3
 800329e:	4a09      	ldr	r2, [pc, #36]	@ (80032c4 <HAL_RCC_ClockConfig+0x1cc>)
 80032a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032a2:	4b09      	ldr	r3, [pc, #36]	@ (80032c8 <HAL_RCC_ClockConfig+0x1d0>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7fe f94a 	bl	8001540 <HAL_InitTick>

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40022000 	.word	0x40022000
 80032bc:	40021000 	.word	0x40021000
 80032c0:	080059a8 	.word	0x080059a8
 80032c4:	20000008 	.word	0x20000008
 80032c8:	2000000c 	.word	0x2000000c

080032cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b087      	sub	sp, #28
 80032d0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032d2:	2300      	movs	r3, #0
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	2300      	movs	r3, #0
 80032d8:	60bb      	str	r3, [r7, #8]
 80032da:	2300      	movs	r3, #0
 80032dc:	617b      	str	r3, [r7, #20]
 80032de:	2300      	movs	r3, #0
 80032e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003360 <HAL_RCC_GetSysClockFreq+0x94>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f003 030c 	and.w	r3, r3, #12
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d002      	beq.n	80032fc <HAL_RCC_GetSysClockFreq+0x30>
 80032f6:	2b08      	cmp	r3, #8
 80032f8:	d003      	beq.n	8003302 <HAL_RCC_GetSysClockFreq+0x36>
 80032fa:	e027      	b.n	800334c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032fc:	4b19      	ldr	r3, [pc, #100]	@ (8003364 <HAL_RCC_GetSysClockFreq+0x98>)
 80032fe:	613b      	str	r3, [r7, #16]
      break;
 8003300:	e027      	b.n	8003352 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	0c9b      	lsrs	r3, r3, #18
 8003306:	f003 030f 	and.w	r3, r3, #15
 800330a:	4a17      	ldr	r2, [pc, #92]	@ (8003368 <HAL_RCC_GetSysClockFreq+0x9c>)
 800330c:	5cd3      	ldrb	r3, [r2, r3]
 800330e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d010      	beq.n	800333c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800331a:	4b11      	ldr	r3, [pc, #68]	@ (8003360 <HAL_RCC_GetSysClockFreq+0x94>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	0c5b      	lsrs	r3, r3, #17
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	4a11      	ldr	r2, [pc, #68]	@ (800336c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003326:	5cd3      	ldrb	r3, [r2, r3]
 8003328:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a0d      	ldr	r2, [pc, #52]	@ (8003364 <HAL_RCC_GetSysClockFreq+0x98>)
 800332e:	fb03 f202 	mul.w	r2, r3, r2
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	fbb2 f3f3 	udiv	r3, r2, r3
 8003338:	617b      	str	r3, [r7, #20]
 800333a:	e004      	b.n	8003346 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a0c      	ldr	r2, [pc, #48]	@ (8003370 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003340:	fb02 f303 	mul.w	r3, r2, r3
 8003344:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	613b      	str	r3, [r7, #16]
      break;
 800334a:	e002      	b.n	8003352 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800334c:	4b05      	ldr	r3, [pc, #20]	@ (8003364 <HAL_RCC_GetSysClockFreq+0x98>)
 800334e:	613b      	str	r3, [r7, #16]
      break;
 8003350:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003352:	693b      	ldr	r3, [r7, #16]
}
 8003354:	4618      	mov	r0, r3
 8003356:	371c      	adds	r7, #28
 8003358:	46bd      	mov	sp, r7
 800335a:	bc80      	pop	{r7}
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	40021000 	.word	0x40021000
 8003364:	007a1200 	.word	0x007a1200
 8003368:	080059c0 	.word	0x080059c0
 800336c:	080059d0 	.word	0x080059d0
 8003370:	003d0900 	.word	0x003d0900

08003374 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003378:	4b02      	ldr	r3, [pc, #8]	@ (8003384 <HAL_RCC_GetHCLKFreq+0x10>)
 800337a:	681b      	ldr	r3, [r3, #0]
}
 800337c:	4618      	mov	r0, r3
 800337e:	46bd      	mov	sp, r7
 8003380:	bc80      	pop	{r7}
 8003382:	4770      	bx	lr
 8003384:	20000008 	.word	0x20000008

08003388 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800338c:	f7ff fff2 	bl	8003374 <HAL_RCC_GetHCLKFreq>
 8003390:	4602      	mov	r2, r0
 8003392:	4b05      	ldr	r3, [pc, #20]	@ (80033a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	0a1b      	lsrs	r3, r3, #8
 8003398:	f003 0307 	and.w	r3, r3, #7
 800339c:	4903      	ldr	r1, [pc, #12]	@ (80033ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800339e:	5ccb      	ldrb	r3, [r1, r3]
 80033a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40021000 	.word	0x40021000
 80033ac:	080059b8 	.word	0x080059b8

080033b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033b4:	f7ff ffde 	bl	8003374 <HAL_RCC_GetHCLKFreq>
 80033b8:	4602      	mov	r2, r0
 80033ba:	4b05      	ldr	r3, [pc, #20]	@ (80033d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	0adb      	lsrs	r3, r3, #11
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	4903      	ldr	r1, [pc, #12]	@ (80033d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033c6:	5ccb      	ldrb	r3, [r1, r3]
 80033c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40021000 	.word	0x40021000
 80033d4:	080059b8 	.word	0x080059b8

080033d8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	220f      	movs	r2, #15
 80033e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80033e8:	4b11      	ldr	r3, [pc, #68]	@ (8003430 <HAL_RCC_GetClockConfig+0x58>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 0203 	and.w	r2, r3, #3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80033f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003430 <HAL_RCC_GetClockConfig+0x58>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003400:	4b0b      	ldr	r3, [pc, #44]	@ (8003430 <HAL_RCC_GetClockConfig+0x58>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800340c:	4b08      	ldr	r3, [pc, #32]	@ (8003430 <HAL_RCC_GetClockConfig+0x58>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	08db      	lsrs	r3, r3, #3
 8003412:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800341a:	4b06      	ldr	r3, [pc, #24]	@ (8003434 <HAL_RCC_GetClockConfig+0x5c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0207 	and.w	r2, r3, #7
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	bc80      	pop	{r7}
 800342e:	4770      	bx	lr
 8003430:	40021000 	.word	0x40021000
 8003434:	40022000 	.word	0x40022000

08003438 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003440:	4b0a      	ldr	r3, [pc, #40]	@ (800346c <RCC_Delay+0x34>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a0a      	ldr	r2, [pc, #40]	@ (8003470 <RCC_Delay+0x38>)
 8003446:	fba2 2303 	umull	r2, r3, r2, r3
 800344a:	0a5b      	lsrs	r3, r3, #9
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	fb02 f303 	mul.w	r3, r2, r3
 8003452:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003454:	bf00      	nop
  }
  while (Delay --);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	1e5a      	subs	r2, r3, #1
 800345a:	60fa      	str	r2, [r7, #12]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1f9      	bne.n	8003454 <RCC_Delay+0x1c>
}
 8003460:	bf00      	nop
 8003462:	bf00      	nop
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr
 800346c:	20000008 	.word	0x20000008
 8003470:	10624dd3 	.word	0x10624dd3

08003474 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e041      	b.n	800350a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d106      	bne.n	80034a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7fd fffc 	bl	8001498 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2202      	movs	r2, #2
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3304      	adds	r3, #4
 80034b0:	4619      	mov	r1, r3
 80034b2:	4610      	mov	r0, r2
 80034b4:	f000 fd0e 	bl	8003ed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
	...

08003514 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b01      	cmp	r3, #1
 8003526:	d001      	beq.n	800352c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e03a      	b.n	80035a2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68da      	ldr	r2, [r3, #12]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 0201 	orr.w	r2, r2, #1
 8003542:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a18      	ldr	r2, [pc, #96]	@ (80035ac <HAL_TIM_Base_Start_IT+0x98>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d00e      	beq.n	800356c <HAL_TIM_Base_Start_IT+0x58>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003556:	d009      	beq.n	800356c <HAL_TIM_Base_Start_IT+0x58>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a14      	ldr	r2, [pc, #80]	@ (80035b0 <HAL_TIM_Base_Start_IT+0x9c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d004      	beq.n	800356c <HAL_TIM_Base_Start_IT+0x58>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a13      	ldr	r2, [pc, #76]	@ (80035b4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d111      	bne.n	8003590 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 0307 	and.w	r3, r3, #7
 8003576:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2b06      	cmp	r3, #6
 800357c:	d010      	beq.n	80035a0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f042 0201 	orr.w	r2, r2, #1
 800358c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800358e:	e007      	b.n	80035a0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0201 	orr.w	r2, r2, #1
 800359e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bc80      	pop	{r7}
 80035aa:	4770      	bx	lr
 80035ac:	40012c00 	.word	0x40012c00
 80035b0:	40000400 	.word	0x40000400
 80035b4:	40000800 	.word	0x40000800

080035b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e041      	b.n	800364e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d106      	bne.n	80035e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f839 	bl	8003656 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2202      	movs	r2, #2
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	3304      	adds	r3, #4
 80035f4:	4619      	mov	r1, r3
 80035f6:	4610      	mov	r0, r2
 80035f8:	f000 fc6c 	bl	8003ed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	bc80      	pop	{r7}
 8003666:	4770      	bx	lr

08003668 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003672:	2300      	movs	r3, #0
 8003674:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d109      	bne.n	8003690 <HAL_TIM_PWM_Start_IT+0x28>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b01      	cmp	r3, #1
 8003686:	bf14      	ite	ne
 8003688:	2301      	movne	r3, #1
 800368a:	2300      	moveq	r3, #0
 800368c:	b2db      	uxtb	r3, r3
 800368e:	e022      	b.n	80036d6 <HAL_TIM_PWM_Start_IT+0x6e>
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	2b04      	cmp	r3, #4
 8003694:	d109      	bne.n	80036aa <HAL_TIM_PWM_Start_IT+0x42>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b01      	cmp	r3, #1
 80036a0:	bf14      	ite	ne
 80036a2:	2301      	movne	r3, #1
 80036a4:	2300      	moveq	r3, #0
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	e015      	b.n	80036d6 <HAL_TIM_PWM_Start_IT+0x6e>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d109      	bne.n	80036c4 <HAL_TIM_PWM_Start_IT+0x5c>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	bf14      	ite	ne
 80036bc:	2301      	movne	r3, #1
 80036be:	2300      	moveq	r3, #0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	e008      	b.n	80036d6 <HAL_TIM_PWM_Start_IT+0x6e>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	bf14      	ite	ne
 80036d0:	2301      	movne	r3, #1
 80036d2:	2300      	moveq	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e0a9      	b.n	8003832 <HAL_TIM_PWM_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d104      	bne.n	80036ee <HAL_TIM_PWM_Start_IT+0x86>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036ec:	e013      	b.n	8003716 <HAL_TIM_PWM_Start_IT+0xae>
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2b04      	cmp	r3, #4
 80036f2:	d104      	bne.n	80036fe <HAL_TIM_PWM_Start_IT+0x96>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036fc:	e00b      	b.n	8003716 <HAL_TIM_PWM_Start_IT+0xae>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	2b08      	cmp	r3, #8
 8003702:	d104      	bne.n	800370e <HAL_TIM_PWM_Start_IT+0xa6>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2202      	movs	r2, #2
 8003708:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800370c:	e003      	b.n	8003716 <HAL_TIM_PWM_Start_IT+0xae>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2202      	movs	r2, #2
 8003712:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2b0c      	cmp	r3, #12
 800371a:	d841      	bhi.n	80037a0 <HAL_TIM_PWM_Start_IT+0x138>
 800371c:	a201      	add	r2, pc, #4	@ (adr r2, 8003724 <HAL_TIM_PWM_Start_IT+0xbc>)
 800371e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003722:	bf00      	nop
 8003724:	08003759 	.word	0x08003759
 8003728:	080037a1 	.word	0x080037a1
 800372c:	080037a1 	.word	0x080037a1
 8003730:	080037a1 	.word	0x080037a1
 8003734:	0800376b 	.word	0x0800376b
 8003738:	080037a1 	.word	0x080037a1
 800373c:	080037a1 	.word	0x080037a1
 8003740:	080037a1 	.word	0x080037a1
 8003744:	0800377d 	.word	0x0800377d
 8003748:	080037a1 	.word	0x080037a1
 800374c:	080037a1 	.word	0x080037a1
 8003750:	080037a1 	.word	0x080037a1
 8003754:	0800378f 	.word	0x0800378f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f042 0202 	orr.w	r2, r2, #2
 8003766:	60da      	str	r2, [r3, #12]
      break;
 8003768:	e01d      	b.n	80037a6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68da      	ldr	r2, [r3, #12]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f042 0204 	orr.w	r2, r2, #4
 8003778:	60da      	str	r2, [r3, #12]
      break;
 800377a:	e014      	b.n	80037a6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68da      	ldr	r2, [r3, #12]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0208 	orr.w	r2, r2, #8
 800378a:	60da      	str	r2, [r3, #12]
      break;
 800378c:	e00b      	b.n	80037a6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68da      	ldr	r2, [r3, #12]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f042 0210 	orr.w	r2, r2, #16
 800379c:	60da      	str	r2, [r3, #12]
      break;
 800379e:	e002      	b.n	80037a6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	73fb      	strb	r3, [r7, #15]
      break;
 80037a4:	bf00      	nop
  }

  if (status == HAL_OK)
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d141      	bne.n	8003830 <HAL_TIM_PWM_Start_IT+0x1c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2201      	movs	r2, #1
 80037b2:	6839      	ldr	r1, [r7, #0]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f000 fe19 	bl	80043ec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a1f      	ldr	r2, [pc, #124]	@ (800383c <HAL_TIM_PWM_Start_IT+0x1d4>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d107      	bne.n	80037d4 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037d2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a18      	ldr	r2, [pc, #96]	@ (800383c <HAL_TIM_PWM_Start_IT+0x1d4>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d00e      	beq.n	80037fc <HAL_TIM_PWM_Start_IT+0x194>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037e6:	d009      	beq.n	80037fc <HAL_TIM_PWM_Start_IT+0x194>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a14      	ldr	r2, [pc, #80]	@ (8003840 <HAL_TIM_PWM_Start_IT+0x1d8>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d004      	beq.n	80037fc <HAL_TIM_PWM_Start_IT+0x194>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a13      	ldr	r2, [pc, #76]	@ (8003844 <HAL_TIM_PWM_Start_IT+0x1dc>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d111      	bne.n	8003820 <HAL_TIM_PWM_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 0307 	and.w	r3, r3, #7
 8003806:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2b06      	cmp	r3, #6
 800380c:	d010      	beq.n	8003830 <HAL_TIM_PWM_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f042 0201 	orr.w	r2, r2, #1
 800381c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800381e:	e007      	b.n	8003830 <HAL_TIM_PWM_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 0201 	orr.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003830:	7bfb      	ldrb	r3, [r7, #15]
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40012c00 	.word	0x40012c00
 8003840:	40000400 	.word	0x40000400
 8003844:	40000800 	.word	0x40000800

08003848 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003852:	2300      	movs	r3, #0
 8003854:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2b0c      	cmp	r3, #12
 800385a:	d841      	bhi.n	80038e0 <HAL_TIM_PWM_Stop_IT+0x98>
 800385c:	a201      	add	r2, pc, #4	@ (adr r2, 8003864 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800385e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003862:	bf00      	nop
 8003864:	08003899 	.word	0x08003899
 8003868:	080038e1 	.word	0x080038e1
 800386c:	080038e1 	.word	0x080038e1
 8003870:	080038e1 	.word	0x080038e1
 8003874:	080038ab 	.word	0x080038ab
 8003878:	080038e1 	.word	0x080038e1
 800387c:	080038e1 	.word	0x080038e1
 8003880:	080038e1 	.word	0x080038e1
 8003884:	080038bd 	.word	0x080038bd
 8003888:	080038e1 	.word	0x080038e1
 800388c:	080038e1 	.word	0x080038e1
 8003890:	080038e1 	.word	0x080038e1
 8003894:	080038cf 	.word	0x080038cf
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0202 	bic.w	r2, r2, #2
 80038a6:	60da      	str	r2, [r3, #12]
      break;
 80038a8:	e01d      	b.n	80038e6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0204 	bic.w	r2, r2, #4
 80038b8:	60da      	str	r2, [r3, #12]
      break;
 80038ba:	e014      	b.n	80038e6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68da      	ldr	r2, [r3, #12]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 0208 	bic.w	r2, r2, #8
 80038ca:	60da      	str	r2, [r3, #12]
      break;
 80038cc:	e00b      	b.n	80038e6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68da      	ldr	r2, [r3, #12]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0210 	bic.w	r2, r2, #16
 80038dc:	60da      	str	r2, [r3, #12]
      break;
 80038de:	e002      	b.n	80038e6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	73fb      	strb	r3, [r7, #15]
      break;
 80038e4:	bf00      	nop
  }

  if (status == HAL_OK)
 80038e6:	7bfb      	ldrb	r3, [r7, #15]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d157      	bne.n	800399c <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2200      	movs	r2, #0
 80038f2:	6839      	ldr	r1, [r7, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 fd79 	bl	80043ec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a2a      	ldr	r2, [pc, #168]	@ (80039a8 <HAL_TIM_PWM_Stop_IT+0x160>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d117      	bne.n	8003934 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6a1a      	ldr	r2, [r3, #32]
 800390a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800390e:	4013      	ands	r3, r2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10f      	bne.n	8003934 <HAL_TIM_PWM_Stop_IT+0xec>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6a1a      	ldr	r2, [r3, #32]
 800391a:	f240 4344 	movw	r3, #1092	@ 0x444
 800391e:	4013      	ands	r3, r2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d107      	bne.n	8003934 <HAL_TIM_PWM_Stop_IT+0xec>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003932:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6a1a      	ldr	r2, [r3, #32]
 800393a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800393e:	4013      	ands	r3, r2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10f      	bne.n	8003964 <HAL_TIM_PWM_Stop_IT+0x11c>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6a1a      	ldr	r2, [r3, #32]
 800394a:	f240 4344 	movw	r3, #1092	@ 0x444
 800394e:	4013      	ands	r3, r2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d107      	bne.n	8003964 <HAL_TIM_PWM_Stop_IT+0x11c>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 0201 	bic.w	r2, r2, #1
 8003962:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d104      	bne.n	8003974 <HAL_TIM_PWM_Stop_IT+0x12c>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003972:	e013      	b.n	800399c <HAL_TIM_PWM_Stop_IT+0x154>
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	2b04      	cmp	r3, #4
 8003978:	d104      	bne.n	8003984 <HAL_TIM_PWM_Stop_IT+0x13c>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003982:	e00b      	b.n	800399c <HAL_TIM_PWM_Stop_IT+0x154>
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	2b08      	cmp	r3, #8
 8003988:	d104      	bne.n	8003994 <HAL_TIM_PWM_Stop_IT+0x14c>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003992:	e003      	b.n	800399c <HAL_TIM_PWM_Stop_IT+0x154>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 800399c:	7bfb      	ldrb	r3, [r7, #15]
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	40012c00 	.word	0x40012c00

080039ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d020      	beq.n	8003a10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d01b      	beq.n	8003a10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f06f 0202 	mvn.w	r2, #2
 80039e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2201      	movs	r2, #1
 80039e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	f003 0303 	and.w	r3, r3, #3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 fa5a 	bl	8003eb0 <HAL_TIM_IC_CaptureCallback>
 80039fc:	e005      	b.n	8003a0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 fa4d 	bl	8003e9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f7fd fa19 	bl	8000e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	f003 0304 	and.w	r3, r3, #4
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d020      	beq.n	8003a5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d01b      	beq.n	8003a5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f06f 0204 	mvn.w	r2, #4
 8003a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2202      	movs	r2, #2
 8003a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 fa34 	bl	8003eb0 <HAL_TIM_IC_CaptureCallback>
 8003a48:	e005      	b.n	8003a56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 fa27 	bl	8003e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f7fd f9f3 	bl	8000e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	f003 0308 	and.w	r3, r3, #8
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d020      	beq.n	8003aa8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f003 0308 	and.w	r3, r3, #8
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d01b      	beq.n	8003aa8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f06f 0208 	mvn.w	r2, #8
 8003a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2204      	movs	r2, #4
 8003a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d003      	beq.n	8003a96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 fa0e 	bl	8003eb0 <HAL_TIM_IC_CaptureCallback>
 8003a94:	e005      	b.n	8003aa2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 fa01 	bl	8003e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f7fd f9cd 	bl	8000e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	f003 0310 	and.w	r3, r3, #16
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d020      	beq.n	8003af4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f003 0310 	and.w	r3, r3, #16
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d01b      	beq.n	8003af4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f06f 0210 	mvn.w	r2, #16
 8003ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2208      	movs	r2, #8
 8003aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f9e8 	bl	8003eb0 <HAL_TIM_IC_CaptureCallback>
 8003ae0:	e005      	b.n	8003aee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f9db 	bl	8003e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f7fd f9a7 	bl	8000e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00c      	beq.n	8003b18 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d007      	beq.n	8003b18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f06f 0201 	mvn.w	r2, #1
 8003b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7fd fc32 	bl	800137c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00c      	beq.n	8003b3c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d007      	beq.n	8003b3c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 fce3 	bl	8004502 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00c      	beq.n	8003b60 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d007      	beq.n	8003b60 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f9b1 	bl	8003ec2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	f003 0320 	and.w	r3, r3, #32
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00c      	beq.n	8003b84 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f003 0320 	and.w	r3, r3, #32
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d007      	beq.n	8003b84 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f06f 0220 	mvn.w	r2, #32
 8003b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 fcb6 	bl	80044f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b84:	bf00      	nop
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d101      	bne.n	8003baa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	e0ae      	b.n	8003d08 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b0c      	cmp	r3, #12
 8003bb6:	f200 809f 	bhi.w	8003cf8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003bba:	a201      	add	r2, pc, #4	@ (adr r2, 8003bc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc0:	08003bf5 	.word	0x08003bf5
 8003bc4:	08003cf9 	.word	0x08003cf9
 8003bc8:	08003cf9 	.word	0x08003cf9
 8003bcc:	08003cf9 	.word	0x08003cf9
 8003bd0:	08003c35 	.word	0x08003c35
 8003bd4:	08003cf9 	.word	0x08003cf9
 8003bd8:	08003cf9 	.word	0x08003cf9
 8003bdc:	08003cf9 	.word	0x08003cf9
 8003be0:	08003c77 	.word	0x08003c77
 8003be4:	08003cf9 	.word	0x08003cf9
 8003be8:	08003cf9 	.word	0x08003cf9
 8003bec:	08003cf9 	.word	0x08003cf9
 8003bf0:	08003cb7 	.word	0x08003cb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68b9      	ldr	r1, [r7, #8]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 f9d8 	bl	8003fb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	699a      	ldr	r2, [r3, #24]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0208 	orr.w	r2, r2, #8
 8003c0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	699a      	ldr	r2, [r3, #24]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 0204 	bic.w	r2, r2, #4
 8003c1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6999      	ldr	r1, [r3, #24]
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	691a      	ldr	r2, [r3, #16]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	619a      	str	r2, [r3, #24]
      break;
 8003c32:	e064      	b.n	8003cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68b9      	ldr	r1, [r7, #8]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 fa1e 	bl	800407c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	699a      	ldr	r2, [r3, #24]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	699a      	ldr	r2, [r3, #24]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6999      	ldr	r1, [r3, #24]
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	021a      	lsls	r2, r3, #8
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	619a      	str	r2, [r3, #24]
      break;
 8003c74:	e043      	b.n	8003cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68b9      	ldr	r1, [r7, #8]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f000 fa67 	bl	8004150 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	69da      	ldr	r2, [r3, #28]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f042 0208 	orr.w	r2, r2, #8
 8003c90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	69da      	ldr	r2, [r3, #28]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0204 	bic.w	r2, r2, #4
 8003ca0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	69d9      	ldr	r1, [r3, #28]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	691a      	ldr	r2, [r3, #16]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	61da      	str	r2, [r3, #28]
      break;
 8003cb4:	e023      	b.n	8003cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68b9      	ldr	r1, [r7, #8]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f000 fab1 	bl	8004224 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	69da      	ldr	r2, [r3, #28]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	69da      	ldr	r2, [r3, #28]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ce0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	69d9      	ldr	r1, [r3, #28]
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	021a      	lsls	r2, r3, #8
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	61da      	str	r2, [r3, #28]
      break;
 8003cf6:	e002      	b.n	8003cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	75fb      	strb	r3, [r7, #23]
      break;
 8003cfc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d101      	bne.n	8003d2c <HAL_TIM_ConfigClockSource+0x1c>
 8003d28:	2302      	movs	r3, #2
 8003d2a:	e0b4      	b.n	8003e96 <HAL_TIM_ConfigClockSource+0x186>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2202      	movs	r2, #2
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003d4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d64:	d03e      	beq.n	8003de4 <HAL_TIM_ConfigClockSource+0xd4>
 8003d66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d6a:	f200 8087 	bhi.w	8003e7c <HAL_TIM_ConfigClockSource+0x16c>
 8003d6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d72:	f000 8086 	beq.w	8003e82 <HAL_TIM_ConfigClockSource+0x172>
 8003d76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d7a:	d87f      	bhi.n	8003e7c <HAL_TIM_ConfigClockSource+0x16c>
 8003d7c:	2b70      	cmp	r3, #112	@ 0x70
 8003d7e:	d01a      	beq.n	8003db6 <HAL_TIM_ConfigClockSource+0xa6>
 8003d80:	2b70      	cmp	r3, #112	@ 0x70
 8003d82:	d87b      	bhi.n	8003e7c <HAL_TIM_ConfigClockSource+0x16c>
 8003d84:	2b60      	cmp	r3, #96	@ 0x60
 8003d86:	d050      	beq.n	8003e2a <HAL_TIM_ConfigClockSource+0x11a>
 8003d88:	2b60      	cmp	r3, #96	@ 0x60
 8003d8a:	d877      	bhi.n	8003e7c <HAL_TIM_ConfigClockSource+0x16c>
 8003d8c:	2b50      	cmp	r3, #80	@ 0x50
 8003d8e:	d03c      	beq.n	8003e0a <HAL_TIM_ConfigClockSource+0xfa>
 8003d90:	2b50      	cmp	r3, #80	@ 0x50
 8003d92:	d873      	bhi.n	8003e7c <HAL_TIM_ConfigClockSource+0x16c>
 8003d94:	2b40      	cmp	r3, #64	@ 0x40
 8003d96:	d058      	beq.n	8003e4a <HAL_TIM_ConfigClockSource+0x13a>
 8003d98:	2b40      	cmp	r3, #64	@ 0x40
 8003d9a:	d86f      	bhi.n	8003e7c <HAL_TIM_ConfigClockSource+0x16c>
 8003d9c:	2b30      	cmp	r3, #48	@ 0x30
 8003d9e:	d064      	beq.n	8003e6a <HAL_TIM_ConfigClockSource+0x15a>
 8003da0:	2b30      	cmp	r3, #48	@ 0x30
 8003da2:	d86b      	bhi.n	8003e7c <HAL_TIM_ConfigClockSource+0x16c>
 8003da4:	2b20      	cmp	r3, #32
 8003da6:	d060      	beq.n	8003e6a <HAL_TIM_ConfigClockSource+0x15a>
 8003da8:	2b20      	cmp	r3, #32
 8003daa:	d867      	bhi.n	8003e7c <HAL_TIM_ConfigClockSource+0x16c>
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d05c      	beq.n	8003e6a <HAL_TIM_ConfigClockSource+0x15a>
 8003db0:	2b10      	cmp	r3, #16
 8003db2:	d05a      	beq.n	8003e6a <HAL_TIM_ConfigClockSource+0x15a>
 8003db4:	e062      	b.n	8003e7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003dc6:	f000 faf2 	bl	80043ae <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003dd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	609a      	str	r2, [r3, #8]
      break;
 8003de2:	e04f      	b.n	8003e84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003df4:	f000 fadb 	bl	80043ae <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689a      	ldr	r2, [r3, #8]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e06:	609a      	str	r2, [r3, #8]
      break;
 8003e08:	e03c      	b.n	8003e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e16:	461a      	mov	r2, r3
 8003e18:	f000 fa52 	bl	80042c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2150      	movs	r1, #80	@ 0x50
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 faa9 	bl	800437a <TIM_ITRx_SetConfig>
      break;
 8003e28:	e02c      	b.n	8003e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e36:	461a      	mov	r2, r3
 8003e38:	f000 fa70 	bl	800431c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2160      	movs	r1, #96	@ 0x60
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 fa99 	bl	800437a <TIM_ITRx_SetConfig>
      break;
 8003e48:	e01c      	b.n	8003e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e56:	461a      	mov	r2, r3
 8003e58:	f000 fa32 	bl	80042c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2140      	movs	r1, #64	@ 0x40
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 fa89 	bl	800437a <TIM_ITRx_SetConfig>
      break;
 8003e68:	e00c      	b.n	8003e84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4619      	mov	r1, r3
 8003e74:	4610      	mov	r0, r2
 8003e76:	f000 fa80 	bl	800437a <TIM_ITRx_SetConfig>
      break;
 8003e7a:	e003      	b.n	8003e84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e80:	e000      	b.n	8003e84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b083      	sub	sp, #12
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bc80      	pop	{r7}
 8003eae:	4770      	bx	lr

08003eb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bc80      	pop	{r7}
 8003ec0:	4770      	bx	lr

08003ec2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003eca:	bf00      	nop
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bc80      	pop	{r7}
 8003ed2:	4770      	bx	lr

08003ed4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a2f      	ldr	r2, [pc, #188]	@ (8003fa4 <TIM_Base_SetConfig+0xd0>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d00b      	beq.n	8003f04 <TIM_Base_SetConfig+0x30>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ef2:	d007      	beq.n	8003f04 <TIM_Base_SetConfig+0x30>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a2c      	ldr	r2, [pc, #176]	@ (8003fa8 <TIM_Base_SetConfig+0xd4>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d003      	beq.n	8003f04 <TIM_Base_SetConfig+0x30>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a2b      	ldr	r2, [pc, #172]	@ (8003fac <TIM_Base_SetConfig+0xd8>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d108      	bne.n	8003f16 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a22      	ldr	r2, [pc, #136]	@ (8003fa4 <TIM_Base_SetConfig+0xd0>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d00b      	beq.n	8003f36 <TIM_Base_SetConfig+0x62>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f24:	d007      	beq.n	8003f36 <TIM_Base_SetConfig+0x62>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a1f      	ldr	r2, [pc, #124]	@ (8003fa8 <TIM_Base_SetConfig+0xd4>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d003      	beq.n	8003f36 <TIM_Base_SetConfig+0x62>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a1e      	ldr	r2, [pc, #120]	@ (8003fac <TIM_Base_SetConfig+0xd8>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d108      	bne.n	8003f48 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	689a      	ldr	r2, [r3, #8]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a0d      	ldr	r2, [pc, #52]	@ (8003fa4 <TIM_Base_SetConfig+0xd0>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d103      	bne.n	8003f7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	691a      	ldr	r2, [r3, #16]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d005      	beq.n	8003f9a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	f023 0201 	bic.w	r2, r3, #1
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	611a      	str	r2, [r3, #16]
  }
}
 8003f9a:	bf00      	nop
 8003f9c:	3714      	adds	r7, #20
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bc80      	pop	{r7}
 8003fa2:	4770      	bx	lr
 8003fa4:	40012c00 	.word	0x40012c00
 8003fa8:	40000400 	.word	0x40000400
 8003fac:	40000800 	.word	0x40000800

08003fb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b087      	sub	sp, #28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a1b      	ldr	r3, [r3, #32]
 8003fc4:	f023 0201 	bic.w	r2, r3, #1
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f023 0303 	bic.w	r3, r3, #3
 8003fe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f023 0302 	bic.w	r3, r3, #2
 8003ff8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	4313      	orrs	r3, r2
 8004002:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a1c      	ldr	r2, [pc, #112]	@ (8004078 <TIM_OC1_SetConfig+0xc8>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d10c      	bne.n	8004026 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f023 0308 	bic.w	r3, r3, #8
 8004012:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	4313      	orrs	r3, r2
 800401c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f023 0304 	bic.w	r3, r3, #4
 8004024:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a13      	ldr	r2, [pc, #76]	@ (8004078 <TIM_OC1_SetConfig+0xc8>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d111      	bne.n	8004052 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004034:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800403c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	4313      	orrs	r3, r2
 8004046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	4313      	orrs	r3, r2
 8004050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	621a      	str	r2, [r3, #32]
}
 800406c:	bf00      	nop
 800406e:	371c      	adds	r7, #28
 8004070:	46bd      	mov	sp, r7
 8004072:	bc80      	pop	{r7}
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	40012c00 	.word	0x40012c00

0800407c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800407c:	b480      	push	{r7}
 800407e:	b087      	sub	sp, #28
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	f023 0210 	bic.w	r2, r3, #16
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	021b      	lsls	r3, r3, #8
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	4313      	orrs	r3, r2
 80040be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f023 0320 	bic.w	r3, r3, #32
 80040c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	011b      	lsls	r3, r3, #4
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a1d      	ldr	r2, [pc, #116]	@ (800414c <TIM_OC2_SetConfig+0xd0>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d10d      	bne.n	80040f8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	011b      	lsls	r3, r3, #4
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a14      	ldr	r2, [pc, #80]	@ (800414c <TIM_OC2_SetConfig+0xd0>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d113      	bne.n	8004128 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004106:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800410e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	4313      	orrs	r3, r2
 800411a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	4313      	orrs	r3, r2
 8004126:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	621a      	str	r2, [r3, #32]
}
 8004142:	bf00      	nop
 8004144:	371c      	adds	r7, #28
 8004146:	46bd      	mov	sp, r7
 8004148:	bc80      	pop	{r7}
 800414a:	4770      	bx	lr
 800414c:	40012c00 	.word	0x40012c00

08004150 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004150:	b480      	push	{r7}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800417e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0303 	bic.w	r3, r3, #3
 8004186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	4313      	orrs	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004198:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	021b      	lsls	r3, r3, #8
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a1d      	ldr	r2, [pc, #116]	@ (8004220 <TIM_OC3_SetConfig+0xd0>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d10d      	bne.n	80041ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80041b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	021b      	lsls	r3, r3, #8
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	4313      	orrs	r3, r2
 80041c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80041c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a14      	ldr	r2, [pc, #80]	@ (8004220 <TIM_OC3_SetConfig+0xd0>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d113      	bne.n	80041fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80041d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80041e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	011b      	lsls	r3, r3, #4
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	011b      	lsls	r3, r3, #4
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	621a      	str	r2, [r3, #32]
}
 8004214:	bf00      	nop
 8004216:	371c      	adds	r7, #28
 8004218:	46bd      	mov	sp, r7
 800421a:	bc80      	pop	{r7}
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	40012c00 	.word	0x40012c00

08004224 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800425a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	021b      	lsls	r3, r3, #8
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	4313      	orrs	r3, r2
 8004266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800426e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	031b      	lsls	r3, r3, #12
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	4313      	orrs	r3, r2
 800427a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a0f      	ldr	r2, [pc, #60]	@ (80042bc <TIM_OC4_SetConfig+0x98>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d109      	bne.n	8004298 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800428a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	019b      	lsls	r3, r3, #6
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	4313      	orrs	r3, r2
 8004296:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	621a      	str	r2, [r3, #32]
}
 80042b2:	bf00      	nop
 80042b4:	371c      	adds	r7, #28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bc80      	pop	{r7}
 80042ba:	4770      	bx	lr
 80042bc:	40012c00 	.word	0x40012c00

080042c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b087      	sub	sp, #28
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	f023 0201 	bic.w	r2, r3, #1
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	011b      	lsls	r3, r3, #4
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f023 030a 	bic.w	r3, r3, #10
 80042fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	4313      	orrs	r3, r2
 8004304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	621a      	str	r2, [r3, #32]
}
 8004312:	bf00      	nop
 8004314:	371c      	adds	r7, #28
 8004316:	46bd      	mov	sp, r7
 8004318:	bc80      	pop	{r7}
 800431a:	4770      	bx	lr

0800431c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800431c:	b480      	push	{r7}
 800431e:	b087      	sub	sp, #28
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	f023 0210 	bic.w	r2, r3, #16
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004346:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	031b      	lsls	r3, r3, #12
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	4313      	orrs	r3, r2
 8004350:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004358:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	011b      	lsls	r3, r3, #4
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	4313      	orrs	r3, r2
 8004362:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	621a      	str	r2, [r3, #32]
}
 8004370:	bf00      	nop
 8004372:	371c      	adds	r7, #28
 8004374:	46bd      	mov	sp, r7
 8004376:	bc80      	pop	{r7}
 8004378:	4770      	bx	lr

0800437a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800437a:	b480      	push	{r7}
 800437c:	b085      	sub	sp, #20
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
 8004382:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004390:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	4313      	orrs	r3, r2
 8004398:	f043 0307 	orr.w	r3, r3, #7
 800439c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	609a      	str	r2, [r3, #8]
}
 80043a4:	bf00      	nop
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bc80      	pop	{r7}
 80043ac:	4770      	bx	lr

080043ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b087      	sub	sp, #28
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	60f8      	str	r0, [r7, #12]
 80043b6:	60b9      	str	r1, [r7, #8]
 80043b8:	607a      	str	r2, [r7, #4]
 80043ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80043c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	021a      	lsls	r2, r3, #8
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	431a      	orrs	r2, r3
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	4313      	orrs	r3, r2
 80043da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	609a      	str	r2, [r3, #8]
}
 80043e2:	bf00      	nop
 80043e4:	371c      	adds	r7, #28
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bc80      	pop	{r7}
 80043ea:	4770      	bx	lr

080043ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b087      	sub	sp, #28
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f003 031f 	and.w	r3, r3, #31
 80043fe:	2201      	movs	r2, #1
 8004400:	fa02 f303 	lsl.w	r3, r2, r3
 8004404:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6a1a      	ldr	r2, [r3, #32]
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	43db      	mvns	r3, r3
 800440e:	401a      	ands	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6a1a      	ldr	r2, [r3, #32]
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	f003 031f 	and.w	r3, r3, #31
 800441e:	6879      	ldr	r1, [r7, #4]
 8004420:	fa01 f303 	lsl.w	r3, r1, r3
 8004424:	431a      	orrs	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	621a      	str	r2, [r3, #32]
}
 800442a:	bf00      	nop
 800442c:	371c      	adds	r7, #28
 800442e:	46bd      	mov	sp, r7
 8004430:	bc80      	pop	{r7}
 8004432:	4770      	bx	lr

08004434 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004444:	2b01      	cmp	r3, #1
 8004446:	d101      	bne.n	800444c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004448:	2302      	movs	r3, #2
 800444a:	e046      	b.n	80044da <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004472:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	4313      	orrs	r3, r2
 800447c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a16      	ldr	r2, [pc, #88]	@ (80044e4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d00e      	beq.n	80044ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004498:	d009      	beq.n	80044ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a12      	ldr	r2, [pc, #72]	@ (80044e8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d004      	beq.n	80044ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a10      	ldr	r2, [pc, #64]	@ (80044ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d10c      	bne.n	80044c8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	4313      	orrs	r3, r2
 80044be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	bc80      	pop	{r7}
 80044e2:	4770      	bx	lr
 80044e4:	40012c00 	.word	0x40012c00
 80044e8:	40000400 	.word	0x40000400
 80044ec:	40000800 	.word	0x40000800

080044f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bc80      	pop	{r7}
 8004500:	4770      	bx	lr

08004502 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004502:	b480      	push	{r7}
 8004504:	b083      	sub	sp, #12
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800450a:	bf00      	nop
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	bc80      	pop	{r7}
 8004512:	4770      	bx	lr

08004514 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	4603      	mov	r3, r0
 800451c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800451e:	2300      	movs	r3, #0
 8004520:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004522:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004526:	2b84      	cmp	r3, #132	@ 0x84
 8004528:	d005      	beq.n	8004536 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800452a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	4413      	add	r3, r2
 8004532:	3303      	adds	r3, #3
 8004534:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004536:	68fb      	ldr	r3, [r7, #12]
}
 8004538:	4618      	mov	r0, r3
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	bc80      	pop	{r7}
 8004540:	4770      	bx	lr

08004542 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004546:	f000 fa75 	bl	8004a34 <vTaskStartScheduler>
  
  return osOK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	bd80      	pop	{r7, pc}

08004550 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004552:	b089      	sub	sp, #36	@ 0x24
 8004554:	af04      	add	r7, sp, #16
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d020      	beq.n	80045a4 <osThreadCreate+0x54>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d01c      	beq.n	80045a4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685c      	ldr	r4, [r3, #4]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691e      	ldr	r6, [r3, #16]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800457c:	4618      	mov	r0, r3
 800457e:	f7ff ffc9 	bl	8004514 <makeFreeRtosPriority>
 8004582:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800458c:	9202      	str	r2, [sp, #8]
 800458e:	9301      	str	r3, [sp, #4]
 8004590:	9100      	str	r1, [sp, #0]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	4632      	mov	r2, r6
 8004596:	4629      	mov	r1, r5
 8004598:	4620      	mov	r0, r4
 800459a:	f000 f89c 	bl	80046d6 <xTaskCreateStatic>
 800459e:	4603      	mov	r3, r0
 80045a0:	60fb      	str	r3, [r7, #12]
 80045a2:	e01c      	b.n	80045de <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685c      	ldr	r4, [r3, #4]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045b0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7ff ffab 	bl	8004514 <makeFreeRtosPriority>
 80045be:	4602      	mov	r2, r0
 80045c0:	f107 030c 	add.w	r3, r7, #12
 80045c4:	9301      	str	r3, [sp, #4]
 80045c6:	9200      	str	r2, [sp, #0]
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	4632      	mov	r2, r6
 80045cc:	4629      	mov	r1, r5
 80045ce:	4620      	mov	r0, r4
 80045d0:	f000 f8e1 	bl	8004796 <xTaskCreate>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d001      	beq.n	80045de <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80045da:	2300      	movs	r3, #0
 80045dc:	e000      	b.n	80045e0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80045de:	68fb      	ldr	r3, [r7, #12]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080045e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f103 0208 	add.w	r2, r3, #8
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004600:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f103 0208 	add.w	r2, r3, #8
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f103 0208 	add.w	r2, r3, #8
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	bc80      	pop	{r7}
 8004624:	4770      	bx	lr

08004626 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004626:	b480      	push	{r7}
 8004628:	b083      	sub	sp, #12
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	bc80      	pop	{r7}
 800463c:	4770      	bx	lr

0800463e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800463e:	b480      	push	{r7}
 8004640:	b085      	sub	sp, #20
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
 8004646:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	1c5a      	adds	r2, r3, #1
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	601a      	str	r2, [r3, #0]
}
 800467a:	bf00      	nop
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	bc80      	pop	{r7}
 8004682:	4770      	bx	lr

08004684 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6892      	ldr	r2, [r2, #8]
 800469a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	6852      	ldr	r2, [r2, #4]
 80046a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d103      	bne.n	80046b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689a      	ldr	r2, [r3, #8]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	1e5a      	subs	r2, r3, #1
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3714      	adds	r7, #20
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bc80      	pop	{r7}
 80046d4:	4770      	bx	lr

080046d6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b08e      	sub	sp, #56	@ 0x38
 80046da:	af04      	add	r7, sp, #16
 80046dc:	60f8      	str	r0, [r7, #12]
 80046de:	60b9      	str	r1, [r7, #8]
 80046e0:	607a      	str	r2, [r7, #4]
 80046e2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80046e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10b      	bne.n	8004702 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80046ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ee:	f383 8811 	msr	BASEPRI, r3
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	f3bf 8f4f 	dsb	sy
 80046fa:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80046fc:	bf00      	nop
 80046fe:	bf00      	nop
 8004700:	e7fd      	b.n	80046fe <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10b      	bne.n	8004720 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800470c:	f383 8811 	msr	BASEPRI, r3
 8004710:	f3bf 8f6f 	isb	sy
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	61fb      	str	r3, [r7, #28]
}
 800471a:	bf00      	nop
 800471c:	bf00      	nop
 800471e:	e7fd      	b.n	800471c <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004720:	23a0      	movs	r3, #160	@ 0xa0
 8004722:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	2ba0      	cmp	r3, #160	@ 0xa0
 8004728:	d00b      	beq.n	8004742 <xTaskCreateStatic+0x6c>
	__asm volatile
 800472a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800472e:	f383 8811 	msr	BASEPRI, r3
 8004732:	f3bf 8f6f 	isb	sy
 8004736:	f3bf 8f4f 	dsb	sy
 800473a:	61bb      	str	r3, [r7, #24]
}
 800473c:	bf00      	nop
 800473e:	bf00      	nop
 8004740:	e7fd      	b.n	800473e <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004742:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004746:	2b00      	cmp	r3, #0
 8004748:	d01e      	beq.n	8004788 <xTaskCreateStatic+0xb2>
 800474a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800474c:	2b00      	cmp	r3, #0
 800474e:	d01b      	beq.n	8004788 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004752:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004756:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004758:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800475a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475c:	2202      	movs	r2, #2
 800475e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004762:	2300      	movs	r3, #0
 8004764:	9303      	str	r3, [sp, #12]
 8004766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004768:	9302      	str	r3, [sp, #8]
 800476a:	f107 0314 	add.w	r3, r7, #20
 800476e:	9301      	str	r3, [sp, #4]
 8004770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004772:	9300      	str	r3, [sp, #0]
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	68b9      	ldr	r1, [r7, #8]
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f000 f850 	bl	8004820 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004780:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004782:	f000 f8ed 	bl	8004960 <prvAddNewTaskToReadyList>
 8004786:	e001      	b.n	800478c <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004788:	2300      	movs	r3, #0
 800478a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800478c:	697b      	ldr	r3, [r7, #20]
	}
 800478e:	4618      	mov	r0, r3
 8004790:	3728      	adds	r7, #40	@ 0x28
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004796:	b580      	push	{r7, lr}
 8004798:	b08c      	sub	sp, #48	@ 0x30
 800479a:	af04      	add	r7, sp, #16
 800479c:	60f8      	str	r0, [r7, #12]
 800479e:	60b9      	str	r1, [r7, #8]
 80047a0:	603b      	str	r3, [r7, #0]
 80047a2:	4613      	mov	r3, r2
 80047a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80047a6:	88fb      	ldrh	r3, [r7, #6]
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 fe00 	bl	80053b0 <pvPortMalloc>
 80047b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00e      	beq.n	80047d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80047b8:	20a0      	movs	r0, #160	@ 0xa0
 80047ba:	f000 fdf9 	bl	80053b0 <pvPortMalloc>
 80047be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	697a      	ldr	r2, [r7, #20]
 80047ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80047cc:	e005      	b.n	80047da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80047ce:	6978      	ldr	r0, [r7, #20]
 80047d0:	f000 febc 	bl	800554c <vPortFree>
 80047d4:	e001      	b.n	80047da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80047d6:	2300      	movs	r3, #0
 80047d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d017      	beq.n	8004810 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80047e8:	88fa      	ldrh	r2, [r7, #6]
 80047ea:	2300      	movs	r3, #0
 80047ec:	9303      	str	r3, [sp, #12]
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	9302      	str	r3, [sp, #8]
 80047f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047f4:	9301      	str	r3, [sp, #4]
 80047f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f8:	9300      	str	r3, [sp, #0]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	68b9      	ldr	r1, [r7, #8]
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 f80e 	bl	8004820 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004804:	69f8      	ldr	r0, [r7, #28]
 8004806:	f000 f8ab 	bl	8004960 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800480a:	2301      	movs	r3, #1
 800480c:	61bb      	str	r3, [r7, #24]
 800480e:	e002      	b.n	8004816 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004810:	f04f 33ff 	mov.w	r3, #4294967295
 8004814:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004816:	69bb      	ldr	r3, [r7, #24]
	}
 8004818:	4618      	mov	r0, r3
 800481a:	3720      	adds	r7, #32
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b088      	sub	sp, #32
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
 800482c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800482e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004830:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004838:	3b01      	subs	r3, #1
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4413      	add	r3, r2
 800483e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	f023 0307 	bic.w	r3, r3, #7
 8004846:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00b      	beq.n	800486a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004856:	f383 8811 	msr	BASEPRI, r3
 800485a:	f3bf 8f6f 	isb	sy
 800485e:	f3bf 8f4f 	dsb	sy
 8004862:	617b      	str	r3, [r7, #20]
}
 8004864:	bf00      	nop
 8004866:	bf00      	nop
 8004868:	e7fd      	b.n	8004866 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d01f      	beq.n	80048b0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004870:	2300      	movs	r3, #0
 8004872:	61fb      	str	r3, [r7, #28]
 8004874:	e012      	b.n	800489c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	4413      	add	r3, r2
 800487c:	7819      	ldrb	r1, [r3, #0]
 800487e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	4413      	add	r3, r2
 8004884:	3334      	adds	r3, #52	@ 0x34
 8004886:	460a      	mov	r2, r1
 8004888:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	4413      	add	r3, r2
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d006      	beq.n	80048a4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	3301      	adds	r3, #1
 800489a:	61fb      	str	r3, [r7, #28]
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	2b0f      	cmp	r3, #15
 80048a0:	d9e9      	bls.n	8004876 <prvInitialiseNewTask+0x56>
 80048a2:	e000      	b.n	80048a6 <prvInitialiseNewTask+0x86>
			{
				break;
 80048a4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80048a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048ae:	e003      	b.n	80048b8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80048b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80048b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ba:	2b06      	cmp	r3, #6
 80048bc:	d901      	bls.n	80048c2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80048be:	2306      	movs	r3, #6
 80048c0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80048c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048c6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80048c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048cc:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80048ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d0:	2200      	movs	r2, #0
 80048d2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80048d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d6:	3304      	adds	r3, #4
 80048d8:	4618      	mov	r0, r3
 80048da:	f7ff fea4 	bl	8004626 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80048de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e0:	3318      	adds	r3, #24
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7ff fe9f 	bl	8004626 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80048e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048ec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f0:	f1c3 0207 	rsb	r2, r3, #7
 80048f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80048f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048fc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80048fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004900:	2200      	movs	r2, #0
 8004902:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004908:	2200      	movs	r2, #0
 800490a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800490e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004910:	334c      	adds	r3, #76	@ 0x4c
 8004912:	224c      	movs	r2, #76	@ 0x4c
 8004914:	2100      	movs	r1, #0
 8004916:	4618      	mov	r0, r3
 8004918:	f000 ff36 	bl	8005788 <memset>
 800491c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800491e:	4a0d      	ldr	r2, [pc, #52]	@ (8004954 <prvInitialiseNewTask+0x134>)
 8004920:	651a      	str	r2, [r3, #80]	@ 0x50
 8004922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004924:	4a0c      	ldr	r2, [pc, #48]	@ (8004958 <prvInitialiseNewTask+0x138>)
 8004926:	655a      	str	r2, [r3, #84]	@ 0x54
 8004928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800492a:	4a0c      	ldr	r2, [pc, #48]	@ (800495c <prvInitialiseNewTask+0x13c>)
 800492c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	68f9      	ldr	r1, [r7, #12]
 8004932:	69b8      	ldr	r0, [r7, #24]
 8004934:	f000 fb8c 	bl	8005050 <pxPortInitialiseStack>
 8004938:	4602      	mov	r2, r0
 800493a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800493c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800493e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004940:	2b00      	cmp	r3, #0
 8004942:	d002      	beq.n	800494a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004946:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004948:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800494a:	bf00      	nop
 800494c:	3720      	adds	r7, #32
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	200011fc 	.word	0x200011fc
 8004958:	20001264 	.word	0x20001264
 800495c:	200012cc 	.word	0x200012cc

08004960 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004968:	f000 fc60 	bl	800522c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800496c:	4b2a      	ldr	r3, [pc, #168]	@ (8004a18 <prvAddNewTaskToReadyList+0xb8>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	3301      	adds	r3, #1
 8004972:	4a29      	ldr	r2, [pc, #164]	@ (8004a18 <prvAddNewTaskToReadyList+0xb8>)
 8004974:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004976:	4b29      	ldr	r3, [pc, #164]	@ (8004a1c <prvAddNewTaskToReadyList+0xbc>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d109      	bne.n	8004992 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800497e:	4a27      	ldr	r2, [pc, #156]	@ (8004a1c <prvAddNewTaskToReadyList+0xbc>)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004984:	4b24      	ldr	r3, [pc, #144]	@ (8004a18 <prvAddNewTaskToReadyList+0xb8>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d110      	bne.n	80049ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800498c:	f000 fa9c 	bl	8004ec8 <prvInitialiseTaskLists>
 8004990:	e00d      	b.n	80049ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004992:	4b23      	ldr	r3, [pc, #140]	@ (8004a20 <prvAddNewTaskToReadyList+0xc0>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d109      	bne.n	80049ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800499a:	4b20      	ldr	r3, [pc, #128]	@ (8004a1c <prvAddNewTaskToReadyList+0xbc>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d802      	bhi.n	80049ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80049a8:	4a1c      	ldr	r2, [pc, #112]	@ (8004a1c <prvAddNewTaskToReadyList+0xbc>)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80049ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004a24 <prvAddNewTaskToReadyList+0xc4>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	3301      	adds	r3, #1
 80049b4:	4a1b      	ldr	r2, [pc, #108]	@ (8004a24 <prvAddNewTaskToReadyList+0xc4>)
 80049b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049bc:	2201      	movs	r2, #1
 80049be:	409a      	lsls	r2, r3
 80049c0:	4b19      	ldr	r3, [pc, #100]	@ (8004a28 <prvAddNewTaskToReadyList+0xc8>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	4a18      	ldr	r2, [pc, #96]	@ (8004a28 <prvAddNewTaskToReadyList+0xc8>)
 80049c8:	6013      	str	r3, [r2, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049ce:	4613      	mov	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4413      	add	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4a15      	ldr	r2, [pc, #84]	@ (8004a2c <prvAddNewTaskToReadyList+0xcc>)
 80049d8:	441a      	add	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	3304      	adds	r3, #4
 80049de:	4619      	mov	r1, r3
 80049e0:	4610      	mov	r0, r2
 80049e2:	f7ff fe2c 	bl	800463e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80049e6:	f000 fc51 	bl	800528c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80049ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004a20 <prvAddNewTaskToReadyList+0xc0>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00e      	beq.n	8004a10 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80049f2:	4b0a      	ldr	r3, [pc, #40]	@ (8004a1c <prvAddNewTaskToReadyList+0xbc>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d207      	bcs.n	8004a10 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004a00:	4b0b      	ldr	r3, [pc, #44]	@ (8004a30 <prvAddNewTaskToReadyList+0xd0>)
 8004a02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	f3bf 8f4f 	dsb	sy
 8004a0c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a10:	bf00      	nop
 8004a12:	3708      	adds	r7, #8
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	200005a8 	.word	0x200005a8
 8004a1c:	200004a8 	.word	0x200004a8
 8004a20:	200005b4 	.word	0x200005b4
 8004a24:	200005c4 	.word	0x200005c4
 8004a28:	200005b0 	.word	0x200005b0
 8004a2c:	200004ac 	.word	0x200004ac
 8004a30:	e000ed04 	.word	0xe000ed04

08004a34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b08a      	sub	sp, #40	@ 0x28
 8004a38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004a42:	463a      	mov	r2, r7
 8004a44:	1d39      	adds	r1, r7, #4
 8004a46:	f107 0308 	add.w	r3, r7, #8
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7fc fa62 	bl	8000f14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004a50:	6839      	ldr	r1, [r7, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	9202      	str	r2, [sp, #8]
 8004a58:	9301      	str	r3, [sp, #4]
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	2300      	movs	r3, #0
 8004a60:	460a      	mov	r2, r1
 8004a62:	4921      	ldr	r1, [pc, #132]	@ (8004ae8 <vTaskStartScheduler+0xb4>)
 8004a64:	4821      	ldr	r0, [pc, #132]	@ (8004aec <vTaskStartScheduler+0xb8>)
 8004a66:	f7ff fe36 	bl	80046d6 <xTaskCreateStatic>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	4a20      	ldr	r2, [pc, #128]	@ (8004af0 <vTaskStartScheduler+0xbc>)
 8004a6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004a70:	4b1f      	ldr	r3, [pc, #124]	@ (8004af0 <vTaskStartScheduler+0xbc>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d002      	beq.n	8004a7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	617b      	str	r3, [r7, #20]
 8004a7c:	e001      	b.n	8004a82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d11b      	bne.n	8004ac0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a8c:	f383 8811 	msr	BASEPRI, r3
 8004a90:	f3bf 8f6f 	isb	sy
 8004a94:	f3bf 8f4f 	dsb	sy
 8004a98:	613b      	str	r3, [r7, #16]
}
 8004a9a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004a9c:	4b15      	ldr	r3, [pc, #84]	@ (8004af4 <vTaskStartScheduler+0xc0>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	334c      	adds	r3, #76	@ 0x4c
 8004aa2:	4a15      	ldr	r2, [pc, #84]	@ (8004af8 <vTaskStartScheduler+0xc4>)
 8004aa4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004aa6:	4b15      	ldr	r3, [pc, #84]	@ (8004afc <vTaskStartScheduler+0xc8>)
 8004aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8004aac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004aae:	4b14      	ldr	r3, [pc, #80]	@ (8004b00 <vTaskStartScheduler+0xcc>)
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004ab4:	4b13      	ldr	r3, [pc, #76]	@ (8004b04 <vTaskStartScheduler+0xd0>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004aba:	f000 fb45 	bl	8005148 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004abe:	e00f      	b.n	8004ae0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac6:	d10b      	bne.n	8004ae0 <vTaskStartScheduler+0xac>
	__asm volatile
 8004ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004acc:	f383 8811 	msr	BASEPRI, r3
 8004ad0:	f3bf 8f6f 	isb	sy
 8004ad4:	f3bf 8f4f 	dsb	sy
 8004ad8:	60fb      	str	r3, [r7, #12]
}
 8004ada:	bf00      	nop
 8004adc:	bf00      	nop
 8004ade:	e7fd      	b.n	8004adc <vTaskStartScheduler+0xa8>
}
 8004ae0:	bf00      	nop
 8004ae2:	3718      	adds	r7, #24
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	080059a0 	.word	0x080059a0
 8004aec:	08004e99 	.word	0x08004e99
 8004af0:	200005cc 	.word	0x200005cc
 8004af4:	200004a8 	.word	0x200004a8
 8004af8:	20000018 	.word	0x20000018
 8004afc:	200005c8 	.word	0x200005c8
 8004b00:	200005b4 	.word	0x200005b4
 8004b04:	200005ac 	.word	0x200005ac

08004b08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004b08:	b480      	push	{r7}
 8004b0a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004b0c:	4b04      	ldr	r3, [pc, #16]	@ (8004b20 <vTaskSuspendAll+0x18>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	3301      	adds	r3, #1
 8004b12:	4a03      	ldr	r2, [pc, #12]	@ (8004b20 <vTaskSuspendAll+0x18>)
 8004b14:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004b16:	bf00      	nop
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bc80      	pop	{r7}
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	200005d0 	.word	0x200005d0

08004b24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004b32:	4b42      	ldr	r3, [pc, #264]	@ (8004c3c <xTaskResumeAll+0x118>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10b      	bne.n	8004b52 <xTaskResumeAll+0x2e>
	__asm volatile
 8004b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b3e:	f383 8811 	msr	BASEPRI, r3
 8004b42:	f3bf 8f6f 	isb	sy
 8004b46:	f3bf 8f4f 	dsb	sy
 8004b4a:	603b      	str	r3, [r7, #0]
}
 8004b4c:	bf00      	nop
 8004b4e:	bf00      	nop
 8004b50:	e7fd      	b.n	8004b4e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004b52:	f000 fb6b 	bl	800522c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004b56:	4b39      	ldr	r3, [pc, #228]	@ (8004c3c <xTaskResumeAll+0x118>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	4a37      	ldr	r2, [pc, #220]	@ (8004c3c <xTaskResumeAll+0x118>)
 8004b5e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b60:	4b36      	ldr	r3, [pc, #216]	@ (8004c3c <xTaskResumeAll+0x118>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d161      	bne.n	8004c2c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004b68:	4b35      	ldr	r3, [pc, #212]	@ (8004c40 <xTaskResumeAll+0x11c>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d05d      	beq.n	8004c2c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b70:	e02e      	b.n	8004bd0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b72:	4b34      	ldr	r3, [pc, #208]	@ (8004c44 <xTaskResumeAll+0x120>)
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	3318      	adds	r3, #24
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7ff fd80 	bl	8004684 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	3304      	adds	r3, #4
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7ff fd7b 	bl	8004684 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b92:	2201      	movs	r2, #1
 8004b94:	409a      	lsls	r2, r3
 8004b96:	4b2c      	ldr	r3, [pc, #176]	@ (8004c48 <xTaskResumeAll+0x124>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	4a2a      	ldr	r2, [pc, #168]	@ (8004c48 <xTaskResumeAll+0x124>)
 8004b9e:	6013      	str	r3, [r2, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4413      	add	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4a27      	ldr	r2, [pc, #156]	@ (8004c4c <xTaskResumeAll+0x128>)
 8004bae:	441a      	add	r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	3304      	adds	r3, #4
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	4610      	mov	r0, r2
 8004bb8:	f7ff fd41 	bl	800463e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bc0:	4b23      	ldr	r3, [pc, #140]	@ (8004c50 <xTaskResumeAll+0x12c>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d302      	bcc.n	8004bd0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004bca:	4b22      	ldr	r3, [pc, #136]	@ (8004c54 <xTaskResumeAll+0x130>)
 8004bcc:	2201      	movs	r2, #1
 8004bce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004bd0:	4b1c      	ldr	r3, [pc, #112]	@ (8004c44 <xTaskResumeAll+0x120>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1cc      	bne.n	8004b72 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d001      	beq.n	8004be2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004bde:	f000 fa17 	bl	8005010 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004be2:	4b1d      	ldr	r3, [pc, #116]	@ (8004c58 <xTaskResumeAll+0x134>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d010      	beq.n	8004c10 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004bee:	f000 f837 	bl	8004c60 <xTaskIncrementTick>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d002      	beq.n	8004bfe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004bf8:	4b16      	ldr	r3, [pc, #88]	@ (8004c54 <xTaskResumeAll+0x130>)
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	3b01      	subs	r3, #1
 8004c02:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1f1      	bne.n	8004bee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004c0a:	4b13      	ldr	r3, [pc, #76]	@ (8004c58 <xTaskResumeAll+0x134>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004c10:	4b10      	ldr	r3, [pc, #64]	@ (8004c54 <xTaskResumeAll+0x130>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d009      	beq.n	8004c2c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8004c5c <xTaskResumeAll+0x138>)
 8004c1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	f3bf 8f4f 	dsb	sy
 8004c28:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c2c:	f000 fb2e 	bl	800528c <vPortExitCritical>

	return xAlreadyYielded;
 8004c30:	68bb      	ldr	r3, [r7, #8]
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	200005d0 	.word	0x200005d0
 8004c40:	200005a8 	.word	0x200005a8
 8004c44:	20000568 	.word	0x20000568
 8004c48:	200005b0 	.word	0x200005b0
 8004c4c:	200004ac 	.word	0x200004ac
 8004c50:	200004a8 	.word	0x200004a8
 8004c54:	200005bc 	.word	0x200005bc
 8004c58:	200005b8 	.word	0x200005b8
 8004c5c:	e000ed04 	.word	0xe000ed04

08004c60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004c66:	2300      	movs	r3, #0
 8004c68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c6a:	4b4f      	ldr	r3, [pc, #316]	@ (8004da8 <xTaskIncrementTick+0x148>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f040 808f 	bne.w	8004d92 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004c74:	4b4d      	ldr	r3, [pc, #308]	@ (8004dac <xTaskIncrementTick+0x14c>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004c7c:	4a4b      	ldr	r2, [pc, #300]	@ (8004dac <xTaskIncrementTick+0x14c>)
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d121      	bne.n	8004ccc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004c88:	4b49      	ldr	r3, [pc, #292]	@ (8004db0 <xTaskIncrementTick+0x150>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00b      	beq.n	8004caa <xTaskIncrementTick+0x4a>
	__asm volatile
 8004c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c96:	f383 8811 	msr	BASEPRI, r3
 8004c9a:	f3bf 8f6f 	isb	sy
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	603b      	str	r3, [r7, #0]
}
 8004ca4:	bf00      	nop
 8004ca6:	bf00      	nop
 8004ca8:	e7fd      	b.n	8004ca6 <xTaskIncrementTick+0x46>
 8004caa:	4b41      	ldr	r3, [pc, #260]	@ (8004db0 <xTaskIncrementTick+0x150>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	60fb      	str	r3, [r7, #12]
 8004cb0:	4b40      	ldr	r3, [pc, #256]	@ (8004db4 <xTaskIncrementTick+0x154>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a3e      	ldr	r2, [pc, #248]	@ (8004db0 <xTaskIncrementTick+0x150>)
 8004cb6:	6013      	str	r3, [r2, #0]
 8004cb8:	4a3e      	ldr	r2, [pc, #248]	@ (8004db4 <xTaskIncrementTick+0x154>)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6013      	str	r3, [r2, #0]
 8004cbe:	4b3e      	ldr	r3, [pc, #248]	@ (8004db8 <xTaskIncrementTick+0x158>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	4a3c      	ldr	r2, [pc, #240]	@ (8004db8 <xTaskIncrementTick+0x158>)
 8004cc6:	6013      	str	r3, [r2, #0]
 8004cc8:	f000 f9a2 	bl	8005010 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ccc:	4b3b      	ldr	r3, [pc, #236]	@ (8004dbc <xTaskIncrementTick+0x15c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d348      	bcc.n	8004d68 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cd6:	4b36      	ldr	r3, [pc, #216]	@ (8004db0 <xTaskIncrementTick+0x150>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d104      	bne.n	8004cea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ce0:	4b36      	ldr	r3, [pc, #216]	@ (8004dbc <xTaskIncrementTick+0x15c>)
 8004ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ce6:	601a      	str	r2, [r3, #0]
					break;
 8004ce8:	e03e      	b.n	8004d68 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cea:	4b31      	ldr	r3, [pc, #196]	@ (8004db0 <xTaskIncrementTick+0x150>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d203      	bcs.n	8004d0a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004d02:	4a2e      	ldr	r2, [pc, #184]	@ (8004dbc <xTaskIncrementTick+0x15c>)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004d08:	e02e      	b.n	8004d68 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7ff fcb8 	bl	8004684 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d004      	beq.n	8004d26 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	3318      	adds	r3, #24
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7ff fcaf 	bl	8004684 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	409a      	lsls	r2, r3
 8004d2e:	4b24      	ldr	r3, [pc, #144]	@ (8004dc0 <xTaskIncrementTick+0x160>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	4a22      	ldr	r2, [pc, #136]	@ (8004dc0 <xTaskIncrementTick+0x160>)
 8004d36:	6013      	str	r3, [r2, #0]
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4a1f      	ldr	r2, [pc, #124]	@ (8004dc4 <xTaskIncrementTick+0x164>)
 8004d46:	441a      	add	r2, r3
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	3304      	adds	r3, #4
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	4610      	mov	r0, r2
 8004d50:	f7ff fc75 	bl	800463e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d58:	4b1b      	ldr	r3, [pc, #108]	@ (8004dc8 <xTaskIncrementTick+0x168>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d3b9      	bcc.n	8004cd6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004d62:	2301      	movs	r3, #1
 8004d64:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d66:	e7b6      	b.n	8004cd6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004d68:	4b17      	ldr	r3, [pc, #92]	@ (8004dc8 <xTaskIncrementTick+0x168>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d6e:	4915      	ldr	r1, [pc, #84]	@ (8004dc4 <xTaskIncrementTick+0x164>)
 8004d70:	4613      	mov	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	440b      	add	r3, r1
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d901      	bls.n	8004d84 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004d80:	2301      	movs	r3, #1
 8004d82:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004d84:	4b11      	ldr	r3, [pc, #68]	@ (8004dcc <xTaskIncrementTick+0x16c>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d007      	beq.n	8004d9c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	617b      	str	r3, [r7, #20]
 8004d90:	e004      	b.n	8004d9c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004d92:	4b0f      	ldr	r3, [pc, #60]	@ (8004dd0 <xTaskIncrementTick+0x170>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	3301      	adds	r3, #1
 8004d98:	4a0d      	ldr	r2, [pc, #52]	@ (8004dd0 <xTaskIncrementTick+0x170>)
 8004d9a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004d9c:	697b      	ldr	r3, [r7, #20]
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3718      	adds	r7, #24
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	200005d0 	.word	0x200005d0
 8004dac:	200005ac 	.word	0x200005ac
 8004db0:	20000560 	.word	0x20000560
 8004db4:	20000564 	.word	0x20000564
 8004db8:	200005c0 	.word	0x200005c0
 8004dbc:	200005c8 	.word	0x200005c8
 8004dc0:	200005b0 	.word	0x200005b0
 8004dc4:	200004ac 	.word	0x200004ac
 8004dc8:	200004a8 	.word	0x200004a8
 8004dcc:	200005bc 	.word	0x200005bc
 8004dd0:	200005b8 	.word	0x200005b8

08004dd4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b087      	sub	sp, #28
 8004dd8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004dda:	4b29      	ldr	r3, [pc, #164]	@ (8004e80 <vTaskSwitchContext+0xac>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004de2:	4b28      	ldr	r3, [pc, #160]	@ (8004e84 <vTaskSwitchContext+0xb0>)
 8004de4:	2201      	movs	r2, #1
 8004de6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004de8:	e045      	b.n	8004e76 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004dea:	4b26      	ldr	r3, [pc, #152]	@ (8004e84 <vTaskSwitchContext+0xb0>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004df0:	4b25      	ldr	r3, [pc, #148]	@ (8004e88 <vTaskSwitchContext+0xb4>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	fab3 f383 	clz	r3, r3
 8004dfc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004dfe:	7afb      	ldrb	r3, [r7, #11]
 8004e00:	f1c3 031f 	rsb	r3, r3, #31
 8004e04:	617b      	str	r3, [r7, #20]
 8004e06:	4921      	ldr	r1, [pc, #132]	@ (8004e8c <vTaskSwitchContext+0xb8>)
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	4413      	add	r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	440b      	add	r3, r1
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10b      	bne.n	8004e32 <vTaskSwitchContext+0x5e>
	__asm volatile
 8004e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e1e:	f383 8811 	msr	BASEPRI, r3
 8004e22:	f3bf 8f6f 	isb	sy
 8004e26:	f3bf 8f4f 	dsb	sy
 8004e2a:	607b      	str	r3, [r7, #4]
}
 8004e2c:	bf00      	nop
 8004e2e:	bf00      	nop
 8004e30:	e7fd      	b.n	8004e2e <vTaskSwitchContext+0x5a>
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	4613      	mov	r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4413      	add	r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4a13      	ldr	r2, [pc, #76]	@ (8004e8c <vTaskSwitchContext+0xb8>)
 8004e3e:	4413      	add	r3, r2
 8004e40:	613b      	str	r3, [r7, #16]
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	605a      	str	r2, [r3, #4]
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	3308      	adds	r3, #8
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d104      	bne.n	8004e62 <vTaskSwitchContext+0x8e>
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	685a      	ldr	r2, [r3, #4]
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	605a      	str	r2, [r3, #4]
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	4a09      	ldr	r2, [pc, #36]	@ (8004e90 <vTaskSwitchContext+0xbc>)
 8004e6a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004e6c:	4b08      	ldr	r3, [pc, #32]	@ (8004e90 <vTaskSwitchContext+0xbc>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	334c      	adds	r3, #76	@ 0x4c
 8004e72:	4a08      	ldr	r2, [pc, #32]	@ (8004e94 <vTaskSwitchContext+0xc0>)
 8004e74:	6013      	str	r3, [r2, #0]
}
 8004e76:	bf00      	nop
 8004e78:	371c      	adds	r7, #28
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bc80      	pop	{r7}
 8004e7e:	4770      	bx	lr
 8004e80:	200005d0 	.word	0x200005d0
 8004e84:	200005bc 	.word	0x200005bc
 8004e88:	200005b0 	.word	0x200005b0
 8004e8c:	200004ac 	.word	0x200004ac
 8004e90:	200004a8 	.word	0x200004a8
 8004e94:	20000018 	.word	0x20000018

08004e98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ea0:	f000 f852 	bl	8004f48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ea4:	4b06      	ldr	r3, [pc, #24]	@ (8004ec0 <prvIdleTask+0x28>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d9f9      	bls.n	8004ea0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004eac:	4b05      	ldr	r3, [pc, #20]	@ (8004ec4 <prvIdleTask+0x2c>)
 8004eae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	f3bf 8f4f 	dsb	sy
 8004eb8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004ebc:	e7f0      	b.n	8004ea0 <prvIdleTask+0x8>
 8004ebe:	bf00      	nop
 8004ec0:	200004ac 	.word	0x200004ac
 8004ec4:	e000ed04 	.word	0xe000ed04

08004ec8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ece:	2300      	movs	r3, #0
 8004ed0:	607b      	str	r3, [r7, #4]
 8004ed2:	e00c      	b.n	8004eee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4413      	add	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4a12      	ldr	r2, [pc, #72]	@ (8004f28 <prvInitialiseTaskLists+0x60>)
 8004ee0:	4413      	add	r3, r2
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7ff fb80 	bl	80045e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	3301      	adds	r3, #1
 8004eec:	607b      	str	r3, [r7, #4]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b06      	cmp	r3, #6
 8004ef2:	d9ef      	bls.n	8004ed4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ef4:	480d      	ldr	r0, [pc, #52]	@ (8004f2c <prvInitialiseTaskLists+0x64>)
 8004ef6:	f7ff fb77 	bl	80045e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004efa:	480d      	ldr	r0, [pc, #52]	@ (8004f30 <prvInitialiseTaskLists+0x68>)
 8004efc:	f7ff fb74 	bl	80045e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004f00:	480c      	ldr	r0, [pc, #48]	@ (8004f34 <prvInitialiseTaskLists+0x6c>)
 8004f02:	f7ff fb71 	bl	80045e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004f06:	480c      	ldr	r0, [pc, #48]	@ (8004f38 <prvInitialiseTaskLists+0x70>)
 8004f08:	f7ff fb6e 	bl	80045e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004f0c:	480b      	ldr	r0, [pc, #44]	@ (8004f3c <prvInitialiseTaskLists+0x74>)
 8004f0e:	f7ff fb6b 	bl	80045e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004f12:	4b0b      	ldr	r3, [pc, #44]	@ (8004f40 <prvInitialiseTaskLists+0x78>)
 8004f14:	4a05      	ldr	r2, [pc, #20]	@ (8004f2c <prvInitialiseTaskLists+0x64>)
 8004f16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004f18:	4b0a      	ldr	r3, [pc, #40]	@ (8004f44 <prvInitialiseTaskLists+0x7c>)
 8004f1a:	4a05      	ldr	r2, [pc, #20]	@ (8004f30 <prvInitialiseTaskLists+0x68>)
 8004f1c:	601a      	str	r2, [r3, #0]
}
 8004f1e:	bf00      	nop
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	200004ac 	.word	0x200004ac
 8004f2c:	20000538 	.word	0x20000538
 8004f30:	2000054c 	.word	0x2000054c
 8004f34:	20000568 	.word	0x20000568
 8004f38:	2000057c 	.word	0x2000057c
 8004f3c:	20000594 	.word	0x20000594
 8004f40:	20000560 	.word	0x20000560
 8004f44:	20000564 	.word	0x20000564

08004f48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f4e:	e019      	b.n	8004f84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004f50:	f000 f96c 	bl	800522c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f54:	4b10      	ldr	r3, [pc, #64]	@ (8004f98 <prvCheckTasksWaitingTermination+0x50>)
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	3304      	adds	r3, #4
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7ff fb8f 	bl	8004684 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004f66:	4b0d      	ldr	r3, [pc, #52]	@ (8004f9c <prvCheckTasksWaitingTermination+0x54>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	4a0b      	ldr	r2, [pc, #44]	@ (8004f9c <prvCheckTasksWaitingTermination+0x54>)
 8004f6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004f70:	4b0b      	ldr	r3, [pc, #44]	@ (8004fa0 <prvCheckTasksWaitingTermination+0x58>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	3b01      	subs	r3, #1
 8004f76:	4a0a      	ldr	r2, [pc, #40]	@ (8004fa0 <prvCheckTasksWaitingTermination+0x58>)
 8004f78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004f7a:	f000 f987 	bl	800528c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f810 	bl	8004fa4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f84:	4b06      	ldr	r3, [pc, #24]	@ (8004fa0 <prvCheckTasksWaitingTermination+0x58>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1e1      	bne.n	8004f50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004f8c:	bf00      	nop
 8004f8e:	bf00      	nop
 8004f90:	3708      	adds	r7, #8
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	2000057c 	.word	0x2000057c
 8004f9c:	200005a8 	.word	0x200005a8
 8004fa0:	20000590 	.word	0x20000590

08004fa4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	334c      	adds	r3, #76	@ 0x4c
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 fbf1 	bl	8005798 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d108      	bne.n	8004fd2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f000 fac1 	bl	800554c <vPortFree>
				vPortFree( pxTCB );
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 fabe 	bl	800554c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004fd0:	e019      	b.n	8005006 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d103      	bne.n	8004fe4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 fab5 	bl	800554c <vPortFree>
	}
 8004fe2:	e010      	b.n	8005006 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d00b      	beq.n	8005006 <prvDeleteTCB+0x62>
	__asm volatile
 8004fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ff2:	f383 8811 	msr	BASEPRI, r3
 8004ff6:	f3bf 8f6f 	isb	sy
 8004ffa:	f3bf 8f4f 	dsb	sy
 8004ffe:	60fb      	str	r3, [r7, #12]
}
 8005000:	bf00      	nop
 8005002:	bf00      	nop
 8005004:	e7fd      	b.n	8005002 <prvDeleteTCB+0x5e>
	}
 8005006:	bf00      	nop
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
	...

08005010 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005016:	4b0c      	ldr	r3, [pc, #48]	@ (8005048 <prvResetNextTaskUnblockTime+0x38>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d104      	bne.n	800502a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005020:	4b0a      	ldr	r3, [pc, #40]	@ (800504c <prvResetNextTaskUnblockTime+0x3c>)
 8005022:	f04f 32ff 	mov.w	r2, #4294967295
 8005026:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005028:	e008      	b.n	800503c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800502a:	4b07      	ldr	r3, [pc, #28]	@ (8005048 <prvResetNextTaskUnblockTime+0x38>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	4a04      	ldr	r2, [pc, #16]	@ (800504c <prvResetNextTaskUnblockTime+0x3c>)
 800503a:	6013      	str	r3, [r2, #0]
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	bc80      	pop	{r7}
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	20000560 	.word	0x20000560
 800504c:	200005c8 	.word	0x200005c8

08005050 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	3b04      	subs	r3, #4
 8005060:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005068:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	3b04      	subs	r3, #4
 800506e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	f023 0201 	bic.w	r2, r3, #1
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	3b04      	subs	r3, #4
 800507e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005080:	4a08      	ldr	r2, [pc, #32]	@ (80050a4 <pxPortInitialiseStack+0x54>)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	3b14      	subs	r3, #20
 800508a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	3b20      	subs	r3, #32
 8005096:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005098:	68fb      	ldr	r3, [r7, #12]
}
 800509a:	4618      	mov	r0, r3
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	bc80      	pop	{r7}
 80050a2:	4770      	bx	lr
 80050a4:	080050a9 	.word	0x080050a9

080050a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80050ae:	2300      	movs	r3, #0
 80050b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80050b2:	4b12      	ldr	r3, [pc, #72]	@ (80050fc <prvTaskExitError+0x54>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ba:	d00b      	beq.n	80050d4 <prvTaskExitError+0x2c>
	__asm volatile
 80050bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c0:	f383 8811 	msr	BASEPRI, r3
 80050c4:	f3bf 8f6f 	isb	sy
 80050c8:	f3bf 8f4f 	dsb	sy
 80050cc:	60fb      	str	r3, [r7, #12]
}
 80050ce:	bf00      	nop
 80050d0:	bf00      	nop
 80050d2:	e7fd      	b.n	80050d0 <prvTaskExitError+0x28>
	__asm volatile
 80050d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d8:	f383 8811 	msr	BASEPRI, r3
 80050dc:	f3bf 8f6f 	isb	sy
 80050e0:	f3bf 8f4f 	dsb	sy
 80050e4:	60bb      	str	r3, [r7, #8]
}
 80050e6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80050e8:	bf00      	nop
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d0fc      	beq.n	80050ea <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80050f0:	bf00      	nop
 80050f2:	bf00      	nop
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bc80      	pop	{r7}
 80050fa:	4770      	bx	lr
 80050fc:	20000014 	.word	0x20000014

08005100 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005100:	4b07      	ldr	r3, [pc, #28]	@ (8005120 <pxCurrentTCBConst2>)
 8005102:	6819      	ldr	r1, [r3, #0]
 8005104:	6808      	ldr	r0, [r1, #0]
 8005106:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800510a:	f380 8809 	msr	PSP, r0
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f04f 0000 	mov.w	r0, #0
 8005116:	f380 8811 	msr	BASEPRI, r0
 800511a:	f04e 0e0d 	orr.w	lr, lr, #13
 800511e:	4770      	bx	lr

08005120 <pxCurrentTCBConst2>:
 8005120:	200004a8 	.word	0x200004a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005124:	bf00      	nop
 8005126:	bf00      	nop

08005128 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005128:	4806      	ldr	r0, [pc, #24]	@ (8005144 <prvPortStartFirstTask+0x1c>)
 800512a:	6800      	ldr	r0, [r0, #0]
 800512c:	6800      	ldr	r0, [r0, #0]
 800512e:	f380 8808 	msr	MSP, r0
 8005132:	b662      	cpsie	i
 8005134:	b661      	cpsie	f
 8005136:	f3bf 8f4f 	dsb	sy
 800513a:	f3bf 8f6f 	isb	sy
 800513e:	df00      	svc	0
 8005140:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005142:	bf00      	nop
 8005144:	e000ed08 	.word	0xe000ed08

08005148 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800514e:	4b32      	ldr	r3, [pc, #200]	@ (8005218 <xPortStartScheduler+0xd0>)
 8005150:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	b2db      	uxtb	r3, r3
 8005158:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	22ff      	movs	r2, #255	@ 0xff
 800515e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	b2db      	uxtb	r3, r3
 8005166:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005168:	78fb      	ldrb	r3, [r7, #3]
 800516a:	b2db      	uxtb	r3, r3
 800516c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005170:	b2da      	uxtb	r2, r3
 8005172:	4b2a      	ldr	r3, [pc, #168]	@ (800521c <xPortStartScheduler+0xd4>)
 8005174:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005176:	4b2a      	ldr	r3, [pc, #168]	@ (8005220 <xPortStartScheduler+0xd8>)
 8005178:	2207      	movs	r2, #7
 800517a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800517c:	e009      	b.n	8005192 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800517e:	4b28      	ldr	r3, [pc, #160]	@ (8005220 <xPortStartScheduler+0xd8>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	3b01      	subs	r3, #1
 8005184:	4a26      	ldr	r2, [pc, #152]	@ (8005220 <xPortStartScheduler+0xd8>)
 8005186:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005188:	78fb      	ldrb	r3, [r7, #3]
 800518a:	b2db      	uxtb	r3, r3
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	b2db      	uxtb	r3, r3
 8005190:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005192:	78fb      	ldrb	r3, [r7, #3]
 8005194:	b2db      	uxtb	r3, r3
 8005196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800519a:	2b80      	cmp	r3, #128	@ 0x80
 800519c:	d0ef      	beq.n	800517e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800519e:	4b20      	ldr	r3, [pc, #128]	@ (8005220 <xPortStartScheduler+0xd8>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f1c3 0307 	rsb	r3, r3, #7
 80051a6:	2b04      	cmp	r3, #4
 80051a8:	d00b      	beq.n	80051c2 <xPortStartScheduler+0x7a>
	__asm volatile
 80051aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ae:	f383 8811 	msr	BASEPRI, r3
 80051b2:	f3bf 8f6f 	isb	sy
 80051b6:	f3bf 8f4f 	dsb	sy
 80051ba:	60bb      	str	r3, [r7, #8]
}
 80051bc:	bf00      	nop
 80051be:	bf00      	nop
 80051c0:	e7fd      	b.n	80051be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80051c2:	4b17      	ldr	r3, [pc, #92]	@ (8005220 <xPortStartScheduler+0xd8>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	021b      	lsls	r3, r3, #8
 80051c8:	4a15      	ldr	r2, [pc, #84]	@ (8005220 <xPortStartScheduler+0xd8>)
 80051ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80051cc:	4b14      	ldr	r3, [pc, #80]	@ (8005220 <xPortStartScheduler+0xd8>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80051d4:	4a12      	ldr	r2, [pc, #72]	@ (8005220 <xPortStartScheduler+0xd8>)
 80051d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	b2da      	uxtb	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80051e0:	4b10      	ldr	r3, [pc, #64]	@ (8005224 <xPortStartScheduler+0xdc>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a0f      	ldr	r2, [pc, #60]	@ (8005224 <xPortStartScheduler+0xdc>)
 80051e6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80051ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80051ec:	4b0d      	ldr	r3, [pc, #52]	@ (8005224 <xPortStartScheduler+0xdc>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a0c      	ldr	r2, [pc, #48]	@ (8005224 <xPortStartScheduler+0xdc>)
 80051f2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80051f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80051f8:	f000 f8b8 	bl	800536c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80051fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005228 <xPortStartScheduler+0xe0>)
 80051fe:	2200      	movs	r2, #0
 8005200:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005202:	f7ff ff91 	bl	8005128 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005206:	f7ff fde5 	bl	8004dd4 <vTaskSwitchContext>
	prvTaskExitError();
 800520a:	f7ff ff4d 	bl	80050a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3710      	adds	r7, #16
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	e000e400 	.word	0xe000e400
 800521c:	200005d4 	.word	0x200005d4
 8005220:	200005d8 	.word	0x200005d8
 8005224:	e000ed20 	.word	0xe000ed20
 8005228:	20000014 	.word	0x20000014

0800522c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
	__asm volatile
 8005232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005236:	f383 8811 	msr	BASEPRI, r3
 800523a:	f3bf 8f6f 	isb	sy
 800523e:	f3bf 8f4f 	dsb	sy
 8005242:	607b      	str	r3, [r7, #4]
}
 8005244:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005246:	4b0f      	ldr	r3, [pc, #60]	@ (8005284 <vPortEnterCritical+0x58>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	3301      	adds	r3, #1
 800524c:	4a0d      	ldr	r2, [pc, #52]	@ (8005284 <vPortEnterCritical+0x58>)
 800524e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005250:	4b0c      	ldr	r3, [pc, #48]	@ (8005284 <vPortEnterCritical+0x58>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d110      	bne.n	800527a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005258:	4b0b      	ldr	r3, [pc, #44]	@ (8005288 <vPortEnterCritical+0x5c>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00b      	beq.n	800527a <vPortEnterCritical+0x4e>
	__asm volatile
 8005262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005266:	f383 8811 	msr	BASEPRI, r3
 800526a:	f3bf 8f6f 	isb	sy
 800526e:	f3bf 8f4f 	dsb	sy
 8005272:	603b      	str	r3, [r7, #0]
}
 8005274:	bf00      	nop
 8005276:	bf00      	nop
 8005278:	e7fd      	b.n	8005276 <vPortEnterCritical+0x4a>
	}
}
 800527a:	bf00      	nop
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	bc80      	pop	{r7}
 8005282:	4770      	bx	lr
 8005284:	20000014 	.word	0x20000014
 8005288:	e000ed04 	.word	0xe000ed04

0800528c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005292:	4b12      	ldr	r3, [pc, #72]	@ (80052dc <vPortExitCritical+0x50>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d10b      	bne.n	80052b2 <vPortExitCritical+0x26>
	__asm volatile
 800529a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800529e:	f383 8811 	msr	BASEPRI, r3
 80052a2:	f3bf 8f6f 	isb	sy
 80052a6:	f3bf 8f4f 	dsb	sy
 80052aa:	607b      	str	r3, [r7, #4]
}
 80052ac:	bf00      	nop
 80052ae:	bf00      	nop
 80052b0:	e7fd      	b.n	80052ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80052b2:	4b0a      	ldr	r3, [pc, #40]	@ (80052dc <vPortExitCritical+0x50>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	3b01      	subs	r3, #1
 80052b8:	4a08      	ldr	r2, [pc, #32]	@ (80052dc <vPortExitCritical+0x50>)
 80052ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80052bc:	4b07      	ldr	r3, [pc, #28]	@ (80052dc <vPortExitCritical+0x50>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d105      	bne.n	80052d0 <vPortExitCritical+0x44>
 80052c4:	2300      	movs	r3, #0
 80052c6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80052ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bc80      	pop	{r7}
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	20000014 	.word	0x20000014

080052e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80052e0:	f3ef 8009 	mrs	r0, PSP
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	4b0d      	ldr	r3, [pc, #52]	@ (8005320 <pxCurrentTCBConst>)
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80052f0:	6010      	str	r0, [r2, #0]
 80052f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80052f6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80052fa:	f380 8811 	msr	BASEPRI, r0
 80052fe:	f7ff fd69 	bl	8004dd4 <vTaskSwitchContext>
 8005302:	f04f 0000 	mov.w	r0, #0
 8005306:	f380 8811 	msr	BASEPRI, r0
 800530a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800530e:	6819      	ldr	r1, [r3, #0]
 8005310:	6808      	ldr	r0, [r1, #0]
 8005312:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005316:	f380 8809 	msr	PSP, r0
 800531a:	f3bf 8f6f 	isb	sy
 800531e:	4770      	bx	lr

08005320 <pxCurrentTCBConst>:
 8005320:	200004a8 	.word	0x200004a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005324:	bf00      	nop
 8005326:	bf00      	nop

08005328 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
	__asm volatile
 800532e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005332:	f383 8811 	msr	BASEPRI, r3
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	607b      	str	r3, [r7, #4]
}
 8005340:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005342:	f7ff fc8d 	bl	8004c60 <xTaskIncrementTick>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d003      	beq.n	8005354 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800534c:	4b06      	ldr	r3, [pc, #24]	@ (8005368 <SysTick_Handler+0x40>)
 800534e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005352:	601a      	str	r2, [r3, #0]
 8005354:	2300      	movs	r3, #0
 8005356:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	f383 8811 	msr	BASEPRI, r3
}
 800535e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005360:	bf00      	nop
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	e000ed04 	.word	0xe000ed04

0800536c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005370:	4b0a      	ldr	r3, [pc, #40]	@ (800539c <vPortSetupTimerInterrupt+0x30>)
 8005372:	2200      	movs	r2, #0
 8005374:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005376:	4b0a      	ldr	r3, [pc, #40]	@ (80053a0 <vPortSetupTimerInterrupt+0x34>)
 8005378:	2200      	movs	r2, #0
 800537a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800537c:	4b09      	ldr	r3, [pc, #36]	@ (80053a4 <vPortSetupTimerInterrupt+0x38>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a09      	ldr	r2, [pc, #36]	@ (80053a8 <vPortSetupTimerInterrupt+0x3c>)
 8005382:	fba2 2303 	umull	r2, r3, r2, r3
 8005386:	099b      	lsrs	r3, r3, #6
 8005388:	4a08      	ldr	r2, [pc, #32]	@ (80053ac <vPortSetupTimerInterrupt+0x40>)
 800538a:	3b01      	subs	r3, #1
 800538c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800538e:	4b03      	ldr	r3, [pc, #12]	@ (800539c <vPortSetupTimerInterrupt+0x30>)
 8005390:	2207      	movs	r2, #7
 8005392:	601a      	str	r2, [r3, #0]
}
 8005394:	bf00      	nop
 8005396:	46bd      	mov	sp, r7
 8005398:	bc80      	pop	{r7}
 800539a:	4770      	bx	lr
 800539c:	e000e010 	.word	0xe000e010
 80053a0:	e000e018 	.word	0xe000e018
 80053a4:	20000008 	.word	0x20000008
 80053a8:	10624dd3 	.word	0x10624dd3
 80053ac:	e000e014 	.word	0xe000e014

080053b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b08a      	sub	sp, #40	@ 0x28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80053b8:	2300      	movs	r3, #0
 80053ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80053bc:	f7ff fba4 	bl	8004b08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80053c0:	4b5c      	ldr	r3, [pc, #368]	@ (8005534 <pvPortMalloc+0x184>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d101      	bne.n	80053cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80053c8:	f000 f924 	bl	8005614 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80053cc:	4b5a      	ldr	r3, [pc, #360]	@ (8005538 <pvPortMalloc+0x188>)
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4013      	ands	r3, r2
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f040 8095 	bne.w	8005504 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d01e      	beq.n	800541e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80053e0:	2208      	movs	r2, #8
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4413      	add	r3, r2
 80053e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f003 0307 	and.w	r3, r3, #7
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d015      	beq.n	800541e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f023 0307 	bic.w	r3, r3, #7
 80053f8:	3308      	adds	r3, #8
 80053fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f003 0307 	and.w	r3, r3, #7
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00b      	beq.n	800541e <pvPortMalloc+0x6e>
	__asm volatile
 8005406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800540a:	f383 8811 	msr	BASEPRI, r3
 800540e:	f3bf 8f6f 	isb	sy
 8005412:	f3bf 8f4f 	dsb	sy
 8005416:	617b      	str	r3, [r7, #20]
}
 8005418:	bf00      	nop
 800541a:	bf00      	nop
 800541c:	e7fd      	b.n	800541a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d06f      	beq.n	8005504 <pvPortMalloc+0x154>
 8005424:	4b45      	ldr	r3, [pc, #276]	@ (800553c <pvPortMalloc+0x18c>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	429a      	cmp	r2, r3
 800542c:	d86a      	bhi.n	8005504 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800542e:	4b44      	ldr	r3, [pc, #272]	@ (8005540 <pvPortMalloc+0x190>)
 8005430:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005432:	4b43      	ldr	r3, [pc, #268]	@ (8005540 <pvPortMalloc+0x190>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005438:	e004      	b.n	8005444 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800543a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800543e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	429a      	cmp	r2, r3
 800544c:	d903      	bls.n	8005456 <pvPortMalloc+0xa6>
 800544e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1f1      	bne.n	800543a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005456:	4b37      	ldr	r3, [pc, #220]	@ (8005534 <pvPortMalloc+0x184>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800545c:	429a      	cmp	r2, r3
 800545e:	d051      	beq.n	8005504 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005460:	6a3b      	ldr	r3, [r7, #32]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2208      	movs	r2, #8
 8005466:	4413      	add	r3, r2
 8005468:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800546a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	6a3b      	ldr	r3, [r7, #32]
 8005470:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	1ad2      	subs	r2, r2, r3
 800547a:	2308      	movs	r3, #8
 800547c:	005b      	lsls	r3, r3, #1
 800547e:	429a      	cmp	r2, r3
 8005480:	d920      	bls.n	80054c4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005482:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4413      	add	r3, r2
 8005488:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	f003 0307 	and.w	r3, r3, #7
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00b      	beq.n	80054ac <pvPortMalloc+0xfc>
	__asm volatile
 8005494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005498:	f383 8811 	msr	BASEPRI, r3
 800549c:	f3bf 8f6f 	isb	sy
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	613b      	str	r3, [r7, #16]
}
 80054a6:	bf00      	nop
 80054a8:	bf00      	nop
 80054aa:	e7fd      	b.n	80054a8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80054ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ae:	685a      	ldr	r2, [r3, #4]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	1ad2      	subs	r2, r2, r3
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80054b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80054be:	69b8      	ldr	r0, [r7, #24]
 80054c0:	f000 f90a 	bl	80056d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80054c4:	4b1d      	ldr	r3, [pc, #116]	@ (800553c <pvPortMalloc+0x18c>)
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	4a1b      	ldr	r2, [pc, #108]	@ (800553c <pvPortMalloc+0x18c>)
 80054d0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80054d2:	4b1a      	ldr	r3, [pc, #104]	@ (800553c <pvPortMalloc+0x18c>)
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	4b1b      	ldr	r3, [pc, #108]	@ (8005544 <pvPortMalloc+0x194>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d203      	bcs.n	80054e6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80054de:	4b17      	ldr	r3, [pc, #92]	@ (800553c <pvPortMalloc+0x18c>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a18      	ldr	r2, [pc, #96]	@ (8005544 <pvPortMalloc+0x194>)
 80054e4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80054e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	4b13      	ldr	r3, [pc, #76]	@ (8005538 <pvPortMalloc+0x188>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	431a      	orrs	r2, r3
 80054f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80054f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f6:	2200      	movs	r2, #0
 80054f8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80054fa:	4b13      	ldr	r3, [pc, #76]	@ (8005548 <pvPortMalloc+0x198>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	3301      	adds	r3, #1
 8005500:	4a11      	ldr	r2, [pc, #68]	@ (8005548 <pvPortMalloc+0x198>)
 8005502:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005504:	f7ff fb0e 	bl	8004b24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	f003 0307 	and.w	r3, r3, #7
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00b      	beq.n	800552a <pvPortMalloc+0x17a>
	__asm volatile
 8005512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005516:	f383 8811 	msr	BASEPRI, r3
 800551a:	f3bf 8f6f 	isb	sy
 800551e:	f3bf 8f4f 	dsb	sy
 8005522:	60fb      	str	r3, [r7, #12]
}
 8005524:	bf00      	nop
 8005526:	bf00      	nop
 8005528:	e7fd      	b.n	8005526 <pvPortMalloc+0x176>
	return pvReturn;
 800552a:	69fb      	ldr	r3, [r7, #28]
}
 800552c:	4618      	mov	r0, r3
 800552e:	3728      	adds	r7, #40	@ 0x28
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	200011e4 	.word	0x200011e4
 8005538:	200011f8 	.word	0x200011f8
 800553c:	200011e8 	.word	0x200011e8
 8005540:	200011dc 	.word	0x200011dc
 8005544:	200011ec 	.word	0x200011ec
 8005548:	200011f0 	.word	0x200011f0

0800554c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b086      	sub	sp, #24
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d04f      	beq.n	80055fe <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800555e:	2308      	movs	r3, #8
 8005560:	425b      	negs	r3, r3
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	4413      	add	r3, r2
 8005566:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	685a      	ldr	r2, [r3, #4]
 8005570:	4b25      	ldr	r3, [pc, #148]	@ (8005608 <vPortFree+0xbc>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4013      	ands	r3, r2
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10b      	bne.n	8005592 <vPortFree+0x46>
	__asm volatile
 800557a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800557e:	f383 8811 	msr	BASEPRI, r3
 8005582:	f3bf 8f6f 	isb	sy
 8005586:	f3bf 8f4f 	dsb	sy
 800558a:	60fb      	str	r3, [r7, #12]
}
 800558c:	bf00      	nop
 800558e:	bf00      	nop
 8005590:	e7fd      	b.n	800558e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00b      	beq.n	80055b2 <vPortFree+0x66>
	__asm volatile
 800559a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800559e:	f383 8811 	msr	BASEPRI, r3
 80055a2:	f3bf 8f6f 	isb	sy
 80055a6:	f3bf 8f4f 	dsb	sy
 80055aa:	60bb      	str	r3, [r7, #8]
}
 80055ac:	bf00      	nop
 80055ae:	bf00      	nop
 80055b0:	e7fd      	b.n	80055ae <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	4b14      	ldr	r3, [pc, #80]	@ (8005608 <vPortFree+0xbc>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4013      	ands	r3, r2
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d01e      	beq.n	80055fe <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d11a      	bne.n	80055fe <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	4b0e      	ldr	r3, [pc, #56]	@ (8005608 <vPortFree+0xbc>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	43db      	mvns	r3, r3
 80055d2:	401a      	ands	r2, r3
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80055d8:	f7ff fa96 	bl	8004b08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	685a      	ldr	r2, [r3, #4]
 80055e0:	4b0a      	ldr	r3, [pc, #40]	@ (800560c <vPortFree+0xc0>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4413      	add	r3, r2
 80055e6:	4a09      	ldr	r2, [pc, #36]	@ (800560c <vPortFree+0xc0>)
 80055e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80055ea:	6938      	ldr	r0, [r7, #16]
 80055ec:	f000 f874 	bl	80056d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80055f0:	4b07      	ldr	r3, [pc, #28]	@ (8005610 <vPortFree+0xc4>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	3301      	adds	r3, #1
 80055f6:	4a06      	ldr	r2, [pc, #24]	@ (8005610 <vPortFree+0xc4>)
 80055f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80055fa:	f7ff fa93 	bl	8004b24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80055fe:	bf00      	nop
 8005600:	3718      	adds	r7, #24
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	200011f8 	.word	0x200011f8
 800560c:	200011e8 	.word	0x200011e8
 8005610:	200011f4 	.word	0x200011f4

08005614 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800561a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800561e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005620:	4b27      	ldr	r3, [pc, #156]	@ (80056c0 <prvHeapInit+0xac>)
 8005622:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f003 0307 	and.w	r3, r3, #7
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00c      	beq.n	8005648 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	3307      	adds	r3, #7
 8005632:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f023 0307 	bic.w	r3, r3, #7
 800563a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	4a1f      	ldr	r2, [pc, #124]	@ (80056c0 <prvHeapInit+0xac>)
 8005644:	4413      	add	r3, r2
 8005646:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800564c:	4a1d      	ldr	r2, [pc, #116]	@ (80056c4 <prvHeapInit+0xb0>)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005652:	4b1c      	ldr	r3, [pc, #112]	@ (80056c4 <prvHeapInit+0xb0>)
 8005654:	2200      	movs	r2, #0
 8005656:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	4413      	add	r3, r2
 800565e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005660:	2208      	movs	r2, #8
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	1a9b      	subs	r3, r3, r2
 8005666:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f023 0307 	bic.w	r3, r3, #7
 800566e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	4a15      	ldr	r2, [pc, #84]	@ (80056c8 <prvHeapInit+0xb4>)
 8005674:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005676:	4b14      	ldr	r3, [pc, #80]	@ (80056c8 <prvHeapInit+0xb4>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2200      	movs	r2, #0
 800567c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800567e:	4b12      	ldr	r3, [pc, #72]	@ (80056c8 <prvHeapInit+0xb4>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2200      	movs	r2, #0
 8005684:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	1ad2      	subs	r2, r2, r3
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005694:	4b0c      	ldr	r3, [pc, #48]	@ (80056c8 <prvHeapInit+0xb4>)
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	4a0a      	ldr	r2, [pc, #40]	@ (80056cc <prvHeapInit+0xb8>)
 80056a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	4a09      	ldr	r2, [pc, #36]	@ (80056d0 <prvHeapInit+0xbc>)
 80056aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80056ac:	4b09      	ldr	r3, [pc, #36]	@ (80056d4 <prvHeapInit+0xc0>)
 80056ae:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80056b2:	601a      	str	r2, [r3, #0]
}
 80056b4:	bf00      	nop
 80056b6:	3714      	adds	r7, #20
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bc80      	pop	{r7}
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	200005dc 	.word	0x200005dc
 80056c4:	200011dc 	.word	0x200011dc
 80056c8:	200011e4 	.word	0x200011e4
 80056cc:	200011ec 	.word	0x200011ec
 80056d0:	200011e8 	.word	0x200011e8
 80056d4:	200011f8 	.word	0x200011f8

080056d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80056e0:	4b27      	ldr	r3, [pc, #156]	@ (8005780 <prvInsertBlockIntoFreeList+0xa8>)
 80056e2:	60fb      	str	r3, [r7, #12]
 80056e4:	e002      	b.n	80056ec <prvInsertBlockIntoFreeList+0x14>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	60fb      	str	r3, [r7, #12]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d8f7      	bhi.n	80056e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	4413      	add	r3, r2
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	429a      	cmp	r2, r3
 8005706:	d108      	bne.n	800571a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	685a      	ldr	r2, [r3, #4]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	441a      	add	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	441a      	add	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	429a      	cmp	r2, r3
 800572c:	d118      	bne.n	8005760 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	4b14      	ldr	r3, [pc, #80]	@ (8005784 <prvInsertBlockIntoFreeList+0xac>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	429a      	cmp	r2, r3
 8005738:	d00d      	beq.n	8005756 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	441a      	add	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	601a      	str	r2, [r3, #0]
 8005754:	e008      	b.n	8005768 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005756:	4b0b      	ldr	r3, [pc, #44]	@ (8005784 <prvInsertBlockIntoFreeList+0xac>)
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	601a      	str	r2, [r3, #0]
 800575e:	e003      	b.n	8005768 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	429a      	cmp	r2, r3
 800576e:	d002      	beq.n	8005776 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005776:	bf00      	nop
 8005778:	3714      	adds	r7, #20
 800577a:	46bd      	mov	sp, r7
 800577c:	bc80      	pop	{r7}
 800577e:	4770      	bx	lr
 8005780:	200011dc 	.word	0x200011dc
 8005784:	200011e4 	.word	0x200011e4

08005788 <memset>:
 8005788:	4603      	mov	r3, r0
 800578a:	4402      	add	r2, r0
 800578c:	4293      	cmp	r3, r2
 800578e:	d100      	bne.n	8005792 <memset+0xa>
 8005790:	4770      	bx	lr
 8005792:	f803 1b01 	strb.w	r1, [r3], #1
 8005796:	e7f9      	b.n	800578c <memset+0x4>

08005798 <_reclaim_reent>:
 8005798:	4b29      	ldr	r3, [pc, #164]	@ (8005840 <_reclaim_reent+0xa8>)
 800579a:	b570      	push	{r4, r5, r6, lr}
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4604      	mov	r4, r0
 80057a0:	4283      	cmp	r3, r0
 80057a2:	d04b      	beq.n	800583c <_reclaim_reent+0xa4>
 80057a4:	69c3      	ldr	r3, [r0, #28]
 80057a6:	b1ab      	cbz	r3, 80057d4 <_reclaim_reent+0x3c>
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	b16b      	cbz	r3, 80057c8 <_reclaim_reent+0x30>
 80057ac:	2500      	movs	r5, #0
 80057ae:	69e3      	ldr	r3, [r4, #28]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	5959      	ldr	r1, [r3, r5]
 80057b4:	2900      	cmp	r1, #0
 80057b6:	d13b      	bne.n	8005830 <_reclaim_reent+0x98>
 80057b8:	3504      	adds	r5, #4
 80057ba:	2d80      	cmp	r5, #128	@ 0x80
 80057bc:	d1f7      	bne.n	80057ae <_reclaim_reent+0x16>
 80057be:	69e3      	ldr	r3, [r4, #28]
 80057c0:	4620      	mov	r0, r4
 80057c2:	68d9      	ldr	r1, [r3, #12]
 80057c4:	f000 f864 	bl	8005890 <_free_r>
 80057c8:	69e3      	ldr	r3, [r4, #28]
 80057ca:	6819      	ldr	r1, [r3, #0]
 80057cc:	b111      	cbz	r1, 80057d4 <_reclaim_reent+0x3c>
 80057ce:	4620      	mov	r0, r4
 80057d0:	f000 f85e 	bl	8005890 <_free_r>
 80057d4:	6961      	ldr	r1, [r4, #20]
 80057d6:	b111      	cbz	r1, 80057de <_reclaim_reent+0x46>
 80057d8:	4620      	mov	r0, r4
 80057da:	f000 f859 	bl	8005890 <_free_r>
 80057de:	69e1      	ldr	r1, [r4, #28]
 80057e0:	b111      	cbz	r1, 80057e8 <_reclaim_reent+0x50>
 80057e2:	4620      	mov	r0, r4
 80057e4:	f000 f854 	bl	8005890 <_free_r>
 80057e8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80057ea:	b111      	cbz	r1, 80057f2 <_reclaim_reent+0x5a>
 80057ec:	4620      	mov	r0, r4
 80057ee:	f000 f84f 	bl	8005890 <_free_r>
 80057f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80057f4:	b111      	cbz	r1, 80057fc <_reclaim_reent+0x64>
 80057f6:	4620      	mov	r0, r4
 80057f8:	f000 f84a 	bl	8005890 <_free_r>
 80057fc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80057fe:	b111      	cbz	r1, 8005806 <_reclaim_reent+0x6e>
 8005800:	4620      	mov	r0, r4
 8005802:	f000 f845 	bl	8005890 <_free_r>
 8005806:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005808:	b111      	cbz	r1, 8005810 <_reclaim_reent+0x78>
 800580a:	4620      	mov	r0, r4
 800580c:	f000 f840 	bl	8005890 <_free_r>
 8005810:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005812:	b111      	cbz	r1, 800581a <_reclaim_reent+0x82>
 8005814:	4620      	mov	r0, r4
 8005816:	f000 f83b 	bl	8005890 <_free_r>
 800581a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800581c:	b111      	cbz	r1, 8005824 <_reclaim_reent+0x8c>
 800581e:	4620      	mov	r0, r4
 8005820:	f000 f836 	bl	8005890 <_free_r>
 8005824:	6a23      	ldr	r3, [r4, #32]
 8005826:	b14b      	cbz	r3, 800583c <_reclaim_reent+0xa4>
 8005828:	4620      	mov	r0, r4
 800582a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800582e:	4718      	bx	r3
 8005830:	680e      	ldr	r6, [r1, #0]
 8005832:	4620      	mov	r0, r4
 8005834:	f000 f82c 	bl	8005890 <_free_r>
 8005838:	4631      	mov	r1, r6
 800583a:	e7bb      	b.n	80057b4 <_reclaim_reent+0x1c>
 800583c:	bd70      	pop	{r4, r5, r6, pc}
 800583e:	bf00      	nop
 8005840:	20000018 	.word	0x20000018

08005844 <__libc_init_array>:
 8005844:	b570      	push	{r4, r5, r6, lr}
 8005846:	2600      	movs	r6, #0
 8005848:	4d0c      	ldr	r5, [pc, #48]	@ (800587c <__libc_init_array+0x38>)
 800584a:	4c0d      	ldr	r4, [pc, #52]	@ (8005880 <__libc_init_array+0x3c>)
 800584c:	1b64      	subs	r4, r4, r5
 800584e:	10a4      	asrs	r4, r4, #2
 8005850:	42a6      	cmp	r6, r4
 8005852:	d109      	bne.n	8005868 <__libc_init_array+0x24>
 8005854:	f000 f870 	bl	8005938 <_init>
 8005858:	2600      	movs	r6, #0
 800585a:	4d0a      	ldr	r5, [pc, #40]	@ (8005884 <__libc_init_array+0x40>)
 800585c:	4c0a      	ldr	r4, [pc, #40]	@ (8005888 <__libc_init_array+0x44>)
 800585e:	1b64      	subs	r4, r4, r5
 8005860:	10a4      	asrs	r4, r4, #2
 8005862:	42a6      	cmp	r6, r4
 8005864:	d105      	bne.n	8005872 <__libc_init_array+0x2e>
 8005866:	bd70      	pop	{r4, r5, r6, pc}
 8005868:	f855 3b04 	ldr.w	r3, [r5], #4
 800586c:	4798      	blx	r3
 800586e:	3601      	adds	r6, #1
 8005870:	e7ee      	b.n	8005850 <__libc_init_array+0xc>
 8005872:	f855 3b04 	ldr.w	r3, [r5], #4
 8005876:	4798      	blx	r3
 8005878:	3601      	adds	r6, #1
 800587a:	e7f2      	b.n	8005862 <__libc_init_array+0x1e>
 800587c:	080059d4 	.word	0x080059d4
 8005880:	080059d4 	.word	0x080059d4
 8005884:	080059d4 	.word	0x080059d4
 8005888:	080059d8 	.word	0x080059d8

0800588c <__retarget_lock_acquire_recursive>:
 800588c:	4770      	bx	lr

0800588e <__retarget_lock_release_recursive>:
 800588e:	4770      	bx	lr

08005890 <_free_r>:
 8005890:	b538      	push	{r3, r4, r5, lr}
 8005892:	4605      	mov	r5, r0
 8005894:	2900      	cmp	r1, #0
 8005896:	d040      	beq.n	800591a <_free_r+0x8a>
 8005898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800589c:	1f0c      	subs	r4, r1, #4
 800589e:	2b00      	cmp	r3, #0
 80058a0:	bfb8      	it	lt
 80058a2:	18e4      	addlt	r4, r4, r3
 80058a4:	f000 f83c 	bl	8005920 <__malloc_lock>
 80058a8:	4a1c      	ldr	r2, [pc, #112]	@ (800591c <_free_r+0x8c>)
 80058aa:	6813      	ldr	r3, [r2, #0]
 80058ac:	b933      	cbnz	r3, 80058bc <_free_r+0x2c>
 80058ae:	6063      	str	r3, [r4, #4]
 80058b0:	6014      	str	r4, [r2, #0]
 80058b2:	4628      	mov	r0, r5
 80058b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058b8:	f000 b838 	b.w	800592c <__malloc_unlock>
 80058bc:	42a3      	cmp	r3, r4
 80058be:	d908      	bls.n	80058d2 <_free_r+0x42>
 80058c0:	6820      	ldr	r0, [r4, #0]
 80058c2:	1821      	adds	r1, r4, r0
 80058c4:	428b      	cmp	r3, r1
 80058c6:	bf01      	itttt	eq
 80058c8:	6819      	ldreq	r1, [r3, #0]
 80058ca:	685b      	ldreq	r3, [r3, #4]
 80058cc:	1809      	addeq	r1, r1, r0
 80058ce:	6021      	streq	r1, [r4, #0]
 80058d0:	e7ed      	b.n	80058ae <_free_r+0x1e>
 80058d2:	461a      	mov	r2, r3
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	b10b      	cbz	r3, 80058dc <_free_r+0x4c>
 80058d8:	42a3      	cmp	r3, r4
 80058da:	d9fa      	bls.n	80058d2 <_free_r+0x42>
 80058dc:	6811      	ldr	r1, [r2, #0]
 80058de:	1850      	adds	r0, r2, r1
 80058e0:	42a0      	cmp	r0, r4
 80058e2:	d10b      	bne.n	80058fc <_free_r+0x6c>
 80058e4:	6820      	ldr	r0, [r4, #0]
 80058e6:	4401      	add	r1, r0
 80058e8:	1850      	adds	r0, r2, r1
 80058ea:	4283      	cmp	r3, r0
 80058ec:	6011      	str	r1, [r2, #0]
 80058ee:	d1e0      	bne.n	80058b2 <_free_r+0x22>
 80058f0:	6818      	ldr	r0, [r3, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	4408      	add	r0, r1
 80058f6:	6010      	str	r0, [r2, #0]
 80058f8:	6053      	str	r3, [r2, #4]
 80058fa:	e7da      	b.n	80058b2 <_free_r+0x22>
 80058fc:	d902      	bls.n	8005904 <_free_r+0x74>
 80058fe:	230c      	movs	r3, #12
 8005900:	602b      	str	r3, [r5, #0]
 8005902:	e7d6      	b.n	80058b2 <_free_r+0x22>
 8005904:	6820      	ldr	r0, [r4, #0]
 8005906:	1821      	adds	r1, r4, r0
 8005908:	428b      	cmp	r3, r1
 800590a:	bf01      	itttt	eq
 800590c:	6819      	ldreq	r1, [r3, #0]
 800590e:	685b      	ldreq	r3, [r3, #4]
 8005910:	1809      	addeq	r1, r1, r0
 8005912:	6021      	streq	r1, [r4, #0]
 8005914:	6063      	str	r3, [r4, #4]
 8005916:	6054      	str	r4, [r2, #4]
 8005918:	e7cb      	b.n	80058b2 <_free_r+0x22>
 800591a:	bd38      	pop	{r3, r4, r5, pc}
 800591c:	20001338 	.word	0x20001338

08005920 <__malloc_lock>:
 8005920:	4801      	ldr	r0, [pc, #4]	@ (8005928 <__malloc_lock+0x8>)
 8005922:	f7ff bfb3 	b.w	800588c <__retarget_lock_acquire_recursive>
 8005926:	bf00      	nop
 8005928:	20001334 	.word	0x20001334

0800592c <__malloc_unlock>:
 800592c:	4801      	ldr	r0, [pc, #4]	@ (8005934 <__malloc_unlock+0x8>)
 800592e:	f7ff bfae 	b.w	800588e <__retarget_lock_release_recursive>
 8005932:	bf00      	nop
 8005934:	20001334 	.word	0x20001334

08005938 <_init>:
 8005938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800593a:	bf00      	nop
 800593c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800593e:	bc08      	pop	{r3}
 8005940:	469e      	mov	lr, r3
 8005942:	4770      	bx	lr

08005944 <_fini>:
 8005944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005946:	bf00      	nop
 8005948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800594a:	bc08      	pop	{r3}
 800594c:	469e      	mov	lr, r3
 800594e:	4770      	bx	lr
